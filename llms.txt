# n8n Documentation

## Core Concepts

n8n is a fair-code licensed workflow automation tool that enables the connection of any app with an API to manipulate data with minimal coding effort. It supports highly flexible workflows, customizable nodes, and can be used via npm, Docker, or self-hosting.

## Node & Parameter Details

Standard nodes include integrations with services such as:
- Google Sheets
- Telegram
- MySQL
- Slack
- Discord
- Postgres
- Notion
- Gmail
- Airtable
- Google Drive

## Best Practices

- Use n8n's quickstart guides to rapidly understand and implement workflows.
- Select the appropriate hosting method (Cloud, npm, self-host) based on your needs.
- Explore n8n's integration library to find suitable applications to automate.

## Workflow Patterns

Key workflow patterns include:
- Creating an API endpoint
- AI agent chat
- Web scraping and summarization with AI
- Joining different datasets
- Backing up workflows to GitHub
- JSON to Excel conversion

## API Documentation

For specific API endpoints, methods, authentication, request, and response details, refer to the [API Documentation](https://docs.n8n.io/api/).

----------------------------------------

# Workflow Definition

## Workflow Name
- AI tutorial

## Nodes
### When chat message received
- **Type:** @n8n/n8n-nodes-langchain.chatTrigger
- **Type Version:** 1.1
- **ID:** a2d42e1f-36df-4a6a-a3b4-99a162074d11
- **Webhook ID:** 97c1a41f-8ef0-4d63-a924-92eb634384d3
- **Parameters:**
  - **Options:** {}

## Settings
- **Execution Order:** v1

## Metadata
- **Instance ID:** cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7
- **ID:** l05TkWXXYbOiuL4o
- **Version ID:** b1641385-c6b0-48a8-8e26-20d1f6bd7fda

## Status
- **Active:** false

## Additional Data
- **Pin Data:** {}
- **Connections:** {}
- **Tags:** []

----------------------------------------

## Workflow: AI Tutorial

### Nodes

1. **When chat message received**
   - **Type**: `@n8n/n8n-nodes-langchain.chatTrigger`
   - **Type Version**: 1.1
   - **ID**: `a2d42e1f-36df-4a6a-a3b4-99a162074d11`
   - **Webhook ID**: `97c1a41f-8ef0-4d63-a924-92eb634384d3`
   - **Position**: [-300, -40]
   - **Parameters**: 
     - Options: {}

2. **AI Agent**
   - **Type**: `@n8n/n8n-nodes-langchain.agent`
   - **Type Version**: 1.7
   - **ID**: `0f61a10f-668f-42f7-b835-cf3efb60082a`
   - **Position**: [-80, -40]
   - **Parameters**:
     - Options: {}

3. **OpenAI Chat Model**
   - **Type**: `@n8n/n8n-nodes-langchain.lmChatOpenAi`
   - **Type Version**: 1.2
   - **ID**: `b8129c6d-f201-4378-8f66-ce9a6cfd5f3b`
   - **Position**: [-100, 160]
   - **Parameters**: 
     - Model: 
       - **Mode**: list
       - **Value**: gpt-4o-mini
     - Options: {}
   - **Credentials**: 
     - **OpenAI API**:
       - ID: `jiPPcYV9I70iKapN`
       - Name: `OpenAi account 37`

4. **Simple Memory**
   - **Type**: `@n8n/n8n-nodes-langchain.memoryBufferWindow`
   - **Type Version**: 1.3
   - **ID**: `afbab05c-1e87-4f7a-9d66-c86f9db1ec64`
   - **Position**: [20, 180]
   - **Parameters**: {}

### Connections
- **When chat message received** → 
  - AI Agent (index 0)

- **OpenAI Chat Model** → 
  - AI Agent (index 0)
    - Type: ai_languageModel

- **Simple Memory** → 
  - AI Agent (index 0)
    - Type: ai_memory

### Workflow Settings
- **Execution Order**: v1
- **Version ID**: `b1641385-c6b0-48a8-8e26-20d1f6bd7fda`
- **Active**: false

### Additional Metadata
- **Template Credentials Setup Completed**: true
- **Instance ID**: `cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7`
- **Workflow ID**: `l05TkWXXYbOiuL4o`
- **Tags**: []

----------------------------------------

## Workflow Structure

### Name
AI tutorial

### Nodes
1. **When chat message received**
   - **Type**: `@n8n/n8n-nodes-langchain.chatTrigger`
   - **Type Version**: `1.1`
   - **Position**: `[-300, -40]`
   - **ID**: `a2d42e1f-36df-4a6a-a3b4-99a162074d11`
   - **Webhook ID**: `97c1a41f-8ef0-4d63-a924-92eb634384d3`
   - **Parameters**: 
     - options: {}

2. **AI Agent**
   - **Type**: `@n8n/n8n-nodes-langchain.agent`
   - **Type Version**: `1.7`
   - **Position**: `[-80, -40]`
   - **ID**: `0f61a10f-668f-42f7-b835-cf3efb60082a`
   - **Parameters**: 
     - options: {}

### Connections
- **When chat message received** connects to:
  - **AI Agent**
    - Type: `main`
    - Index: `0`

### Workflow Settings
- **Execution Order**: `v1`
- **Active**: `false`

### Metadata
- **Version ID**: `b1641385-c6b0-48a8-8e26-20d1f6bd7fda`
- **Instance ID**: `cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7`
- **ID**: `l05TkWXXYbOiuL4o`

----------------------------------------

## Workflow Definition

### Nodes

1. **Manual Trigger**
   - **Type**: `n8n-nodes-base.manualTrigger`
   - **ID**: `5738d1d8-ae7d-4e04-bca4-885c59e1d9e8`
   - **Name**: "When clicking ‘Execute workflow’"
   - **Parameters**: None

2. **Hacker News**
   - **Type**: `n8n-nodes-base.hackerNews`
   - **ID**: `65e9d0a6-5261-4c7d-8d85-6ff49de04dee`
   - **Name**: "Hacker News"
   - **Parameters**:
     - **Resource**: `all`
     - **Limit**: `10`
     - **Additional Fields**:
       - **Keyword**: `"automation"`
   - **Notes**: Get the 10 latest articles.

### Connections

- **When clicking ‘Execute workflow’** connects to:
  - **Hacker News** (Main Index: `0`)

----------------------------------------

# n8n Workflow Configuration

## Nodes

### HTTP Request
- **Type:** n8n-nodes-base.httpRequest
- **Type Version:** 4.2
- **Parameters:**
  - **URL:** `https://internal.users.n8n.cloud/webhook/custom-erp`
  - **Authentication:** `genericCredentialType`
  - **Generic Auth Type:** `httpHeaderAuth`
  - **Send Headers:** `true`
  - **Header Parameters:** 
    - **Name:** `unique_id`
    - **Value:** `4d259ec5241587a0d2820670fc048f0d`
- **Position:** [220, -40]
- **Credentials:**
  - **httpHeaderAuth:** 
    - **ID:** `sMuanZ4xGobAurzY`
    - **Name:** `Nathan's ABCorp data warehouse account`

### Airtable
- **Type:** n8n-nodes-base.airtable
- **Type Version:** 2.1
- **Parameters:**
  - **Operation:** `create`
  - **Base:** 
    - **Value:** `app9nOVsRxdypoknP`
  - **Table:** 
    - **Value:** `tblTIOsm4BLJD9Tql`
  - **Columns:**
    - **Schema:** 
      - `orderID`: 
        - **Type:** `number`
      - `employeeName`: 
        - **Type:** `string`
- **Position:** [880, -140]
- **Credentials:**
  - **airtableTokenApi:** 
    - **ID:** `UT32NHUYnp4pn1H3`
    - **Name:** `Airtable Personal Access Token account`

### If
- **Type:** n8n-nodes-base.if
- **Type Version:** 2.2
- **Parameters:**
  - **Conditions:**
    - **Combinator:** `and`
    - **Conditions:** 
      - **Left Value:** `={{ $json.orderStatus }}`
      - **Right Value:** `processing`
      - **Operator:** 
        - **Type:** `string`
        - **Operation:** `equals`
- **Position:** [440, -40]

### Edit Fields
- **Type:** n8n-nodes-base.set
- **Type Version:** 3.4
- **Parameters:**
  - **Assignments:**
    - **Name:** `orderID`
    - **Value:** `={{ $json.orderID }}`
    - **Type:** `number`
    - **Name:** `employeeName`
    - **Value:** `={{ $json.employeeName }}`
    - **Type:** `string`
- **Position:** [660, -140]

### Code
- **Type:** n8n-nodes-base.code
- **Type Version:** 2
- **Parameters:**
  - **JS Code:**
    ```javascript
    let items = $input.all();
    let totalBooked = items.length;
    let bookedSum = 0;

    for (let i=0; i < items.length; i++) {
      bookedSum = bookedSum + items[i].json.orderPrice;
    }

    return [{ json: {totalBooked, bookedSum} }];
    ```
- **Position:** [660, 60]

### Discord
- **Type:** n8n-nodes-base.discord
- **Type Version:** 2
- **Parameters:**
  - **Authentication:** `webhook`
  - **Content:** `=This week we've {{$json["totalBooked"]}} booked orders with a total value of {{$json["bookedSum"]}}. My Unique ID: {{ $('HTTP Request').params["headerParameters"]["parameters"][0]["value"] }}`
- **Position:** [880, 60]
- **Credentials:**
  - **discordWebhookApi:** 
    - **ID:** `lOieo0mIb6h1Wi9R`
    - **Name:** `Discord Webhook account`

### Schedule Trigger
- **Type:** n8n-nodes-base.scheduleTrigger
- **Type Version:** 1.2
- **Parameters:**
  - **Rule:**
    - **Interval:**
      - **Field:** `weeks`
      - **Trigger At Day:** [1]
      - **Trigger At Hour:** `9`
- **Position:** [0, -40]

## Connections

- **HTTP Request** → **If**
- **If** → **Edit Fields**
- **If** → **Code**
- **Edit Fields** → **Airtable**
- **Code** → **Discord**
- **Schedule Trigger** → **HTTP Request**  

## Metadata
- **Instance ID:** `24789c4d5aa56ca018d140332e7a43fd37dd7af0409453314fff12dc1aeebfa8`

----------------------------------------

# Workflow: Agents vs Chains

## Nodes

1. **Chat Trigger**
   - **Type:** `@n8n/n8n-nodes-langchain.chatTrigger`
   - **ID:** `9e1d8f35-e1ba-4600-977d-e54a919c2c62`

2. **OpenAI Chat Model**
   - **Type:** `@n8n/n8n-nodes-langchain.lmChatOpenAi`
   - **ID:** `4b89df4b-4f78-4f52-a51d-eeb66a7948e5`
   - **Credentials:** 
     - OpenAi account: `OpenAi account Debs`

3. **OpenAI Chat Model1**
   - **Type:** `@n8n/n8n-nodes-langchain.lmChatOpenAi`
   - **ID:** `a0045df2-d212-4e6a-a2d4-722136dcb8b5`
   - **Credentials:** 
     - OpenAi account: `OpenAi account Debs`

4. **Simple Memory**
   - **Type:** `@n8n/n8n-nodes-langchain.memoryBufferWindow`
   - **ID:** `d702f647-1fa7-4b4f-91b1-e0152326ea11`

5. **Wikipedia**
   - **Type:** `@n8n/n8n-nodes-langchain.toolWikipedia`
   - **ID:** `76cc359a-5ec8-446a-a8e0-9035d18247cb`

6. **AI Agent**
   - **Type:** `@n8n/n8n-nodes-langchain.agent`
   - **ID:** `01d1785f-f7c4-47d2-97b7-76eeff68002d`

7. **Basic LLM Chain**
   - **Type:** `@n8n/n8n-nodes-langchain.chainLlm`
   - **ID:** `bcdcd704-13f5-4906-b337-7ec4629b9781`
   - **Parameters:** 
     - **messages:** `{"messageValues":[{"message":"Every time you respond, start your response with the sentence: \"This message came from the chain\"."}]}`
   
8. **Check User Input for "Chain" or "Agent"**
   - **Type:** `n8n-nodes-base.switch`
   - **ID:** `ab2bff8d-e914-421d-9aa3-9d0ad815cea6`
   - **Parameters:** 
     - **rules:** 
       - Check if input contains "agent"
       - Check if input contains "chain"

## Connections

- **Chat Trigger** to **Check User Input for "Chain" or "Agent"**
- **OpenAI Chat Model** to **AI Agent**
- **OpenAI Chat Model1** to **Basic LLM Chain**
- **Simple Memory** to **AI Agent**
- **Wikipedia** to **AI Agent**
- **Check User Input for "Chain" or "Agent"** to:
  - **AI Agent**
  - **Basic LLM Chain**

## Configuration Instructions

- Set your credentials for OpenAI in the **OpenAI Chat Model** and **OpenAI Chat Model1** nodes.

## Best Practices

- The agent can use the Wikipedia tool to access articles from Wikipedia.
- Memory allows the agent to access previous parts of the chat.

## Version Information

- **Version ID:** `59784a0f-0601-4456-b48d-9a191e203461`
- **Execution Order:** `v1` 

## Summary

This workflow demonstrates the use of agents and chains in an n8n workflow leveraging AI capabilities with OpenAI, memory management, and access to external knowledge sources like Wikipedia.

----------------------------------------

## Workflow Definition

### Ask a human Workflow
```json
{
  "name": "Ask a human",
  "nodes": [
    {
      "id": "a60c8572-56c1-4bf3-8352-a6419a475887",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.1
    },
    {
      "id": "b4f2e26c-903b-46b8-bd8b-110fd64de9e4",
      "name": "Not sure?",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "parameters": {
        "name": "dont_know_tool",
        "description": "Use this tool if you don't know the answer to the user's question, or if you're not very confident about your answer.",
        "workflowId": "={{ $workflow.id}}",
        "fields": {
          "values": [
            {
              "name": "chatInput",
              "stringValue": "={{ $('Chat Trigger').item.json.chatInput }}"
            }
          ]
        }
      }
    },
    {
      "id": "951cc691-b422-4ce6-901f-b7feb3afd1ad",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1
    },
    {
      "id": "927b775a-47f6-4067-a1a5-5f13dea28e45",
      "name": "Chat Trigger",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1,
      "webhookId": "785e0c0c-12e5-4249-9abe-47bb131975cb"
    },
    {
      "id": "971e7b90-c2d8-4292-9da8-732d7d399f04",
      "name": "Prompt the user to provide an email",
      "type": "n8n-nodes-base.code",
      "parameters": {
        "jsCode": "response = {\"response\":\"I'm sorry I don't know the answer. Please repeat your question and include your email address so I can request help.\"};\nreturn response;"
      }
    },
    {
      "id": "6f5a21b3-c145-46c8-8e69-660100c4a6fc",
      "name": "Confirm that we've messaged a human",
      "type": "n8n-nodes-base.code",
      "parameters": {
        "jsCode": "response = {\"response\": \"Thank you for getting in touch. I've messaged a human to help.\"}\nreturn response;"
      }
    },
    {
      "id": "8b17da5e-e392-4028-91b0-bc02d34e46ed",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "parameters": {
        "options": {
          "systemMessage": "Try to answer the user's question. When you can't answer, or you're not confident of the answer, use the appropriate tool. When you use the dont_know_tool, respond with the message from the tool."
        }
      }
    },
    {
      "id": "990ecd3b-6aa0-4b17-8d01-d606b9164fa8",
      "name": "Check if user has provided email",
      "type": "n8n-nodes-base.if",
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5e21e7c5-db60-4111-bb17-c289ae0fc159",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.chatInput }}",
              "rightValue": "/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      }
    },
    {
      "id": "d14da0ae-06ca-422b-b5b6-e7759e74c787",
      "name": "Message Slack for help",
      "type": "n8n-nodes-base.slack",
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "",
          "mode": "name"
        },
        "text": "={{ \"A user had a question the bot couldn't answer. Here's their message: \" + $('Execute Workflow Trigger').item.json.chatInput }}",
        "otherOptions": {}
      }
    },
    {
      "id": "278391c7-6945-495e-a4f1-74fb8fcc3549",
      "name": "GPT4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": "gpt-4",
        "options": {
          "temperature": 0.2
        }
      }
    }
  ],
  "connections": {
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Not sure?": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Check if user has provided email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if user has provided email": {
      "main": [
        [
          {
            "node": "Message Slack for help",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prompt the user to provide an email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Slack for help": {
      "main": [
        [
          {
            "node": "Confirm that we've messaged a human",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

----------------------------------------

# Chat with Google Sheets Workflow

## Nodes

### Execute Workflow Trigger
- **Type**: `n8n-nodes-base.executeWorkflowTrigger`
- **ID**: `e96a5e41-f0d6-49c1-977e-ff724a857212`

### Chat Trigger
- **Type**: `@n8n/n8n-nodes-langchain.chatTrigger`
- **ID**: `5d56d128-9a83-45ee-a34c-bc1190d59322`
- **Webhook ID**: `e3f23177-c7c1-417b-a513-1c1090dda0a2`

### Get Google Sheet Contents
- **Type**: `n8n-nodes-base.googleSheets`
- **ID**: `3c0e4b48-a27b-472f-948e-9aa001c49149`
- **Parameters**:
  - **Authentication**: `serviceAccount`
  - **Document ID**: `={{ $json.sheetUrl }}`
  - **Sheet Name**: `={{ $json.sheetUrl }}`

### Set Google Sheet URL
- **Type**: `n8n-nodes-base.set`
- **ID**: `67f9c172-e70f-4a0f-afd3-513cfeae09db`
- **Fields**:
  - **Values**:
    - `sheetUrl`

### Get Column Names
- **Type**: `n8n-nodes-base.set`
- **ID**: `d49223eb-2927-4ddd-bd2c-cd439f927341`
- **Fields**:
  - **Values**:
    - `response`: `={{ Object.keys($json) }}`

### Prepare Output
- **Type**: `n8n-nodes-base.code`
- **ID**: `37ceba7a-1f0b-4de7-ae4a-d29a18dabaf6`
- **jsCode**:
  ```javascript
  return {
    'response': JSON.stringify($input.all().map(x => x.json))
  }
  ```

### List Columns Tool
- **Type**: `@n8n/n8n-nodes-langchain.toolWorkflow`
- **ID**: `94516eb1-89fc-4d3f-8000-d0fa43cd71cd`
- **Parameters**:
  - **Name**: `list_columns_tool`
  - **Description**: `=### List all column names in customer data`
  - **Operation**: `column_names`

### Get Customer Tool
- **Type**: `@n8n/n8n-nodes-langchain.toolWorkflow`
- **ID**: `006745a1-3df7-4de9-9483-c6e133272c55`
- **Parameters**:
  - **Name**: `get_customer_tool`
  - **Description**: `=### Get all columns for a given customer`
  - **Operation**: `row`

### Simple Memory
- **Type**: `@n8n/n8n-nodes-langchain.memoryBufferWindow`
- **ID**: `c3d20569-1374-4f8d-8779-23b98952d124`

### Get Column Values Tool
- **Type**: `@n8n/n8n-nodes-langchain.toolWorkflow`
- **ID**: `3a370ae9-eaf8-4e84-948b-848c461ac9eb`
- **Parameters**:
  - **Name**: `column_values_tool`
  - **Description**: `=### Get the specified column value for all customers`
  - **Operation**: `column_values`

### AI Agent
- **Type**: `@n8n/n8n-nodes-langchain.agent`
- **ID**: `8f2a4854-2177-4ac8-9501-fa36cf2a3d73`
- **Parameters**:
  - **Text**: `={{ $json.chatInput }}`
  - **Options**:
    - **Max Iterations**: `10`

### Check Operations
- **Type**: `n8n-nodes-base.switch`
- **ID**: `907deea9-26cc-427e-93fc-52ce6b67e5e1`
- **Parameters**:
  - **Rules**:
    - Conditions for `column_names`, `column_values`, `row`

### Prepare Column Data
- **Type**: `n8n-nodes-base.set`
- **ID**: `f2ebcae6-3cfb-4862-a927-dc66bd24f197`
- **Fields**:
  - **Include**: `none`
  - **Values**:
    - `={{ $('Execute Workflow Trigger').item.json.query }}`
    - `row_number:={{ $json.row_number }}`

### Filter Out Other Rows
- **Type**: `n8n-nodes-base.filter`
- **ID**: `f40acb04-ef06-4670-b8b1-86b04f066af8`
- **Conditions**:
  - Condition for filtering based on `row_number`

## Connections

- **GPT4 Model**: 
  - **ai_languageModel**: to **AI Agent**

- **Chat Trigger**: 
  - **Main**: to **AI Agent**

- **Get Column Names**: 
  - **Main**: to **Prepare Output**

- **Get Customer Tool**: 
  - **ai_tool**: to **AI Agent**

- **List Columns Tool**: 
  - **ai_tool**: to **AI Agent**

- **Set Google Sheet URL**: 
  - **Main**: to **Get Google Sheet Contents**

- **Simple Memory**: 
  - **ai_memory**: to **AI Agent**

- **Get Column Values Tool**: 
  - **ai_tool**: to **AI Agent**

- **Execute Workflow Trigger**: 
  - **Main**: to **Set Google Sheet URL**

- **Get Google Sheet Contents**: 
  - **Main**: to **Check Operations**

- **Check Operations**: 
  - **Main**: to **Get Column Names**, **Prepare Column Data**, **Filter Out Other Rows**

- **Prepare Column Data**: 
  - **Main**: to **Prepare Output**

- **Filter Out Other Rows**: 
  - **Main**: to **Prepare Output**

----------------------------------------

# Workflow: Let your AI call an API

## Node Details

### Execute Workflow Trigger
- **Type:** n8n-nodes-base.executeWorkflowTrigger
- **ID:** 35ce49a9-eda1-4da5-a6cb-39a39680111b

### Chat Trigger
- **Type:** @n8n/n8n-nodes-langchain.chatTrigger
- **ID:** f262f04b-964c-47c0-b7dc-a86b82b0184b
- **Webhook ID:** e3f23177-c7c1-417b-a513-1c1090dda0a2

### Simple Memory
- **Type:** @n8n/n8n-nodes-langchain.memoryBufferWindow
- **ID:** 29678c05-9a48-41ec-9c5c-af36ee0d7fc6

### Activity Tool
- **Type:** @n8n/n8n-nodes-langchain.toolWorkflow
- **ID:** 82a3c606-0d7a-4b45-aae7-df35525615f7
- **Parameters:**
  - **Name:** activity_tool
  - **Description:** Suggest an activity for a person to do.
  - **Workflow ID:** ={{$workflow.id}}
  - **Fields:**
    - chatInput: ={{$('Chat Trigger').item.json.chatInput}}

### AI Agent
- **Type:** @n8n/n8n-nodes-langchain.agent
- **ID:** 716dea0d-a987-4cf7-ae4a-bf0f7c7d7da9
- **Parameters:**
  - **Text:** ={{$json.chatInput}}
  - **Options:**
    - maxIterations: 10

### Auto-fixing Output Parser
- **Type:** @n8n/n8n-nodes-langchain.outputParserAutofixing
- **ID:** f469fba8-07ae-4c79-a79c-2c49946d94e2

### GPT4 Model 1
- **Type:** @n8n/n8n-nodes-langchain.lmChatOpenAi
- **ID:** f65054a9-771c-47f8-94cc-4ed766f89d19
- **Parameters:**
  - **Model:** gpt-4

### GPT4 Model 2
- **Type:** @n8n/n8n-nodes-langchain.lmChatOpenAi
- **ID:** 94c2a6d8-cab9-48c2-8801-4306f0957f50
- **Parameters:**
  - **Model:** gpt-4

### GPT4 Model 3
- **Type:** @n8n/n8n-nodes-langchain.lmChatOpenAi
- **ID:** 5f423800-2eaf-43f5-bd59-dc1212cb55ad
- **Parameters:**
  - **Model:** gpt-4

### Call the API
- **Type:** n8n-nodes-base.httpRequest
- **ID:** 340c2536-6e79-4af6-9cd0-5cbf6eae1983
- **Parameters:**
  - **URL:** http://www.boredapi.com/api/activity/
  - **Send Query:** true
  - **Query Parameters:**
    - **Name:** type
      - **Value:** ={{$json.output.type.data}}
    - **Name:** participants
      - **Value:** ={{$json.output.participants}}

### Work out activity type and number of people
- **Type:** @n8n/n8n-nodes-langchain.chainLlm
- **ID:** d7d5455c-2e46-4896-853c-6b527e9403e4
- **Parameters:**
  - **Prompt:** ={{$('Execute Workflow Trigger').item.json.chatInput}}

### Set 'response' value
- **Type:** n8n-nodes-base.set
- **ID:** 83f9ac05-4583-4cc4-bcc8-29ae450c95cb
- **Parameters:**
  - **Assignments:**
    - **Response:** ={{$json.activity}}

### Structure as JSON
- **Type:** @n8n/n8n-nodes-langchain.outputParserStructured
- **ID:** a50c7858-b0fd-44d6-898d-452ffc5cbd72
- **Parameters:**
  - **JSON Schema:** 
    ```json
    {
      "type": "object",
      "properties": {
        "type": {
          "type": "object",
          "properties": {
            "data": {
              "enum": ["education", "recreational", "social", "diy", "charity", "cooking", "relaxation", "music", "busywork"]
            }
          }
        },
        "participants": {
          "type": "number"
        }
      }
    }
    ```

## Connection Details

### Connections Overview
- **Chat Trigger**
  - Connects to AI Agent
- **Simple Memory**
  - Connects to AI Agent
- **Execute Workflow Trigger**
  - Connects to Work out activity type and number of people
- **Activity Tool**
  - Connects to AI Agent
- **Auto-fixing Output Parser**
  - Connects to Work out activity type and number of people
- **GPT4 Model 1**
  - Connects to AI Agent
- **GPT4 Model 2**
  - Connects to Work out activity type and number of people
- **GPT4 Model 3**
  - Connects to Auto-fixing Output Parser
- **Structure as JSON**
  - Connects to Auto-fixing Output Parser
- **Call the API**
  - Connects to Set 'response' value
- **Work out activity type and number of people**
  - Connects to Call the API

----------------------------------------

## Workflow: Populate a Pinecone Vector Database from a Website

### Nodes

1. **Embeddings OpenAI**
   - Type: `@n8n/n8n-nodes-langchain.embeddingsOpenAi`
   - Parameters:
     - model: `text-embedding-3-large`
   - Credentials: OpenAi account Debs

2. **Default Data Loader**
   - Type: `@n8n/n8n-nodes-langchain.documentDefaultDataLoader`
  
3. **Recursive Character Text Splitter**
   - Type: `@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter`
   - Parameters:
     - splitCode: `markdown`

4. **Loop Over Items**
   - Type: `n8n-nodes-base.splitInBatches`
   - Parameters:
     - batchSize: `10`

5. **OpenAI Model**
   - Type: `@n8n/n8n-nodes-langchain.lmOpenAi`
   - Parameters:
     - model: `gpt-4o`
   - Credentials: OpenAi account Debs

6. **Get sitemap**
   - Type: `n8n-nodes-base.httpRequest`
   - Parameters:
     - url: `https://n8n-io.github.io/n8n-demo-website/sitemap.xml`

7. **Turn XML sitemap into JSON**
   - Type: `n8n-nodes-base.xml`
   - Parameters:
     - explicitRoot: `false`
     - ignoreAttrs: `true`

8. **Turn the URL array into multiple items**
   - Type: `n8n-nodes-base.splitOut`
   - Parameters:
     - fieldToSplitOut: `url`

9. **Wait 5 seconds**
   - Type: `n8n-nodes-base.wait`

10. **Get pages listed in the sitemap**
    - Type: `n8n-nodes-base.httpRequest`
    - Parameters:
      - url: `={{ $json.loc }}`

11. **Chat Trigger**
    - Type: `@n8n/n8n-nodes-langchain.chatTrigger`

12. **Question and Answer Chain**
    - Type: `@n8n/n8n-nodes-langchain.chainRetrievalQa`
    - Parameters:
      - promptType: `define`
      - text: `={{ $('Chat Trigger').item.json.chatInput }}`

13. **Vector Store Retriever**
    - Type: `@n8n/n8n-nodes-langchain.retrieverVectorStore`
    - Parameters:
      - topK: `10`

14. **Embeddings OpenAI2**
    - Type: `@n8n/n8n-nodes-langchain.embeddingsOpenAi`
    - Parameters:
      - model: `text-embedding-3-large`
    - Credentials: OpenAi account Debs

15. **Aggregate**
    - Type: `n8n-nodes-base.aggregate`
    - Parameters:
      - fieldsToAggregate:
        - fieldToAggregate: 
          - content

16. **Pinecone Vector Store**
    - Type: `@n8n/n8n-nodes-langchain.vectorStorePinecone`
    - Parameters:
      - mode: `insert`
      - options:
        - clearNamespace: `true`
        - pineconeNamespace: `test-web-scraper`
    - Credentials: Pinecone API

17. **Pinecone Vector Store2**
    - Type: `@n8n/n8n-nodes-langchain.vectorStorePinecone`
    - Parameters:
      - options:
        - pineconeNamespace: `test-web-scraper`
    - Credentials: Pinecone API

18. **Extract main content**
    - Type: `n8n-nodes-base.html`
    - Parameters:
      - operation: `extractHtmlContent`
      - extractionValues:
        - key: `content`
          cssSelector: `.md-content`
          returnValue: `html`
      - options:
        - trimValues: `true`
        - cleanUpText: `true`

19. **Start the workflow by clicking "Execute workflow"**
    - Type: `n8n-nodes-base.manualTrigger`

### Connections

- **Embeddings OpenAI** → **Pinecone Vector Store** (ai_embedding)
- **Default Data Loader** → **Pinecone Vector Store** (ai_document)
- **Recursive Character Text Splitter** → **Default Data Loader** (ai_textSplitter)
- **Loop Over Items** → **Extract main content**, **Get pages listed in the sitemap**
- **Get sitemap** → **Turn XML sitemap into JSON**
- **Turn XML sitemap into JSON** → **Turn the URL array into multiple items**
- **Turn the URL array into multiple items** → **Loop Over Items**
- **Wait 5 seconds** → **Loop Over Items**
- **Get pages listed in the sitemap** → **Wait 5 seconds**
- **Chat Trigger** → **Question and Answer Chain**
- **OpenAI Model** → **Question and Answer Chain** (ai_languageModel)
- **Vector Store Retriever** → **Question and Answer Chain** (ai_retriever)
- **Embeddings OpenAI2** → **Pinecone Vector Store2** (ai_embedding)
- **Aggregate** → **Pinecone Vector Store** 
- **Pinecone Vector Store2** → **Vector Store Retriever** (ai_vectorStore)
- **Start the workflow by clicking "Execute workflow"** → **Get sitemap**
- **Extract main content** → **Aggregate**

Built with ❤️ by Synaptiv AI

----------------------------------------

# Workflow: Data Transformation

## Nodes

1. **Manual Trigger**  
   - **ID**: `3ada6076-1cfb-4c2d-a421-4fce5466fc2d`  
   - **Type**: `n8n-nodes-base.manualTrigger`  
   - **Position**: [1340, 840]

2. **Code**  
   - **ID**: `08e4d878-01ab-4f01-ab27-84ef5afbf581`  
   - **Type**: `n8n-nodes-base.code`  
   - **Parameters**:
     ```javascript
     return [
     {
     "user_id":
     "0001",
     "username":
     "nathan",
     "date":
     "2023-08-10",
     "variant":
     "control",
     "data_exec_success":
     "TRUE"
     },
     {
     "user_id":
     "0002",
     "username":
     "natalie",
     "date":
     "2023-08-10",
     "variant":
     "control",
     "data_exec_success":
     "TRUE"
     },
     {
     "user_id":
     "0003",
     "username":
     "nadia",
     "date":
     "2023-08-10",
     "variant":
     "control",
     "data_exec_success":
     "FALSE"
     },
     {
     "user_id":
     "naomi",
     "username":
     "hkhjk",
     "date":
     "2023-08-10",
     "variant":
     "control",
     "data_exec_success":
     "FALSE"
     },
     {
     "user_id":
     "0005",
     "username":
     "nolan",
     "date":
     "2023-08-10",
     "variant":
     "control",
     "data_exec_success":
     "FALSE"
     }
     ]
     ```
   - **Position**: [1560, 840]

3. **Join Items**  
   - **ID**: `57a9330b-9e46-42a6-b432-681e906de93a`  
   - **Type**: `n8n-nodes-base.code`  
   - **Position**: [1780, 840]

## Connections

- **When clicking "Execute Workflow"**  
  - Connects to **Code** (Type: main, Index: 0)

- **Code**  
  - Connects to **Join Items** (Type: main, Index: 0)

## Settings

- **Execution Order**: `v1`

## Metadata

- **Version ID**: `d7409102-d3af-4ddf-bead-2df008554458`
- **ID**: `B4K5I5pN4nqu85ac`
- **Instance ID**: `c5aabef739d71e3d0ceb8b6078a241aaf1b145fa71cbbe36ecfb2c8c3fd64f5f`

----------------------------------------

# Workflow: Find a Piece of Data

## Nodes

1. **When clicking "Execute Workflow"**
   - **Type:** n8n-nodes-base.manualTrigger
   - **ID:** 5319a081-f4f9-44ac-a91e-a57270e6eaa8

2. **Mock Slack**
   - **Type:** n8n-nodes-base.code
   - **ID:** 3ec439bc-7e3f-4ec2-b724-092466efaa18
   - **Parameters:**
     ```javascript
     return [
     {
       "title": "",
       "phone": "",
       "skype": "",
       "real_name": "Nathan Berlin",
       "email": "nathan@example.io",
       "real_name_normalized": "Nathan Berlin",
       "display_name": "Nathan Berlin",
       "display_name_normalized": "Nathan Berlin",
       "fields": {},
       "status_text": "",
       "status_emoji": "",
       "status_emoji_display_info": [],
       "status_expiration": 0,
       "avatar_hash": "0856f5fbbd43",
       "image_original": "https://example.png",
       "is_custom_image": true,
       "huddle_state": "default_unset",
       "huddle_state_expiration_ts": 0,
       "first_name": "Nathan",
       "last_name": "Berlin",
       "image_24": "https://example.png",
       "image_32": "https://example.png",
       "image_48": "https://example.png",
       "image_72": "https://example.png",
       "image_192": "https://example.png",
       "image_512": "https://example.png",
       "image_1024": "https://example.png",
       "status_text_canonical": ""
     }
     ]
     ```

3. **Mock Notion**
   - **Type:** n8n-nodes-base.code
   - **ID:** 4bb97ec6-c73a-4f01-b935-a94ffbf15d23
   - **Parameters:**
     ```javascript
     return [
     {
       "object": "user",
       "id": "1234",
       "name": "Nathan Berlin",
       "avatar_url": "https://example.jpeg",
       "type": "person",
       "person": {
         "email": "nathan@example.io"
       }
     },
     {
       "object": "user",
       "id": "5678",
       "name": "Natalie Berlin",
       "avatar_url": "https://example.jpeg",
       "type": "person",
       "person": {
         "email": "natalie@example.io"
       }
     }
     ]
     ```

4. **Code**
   - **Type:** n8n-nodes-base.code
   - **ID:** 330ecf72-cff0-4ada-9b04-b1c99bb0f4de

## Connections
- **When clicking "Execute Workflow"**
  - Main connection: Mock Slack (index 0)

- **Mock Slack**
  - Main connection: Mock Notion (index 0)

- **Mock Notion**
  - Main connection: Code (index 0)

## Settings
- **Execution Order:** v1

## Metadata
- **Version ID:** 81cabd2b-2854-4afb-b656-90a0cb77fa96
- **Workflow ID:** 3Brrdjs5aRHo57EX
- **Instance ID:** c5aabef739d71e3d0ceb8b6078a241aaf1b145fa71cbbe36ecfb2c8c3fd64f5f

----------------------------------------

## Workflow: Reference incoming data explicitly

### Nodes

1. **When clicking "Execute Workflow"**
   - **Type:** `n8n-nodes-base.manualTrigger`
   - **ID:** `0abbe7f6-f8a0-4f71-8229-f4fd1a3c2683`
   - **Type Version:** 1
   - **Position:** [620, 520]

2. **Mock data**
   - **Type:** `n8n-nodes-base.code`
   - **ID:** `e19f11cd-c868-4aca-b88e-04b4ee6f0187`
   - **Type Version:** 2
   - **Position:** [840, 520]
   - **Parameters:**
     ```javascript
     return [
       {
         "id": 0001,
         "personal_info": {
           "first_name": "Natalie",
           "surname": "Berlin"
         },
         "work_info": {
           "job_title": "Automation engineer"
         }
       },
       {
         "id": 0002,
         "personal_info": {
           "first_name": "Nathan",
           "surname": "Berlin"
         },
         "work_info": {
           "job_title": "Automation designer"
         }
       }
     ]
     ```

3. **Code**
   - **Type:** `n8n-nodes-base.code`
   - **ID:** `ef54d477-0596-441a-98e5-1ab005e9a268`
   - **Type Version:** 2
   - **Position:** [1060, 520]

### Connections

- **When clicking "Execute Workflow"** → [Mock data]
- **Mock data** → [Code]

### Workflow Settings
- **Execution Order:** `v1`
- **Version ID:** `4e3a0a21-c993-4851-848b-01bd5c090b6b`
- **Workflow ID:** `EipyYyqKKQm7siq4`

----------------------------------------

## Workflow Definition: Summarize Data and Prepare Slack Message

### Nodes

1. **Manual Trigger Node**
   - **Name**: When clicking "Execute Workflow"
   - **Type**: `n8n-nodes-base.manualTrigger`
   - **Type Version**: 1
   - **ID**: `5d4bd82f-24e9-484e-a17e-c5de889087d9`
   - **Position**: [860, 540]

2. **Mock Ideas Node**
   - **Name**: Mock Ideas
   - **Type**: `n8n-nodes-base.code`
   - **Type Version**: 2
   - **ID**: `fda17968-61a5-4c0b-ab83-adb4e0bbf7c5`
   - **Position**: [1080, 540]
   - **Parameters**:
     ```javascript
     return [
       {
         "id": "0001",
         "name": "Example feature 1",
         "url": "example.com",
         "property_tags": [],
         "property_type": ["Feature"],
         "property_votes": 2
       },
       {
         "id": "0002",
         "name": "Example feature 2",
         "url": "example.com",
         "property_type": ["Feature"],
         "property_votes": 3
       },
       {
         "id": "0003",
         "name": "Example feature 3",
         "url": "example.com",
         "property_type": ["Feature"],
         "property_votes": 1
       },
       {
         "id": "0004",
         "name": "Example bug 1",
         "url": "example.com",
         "property_type": ["Bug"],
         "property_votes": 0
       },
       {
         "id": "0005",
         "name": "Example idea 1",
         "url": "example.com",
         "property_type": ["Idea"],
         "property_votes": 4
       }
     ]
     ```

3. **Summarize Node**
   - **Name**: Summarize
   - **Type**: `n8n-nodes-base.code`
   - **Type Version**: 2
   - **ID**: `0d73c3df-300a-4397-8f53-fb0750dbf97f`
   - **Position**: [1300, 540]

### Connections

- **From Manual Trigger to Mock Ideas**:
  - Node: Mock Ideas
  - Type: main
  - Index: 0

- **From Mock Ideas to Summarize**:
  - Node: Summarize
  - Type: main
  - Index: 0

### Additional Information

- **Execution Order**: v1
- **Version ID**: `077fe5dc-2214-4149-9f1b-ef6342e45dec`
- **ID**: `5IoF8z4YUoSUpBUk`
- **Instance ID**: `c5aabef739d71e3d0ceb8b6078a241aaf1b145fa71cbbe36ecfb2c8c3fd64f5f`

----------------------------------------

# Dynamic Credentials Using Expressions

## Nodes

### n8n Form Trigger
- **Type:** n8n-nodes-base.formTrigger
- **Parameters:**
  - **Path:** `da4071f2-7550-4dae-aa48-8bced4291643`
  - **Form Title:** Test dynamic credentials
  - **Form Description:** This form is for testing an n8n workflow that demonstrates setting credentials with expressions.
  - **Form Fields:**
    - **Entry:** 
      - **Field Label:** Enter your NASA API key
      - **Required Field:** true
  - **Response Mode:** responseNode
- **ID:** `cc6f2b1e-0ed0-4d22-8a44-d7223ba283b4`
- **Position:** [560, 520]

### NASA
- **Type:** n8n-nodes-base.nasa
- **Parameters:**
  - **Additional Fields:** {}
- **Credentials:**
  - **NASA API:** 
    - **ID:** `QDDBOZOD6k3ijL5t`
    - **Name:** NASA account
- **ID:** `ef336bae-3d4f-419c-ab5c-b9f0de89f170`
- **Position:** [900, 520]

### Respond to Webhook
- **Type:** n8n-nodes-base.respondToWebhook
- **Parameters:**
  - **Respond With:** redirect
  - **Redirect URL:** `={{ $json.url }}`
  - **Options:** {}
- **ID:** `143bcdb6-aca0-4dd8-9204-9777271cd230`
- **Position:** [1220, 520]

## Connections
- **n8n Form Trigger** -> NASA
- **NASA** -> Respond to Webhook

## Credential Setup Instructions
1. Create a new NASA credential.
2. Hover over **API Key**.
3. Toggle **Expression** on.
4. In the **API Key** field, enter: 
   ```javascript
   {{ $json["Enter your NASA API key"] }}
   ```

## Workflow Execution Steps
1. Obtain an [API key from NASA](https://api.nasa.gov/).
2. Select **Execute workflow**.
3. Enter your key using the form.
4. The workflow runs and redirects you to the NASA picture of the day.

## Expression Reference
- The API key can be referenced using: 
   ```javascript
   $json["Enter your NASA API key"]
   ```

----------------------------------------

### Workflow Definition

```json
{
  "name": "Tutorial-workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -680,
        100
      ],
      "id": "ef14445c-2f5f-4c78-96c8-66732feb7a8f",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "donkiSolarFlare",
        "additionalFields": {
          "startDate": "={{ $today.minus(7, 'days') }}"
        }
      },
      "type": "n8n-nodes-base.nasa",
      "typeVersion": 1,
      "position": [
        -460,
        100
      ],
      "id": "52c58b93-c780-4aff-a216-d67b28195a45",
      "name": "NASA",
      "credentials": {
        "nasaApi": {
          "id": "sSVnxV9AcBmBOYn8",
          "name": "NASA account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2f469c8e-12b3-4ee5-95fc-ff81508d0b43",
              "leftValue": "={{ $json.classType }}",
              "rightValue": "C",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -240,
        100
      ],
      "id": "b54e3289-9ebb-451f-8bac-87edeeeced13",
      "name": "If"
    },
    {
      "parameters": {
        "resource": "request",
        "operation": "send",
        "binId": "1741914338605-0907339996192",
        "binContent": "=There was a solar flare of class {{$json[\"classType\"]}}",
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.postBin",
      "typeVersion": 1,
      "position": [
        -20,
        0
      ],
      "id": "a8b602b6-17b1-4274-8d33-73344b6bb8fb",
      "name": "PostBin(true)"
    },
    {
      "parameters": {
        "resource": "request",
        "operation": "send",
        "binId": "1741914338605-0907339996192",
        "binContent": "=There was a solar flare of class {{$json[\"classType\"]}}",
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.postBin",
      "typeVersion": 1,
      "position": [
        -20,
        200
      ],
      "id": "09c2c7a4-c229-430d-a5b0-8d7491515d9f",
      "name": "PostBin(false)"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "NASA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NASA": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "PostBin(true)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "PostBin(false)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "37de4877-e4f6-4b9a-b6f0-9b7e7aea0163"
}
```

### Configuration Instructions
1. Create a NASA account and credentials.
2. Create a bin with Postbin and enter the ID.

----------------------------------------

## Quickstart Workflow Nodes

### Nodes

1. **Customer Datastore**
   - **Type:** n8n-nodes-base.n8nTrainingCustomerDatastore
   - **Parameters:**
     - `operation`: getAllPeople
     - `returnAll`: true
   - **ID:** ed1fd9cd-cc4f-4e0e-ba73-9f842db382c3
   - **Position:** [540, 280]
   - **Type Version:** 1

2. **Note1**
   - **Type:** n8n-nodes-base.stickyNote
   - **Parameters:**
     - `content`: **Get fake sample data**
     - `height`: 300
     - `width`: 220
   - **ID:** 5ddf393f-62b8-4240-adf8-f9a8f539df4b
   - **Position:** [480, 180]
   - **Type Version:** 1

3. **Note2**
   - **Type:** n8n-nodes-base.stickyNote
   - **Parameters:**
     - `content`: **Extract data and prepare it for use in the next node**
     - `height`: 300
     - `width`: 220
   - **ID:** 6ad194ea-9821-40eb-ae2c-f50cc030300b
   - **Position:** [760, 180]
   - **Type Version:** 1

4. **When clicking "Test Workflow"**
   - **Type:** n8n-nodes-base.manualTrigger
   - **ID:** 5af4b83b-31b6-4c29-aa55-3449f3851e2a
   - **Position:** [300, 280]
   - **Type Version:** 1

5. **Edit Fields1**
   - **Type:** n8n-nodes-base.set
   - **Parameters:**
     - `assignments`: 
       - `customer_id`: 
         - **Type:** string
         - **Value:** ={{ $json.id }}
       - `customer_name`: 
         - **Type:** string
         - **Value:** ={{ $json.name }}
       - `customer_description`: 
         - **Type:** string
         - **Value:** ={{ $json.notes }}
     - `options`: {}
   - **ID:** 5dcd5776-5137-4f97-8b76-9f38e1d9ff9e
   - **Position:** [820, 280]
   - **Type Version:** 3.3

6. **Customer Messenger (n8n training)**
   - **Type:** n8n-nodes-base.n8nTrainingCustomerMessenger
   - **Parameters:**
     - `customerId`: ={{ $json.customer_id }}
     - `message`: =Hi {{ $json.customer_name }}. Your description is: {{ $json.customer_description }}
   - **ID:** a726dcfd-f491-440f-ad64-6ba17472352f
   - **Position:** [1040, 280]
   - **Type Version:** 1

### Connections

- **Customer Datastore**
  - Connects to:
    - Edit Fields1 (main, index 0)

- **When clicking "Test Workflow"**
  - Connects to:
    - Customer Datastore (main, index 0)

- **Edit Fields1**
  - Connects to:
    - Customer Messenger (n8n training) (main, index 0)

## Workflow Structure
- This workflow flows from the manual trigger to retrieving data from the Customer Datastore, transforming it with the Edit Fields1 node, and finally sending a message via the Customer Messenger.

----------------------------------------

## Core Concepts

n8n is a workflow automation tool that allows users to connect apps with APIs and manipulate data with minimal coding. It offers customizable workflows and the possibility to create custom nodes while ensuring privacy through self-hosting options.

## Node & Parameter Details

### Nodes
- n8n supports various integrations that allow connection between applications, enabling automation of tasks.
  
### API Documentation
Refer to the [API documentation](https://docs.n8n.io/api/) for endpoints, methods, and request/response formats.

## Configuration Instructions
For setup, n8n can be utilized via:
- npm
- Docker
- Cloud hosting

## Best Practices
- Self-hosting is recommended for better privacy and security.
- Utilize n8n's quickstart guides to get started efficiently.
  
## Workflow Patterns
Examples of workflows include:
- Creating an API endpoint
- AI agent chat
- Scraping and summarizing webpages with AI
- Pulling data from services without prebuilt integrations
- Joining different datasets
- Backing up workflows to GitHub
- Converting JSON to Excel

## Code Examples
For a JSON example of a workflow, refer to specific workflows outlined in the documentation.

- Workflow for creating an API endpoint: [Creating an API endpoint](https://n8n.io/workflows/1750-creating-an-api-endpoint/)
- Workflow for AI agent chat: [AI agent chat](https://n8n.io/workflows/1954-ai-agent-chat/) 

Refer to the n8n documentation for detailed code snippets and examples for each integration and workflow.

----------------------------------------

# n8n v1.0 Migration Guide

## New Features

### Python Support in the Code Node
- Python can be selected in the [Code node](https://docs.n8n.io/code/code-node/).
- Using many Python modules from [Pyodide](https://pyodide.org/en/stable/usage/packages-in-pyodide.html#packages-in-pyodide) is supported.
- Python is not available in Code nodes added to a workflow before v1.0.

### Execution Order
- Multi-branch workflows now follow a depth-first execution order.
- Each branch executes completely before starting the next one, based on the position on the canvas.
- Nodes are executed only when they receive data.

## Deprecations

### MySQL and MariaDB
- Support for MySQL and MariaDB as storage backends has been removed.
- Migration to PostgreSQL is recommended for better compatibility.

### EXECUTIONS_PROCESS and "own" mode
- The `EXECUTIONS_PROCESS` environment variable and "own" mode are deprecated. 
- The default has changed to `main`, which improves execution speed.

## Breaking Changes

### Docker

#### Permissions Change
- The n8n process runs as user `node` instead of `root` in Docker deployments.
- To update permissions, execute:
  ```bash
  docker run --rm -it --user root -v ~/.n8n:/home/node/.n8n --entrypoint chown n8nio/base:16 -R node:node /home/node/.n8n
  ```

#### Image Removal
- The Debian and RHEL images have been removed. Update your images accordingly.

#### Entrypoint Change
- No need to specify the n8n command in the entrypoint anymore.
- Change from `n8n worker --concurrency=5` to `worker --concurrency=5`.

### Mandatory Owner Account
- User Management is now mandatory, removing support for BasicAuth and External JWT.

### Directory for Installing Custom Nodes
- Custom nodes must be installed in `~/.n8n/custom` instead of the global `node_modules`.

### WebSockets
- Use the `N8N_PUSH_BACKEND` environment variable to configure methods for pushing updates; `websocket` is the default.

### Execution Data Retention
- successful, failed, and manual workflow executions are now saved by default.
- Configuration options: 
  - `EXECUTIONS_DATA_PRUNE` is enabled by default.
  - `EXECUTIONS_DATA_PRUNE_MAX_COUNT` is set to 10,000.

### Remove Node 16 Support
- n8n now requires Node 18.17.0 or above.

## Updating to n8n 1.0
1. Create a full backup of n8n.
2. Update to the latest n8n 0.x release before updating to n8n 1.x.
3. Review deprecation and breaking changes to assess their impact.
4. Update to n8n 1.0:
   - Before July 24, 2023: Pull `next` Docker image.
   - After July 24, 2023: Pull `latest` Docker image.
5. If issues occur, redeploy the previous version and restore the backup.

----------------------------------------

# n8n Advanced AI Documentation

## Feature Availability
This feature is available on Cloud and self-hosted n8n, in version 1.19.4 and above.

## Node Types
This feature uses **Cluster nodes**: groups of **root** and **sub** nodes that work together. 
- **Cluster nodes** are node groups that work together to provide functionality in an n8n workflow. 
- Use a **root node** and one or more **sub-nodes** to extend the functionality of the node.

## Chat Trigger
Use the **n8n Chat Trigger** to trigger a workflow based on chat interactions.

## Chatbot Widget
n8n provides a chatbot widget that can be used as a frontend for AI-powered chat workflows. Refer to the [@n8n/chat npm page](https://www.npmjs.com/package/@n8n/chat) for usage information.

----------------------------------------

# Light Evaluations

## Overview
Light evaluations allow you to test your workflow with a few examples, reviewing workflow outputs without the need for formal metrics. Outputs are written back to a Google Sheets dataset for comparison.

## Prerequisites
- Google Sheets must be configured as a credential in n8n.

## Steps to Perform Light Evaluations

### 1. Create a Dataset
- Create a Google Sheet with columns for:
  - Workflow input
  - (Optional) Expected output
  - Actual output (leave blank for evaluation)

### 2. Wire the Dataset to Your Workflow
#### Insert an Evaluation Trigger
- Use the [evaluation trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.evaluationtrigger/) to pull in your dataset.
- Clicking 'Evaluate all' runs the workflow for each dataset row.

To run it once:
- Set 'Max rows to process' to 1
- Click 'Execute node' on the trigger

#### Connect the Trigger to the Workflow
- Ensure the evaluation trigger outputs are used in the workflow, particularly the input columns.

### 3. Write Outputs Back to Dataset
- Insert the 'Set outputs' action of the [evaluation node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.evaluation/) in your workflow.
- Wire it up after tracking workflow outputs and map outputs to the correct dataset columns.

### 4. Run Evaluation
- Click on the **Execute workflow** button next to the evaluation trigger. The workflow will run for each row.
- Review outputs in the Google Sheet and check execution details in the workflow's 'executions' tab.

## Considerations
Once you have a larger dataset, consider transitioning to [metric-based evaluations](https://docs.n8n.io/advanced-ai/evaluations/metric-based-evaluations/) for a numerical performance analysis.

----------------------------------------

# Metric-based evaluations

Metric-based evaluation allows you to test workflows against a larger set of examples after deployment, especially covering edge cases. This feature calculates one or more scores for each test run and allows for performance comparisons across runs using metrics that are integrated into a dataset stored in Google Sheets.

## How it works

### Requirements
- Google Sheets must be configured as a credential in n8n.

### Steps

1. **Set up light evaluation**
   - Create a dataset and connect it to your workflow, writing outputs back to the dataset.

2. **Calculate metrics**
   - Metrics score your workflow outputs compared to reference outputs. Metrics could be AI-driven or simple code calculations, always returning numerical values.
   - Add logic in your workflow to calculate metrics after producing outputs.

   **Example metrics:**
   - Correctness: Checks if the output's meaning matches a reference.
   - Categorization: Verifies if the output exactly matches the expected result.
   - Helpfulness: Assesses whether the output answers the query.
   - String similarity: Measures resemblance to a reference output, character-by-character.
   - Tool calling: Confirms if the appropriate tool was utilized.
   - RAG document relevance: Evaluates the relevance of retrieved documents from a vector database.
   - RAG answer groundedness: Checks if the answer is grounded in retrieved documents.

   **Performance note:** Reducing latency and costs can be achieved by executing metrics only during evaluations.

3. **Write metrics back to evaluation**
   - Add an evaluation node with the 'Set metrics' operation to extract the calculated metrics.

4. **Run evaluation and view results**
   - Navigate to the **Evaluations** tab in your workflow and initiate the evaluation. The summary and score for each metric will be displayed upon completion, allowing you to investigate individual test results.

----------------------------------------

# Overview

Evaluations are not supported for n8n instances running in queue mode.

## What are Evaluations?

Evaluations are a technique for ensuring that your AI workflow is reliable. The process involves running a test dataset through your workflow, which contains multiple test cases with sample inputs and expected outputs.

### Benefits of Evaluations

- Test workflow performance on edge cases.
- Enable confident changes without worsening existing functionality.
- Allow performance comparison across different models or prompts.

## Why is Evaluation Needed?

AI models differ from traditional code; they are non-deterministic "black boxes" and require measurement of outputs through data input and output observation to build reliability and confidence.

## Two Types of Evaluation

### Light Evaluation (Pre-Deployment)

- Involves generating a handful of examples.
- Allows for visual comparison of workflow quality.
- Focuses on iterating to a proof of concept without formal metrics.

### Metric-Based Evaluation (Post-Deployment)

- Utilizes a larger, representative dataset from production executions.
- Includes adding inputs that caused bugs to the dataset for regression testing.
- Rely on evaluation metrics to measure output quality.

### Comparison of Evaluation Types

|  | Light Evaluation (Pre-Deployment) | Metric-Based Evaluation (Post-Deployment) |
| --- | --- | --- |
| **Performance Improvements with Each Iteration** | Large | Small |
| **Dataset Size** | Small | Large |
| **Dataset Sources** | Hand-generated, AI-generated, Other | Production executions, AI-generated, Other |
| **Actual Outputs** | Required | Required |
| **Expected Outputs** | Optional | Required (usually) |
| **Evaluation Metric** | Optional | Required | 

## Learn More

- [Light Evaluations](https://docs.n8n.io/advanced-ai/evaluations/light-evaluations/)
- [Metric-Based Evaluations](https://docs.n8n.io/advanced-ai/evaluations/metric-based-evaluations/)
- [Tips and Common Issues](https://docs.n8n.io/advanced-ai/evaluations/tips-and-common-issues/)

----------------------------------------

# Tips and Common Issues

## Combining Multiple Triggers

To merge multiple triggers in a workflow:

1. **Get the data format of the other trigger**:
   - Execute the other trigger.
   - Open it and navigate to the JSON view of its output pane.
   - Click the **copy** button on the right.

2. **Re-shape the evaluation trigger data to match**:
   - Insert an [Edit Fields (Set) node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/) after the evaluation trigger.
   - Change its mode to **JSON**.
   - Paste your data into the 'JSON' field, removing the `[` and `]`.
   - Switch the field type to **Expression** and map in the data from the trigger.
   - For strings, replace the entire value (including quotes) and add `.toJsonString()`.

3. **Merge the branches using a 'No-op' node**:
   - Insert a [No-op node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.noop/) and wire both the other trigger and the Set node to it.

4. **Reference the 'No-op' node outputs in the rest of the workflow**.

## Avoiding Evaluation Breaking the Chat

After adding an evaluation node with the ['set outputs' operation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.evaluation/#set-outputs), you may need to add an extra branch from your agent to ensure compatibility with n8n's internal chat. Lower branches execute last; therefore, attach a no-op node to this branch.

## Accessing Tool Data When Calculating Metrics

Enable the **Return intermediate steps** option in the agent to add an extra output field called `intermediateSteps` for later reference in nodes.

## Multiple Evaluations in the Same Workflow

Only one evaluation is allowed per workflow, but you can use [sub-workflows](https://docs.n8n.io/flow-logic/subworkflows/) to test different parts.

## Dealing with Inconsistent Results

To smooth variations in metrics across evaluation runs, duplicate rows in your dataset so that each row appears multiple times, effectively allowing each input to run multiple times.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

## Key Features

This workflow uses:

- **Chat Trigger**: Starts your workflow and responds to user chat interactions. Provides a customizable chat interface.
- **Switch Node**: Directs queries to either an agent or chain based on user input. If "agent" is specified, it sends to the agent; if "chain" is specified, it sends to the chain.
- **Agent**: Interacts with other workflow components and makes decisions about which tools to use.
- **Basic LLM Chain**: Supports chatting with a connected LLM but lacks support for memory or tools.

## Using the Example

To load the template into your n8n instance:

1. Download the workflow JSON file.
2. Open a new workflow in your n8n instance.
3. Copy in the JSON, or select **Workflow menu** > **Import from file...**. 

## Workflow File

[View workflow file](https://docs.n8n.io/_workflows/advanced-ai/examples/agents_vs_chains.json)

----------------------------------------

# Call an API to Fetch Data

Use n8n to bring data from any API to your AI. This workflow utilizes:

- **Chat Trigger**: Start the workflow and respond to user chat interactions, providing a customizable chat interface.
- **Agent**: Interacts with workflow components and makes decisions about which tools to use.
- **Call n8n Workflow Tool**: Integrates n8n workflows as custom tools, allowing AI to access information beyond its built-in dataset.
- **Basic LLM Chain** with:
  - **Auto-fixing Output Parser**: Reads and refines the user's query.
  - **Structured Output Parser**: Sets parameters for the API call based on user input.

## Using the Example

To load the template into your n8n instance:

1. Download the workflow JSON file.
2. Open a new workflow in your n8n instance.
3. Copy in the JSON, or select **Workflow menu** > **Import from file...**.

## Workflow File

[View Workflow File](https://docs.n8n.io/_workflows/advanced-ai/examples/let_your_ai_call_an_api.json)

----------------------------------------

# Chat with a Google Sheet using AI

## Workflow Components

- **Chat Trigger**: Initiates the workflow and responds to user chat interactions. Provides a customizable chat interface.
- **Agent**: Central component of the AI workflow. Interacts with other workflow components and decides which tools to use.
- **Call n8n Workflow Tool**: Integrates n8n workflows as custom tools for the AI, allowing access to external data beyond the built-in dataset.

## Configuration Instructions

To load the template into your n8n instance:

1. Download the workflow JSON file.
2. Open a new workflow in your n8n instance.
3. Copy the JSON into the workflow or select **Workflow menu** > **Import from file...**.

## Example Workflow File

[View workflow file](https://docs.n8n.io/_workflows/advanced-ai/examples/chat_with_google_sheets_docs_version.json)

----------------------------------------

# Set a Human Fallback for AI Workflows

This workflow answers user queries using the GPT-4 model and sends a Slack message for human help if it cannot answer. The user is prompted for an email address.

## Workflow Components

- **Chat Trigger**: Provides a customizable chat interface to start the workflow and respond to user interactions.
- **Agent**: Central AI workflow component that interacts with other components and makes decisions on tools to use.
- **Call n8n Workflow Tool**: Allows integration of n8n workflows as custom tools, enabling the AI to access information beyond its dataset.

## Instructions for Use

To load the template into your n8n instance:

1. Download the workflow JSON file.
2. Open a new workflow in your n8n instance.
3. Copy in the JSON or select **Workflow menu** > **Import from file...**.

## Example Workflow File
[Download Workflow JSON](https://docs.n8n.io/_workflows/advanced-ai/examples/ask_a_human.json)

----------------------------------------

# Advanced AI Examples and Concepts

## Core Concepts

- **Agents and Chains**: Understand the differences between agents and chains in AI. 
- **Tools**: Utilize n8n workflows as custom tools to enhance AI capabilities.
- **Vector Databases**: Learn about vector databases, embeddings, and retrievers.
- **Memory**: Explore the concept of memory in AI.

## Node & Parameter Details

- **$fromAI()**: A function to let AI specify tool parameters.

## API Documentation

### Endpoints
- Call APIs to fetch data or access tools within n8n workflows.

## Configuration Instructions

- Set up integrations with various tools like Google Sheets or APIs for comprehensive AI workflows.
- Implement a human fallback mechanism in AI workflows.

## Workflow Patterns

- Create workflows that integrate various AI components, such as combining data from tools and leveraging vector databases.

## Code Examples

- Example integrations:
  - **Google Sheets**: Chat with Google Sheets to fetch and manipulate data.
  - **API Handling**: Set up an API workflow tool to utilize external API data.

## Best Practices

- Utilize community-contributed AI templates available on the n8n website for rapid deployment and efficient workflow creation. 
- Explore existing templates for specific use cases, such as:
  - Company enrichment using OpenAI GPT-3.
  - Scraping webpages with an AI agent.

## Additional Resources
- Browse all AI templates on the n8n website for further examples and inspirations.

----------------------------------------

# Core Concepts

**Agent**: A decision-making component in AI that utilizes a language model to select actions based on user queries. Unlike a chain that follows a predetermined sequence, an agent adapts its behavior based on specific prompts and interacts with other agents and tools.

# Node & Parameter Details

- **Agent Node**: n8n includes one Agent node which can operate as different types of agents based on user-defined settings. 

# Workflow Patterns

When a workflow with an agent is executed, the agent operates multiple times to perform tasks such as:
1. Initial setup
2. Calling a tool
3. Evaluating the tool's response
4. Responding to the user

Refer to the Agent node documentation for specific details on available agent types.

----------------------------------------

# Chains in n8n

Chains bring together different components of AI to create a cohesive system by setting up a sequence of calls between components, including models and memory (though n8n chains can't use memory).

## Chain Nodes in n8n

n8n provides three chain nodes:

- **Basic LLM Chain**: Use to interact with an LLM without any additional components.
  
- **Question and Answer Chain**: Can connect to a vector store using a retriever or to an n8n workflow using the Workflow Retriever node. Use this if you want to create a workflow that supports asking questions about specific documents.
  
- **Summarization Chain**: Takes an input and returns a summary.

## Important Notes

- Chains in n8n do not support memory, meaning they cannot remember previous user queries. For workflows that require memory, use an agent to support ongoing conversations.

----------------------------------------

# Memory in AI

Memory in AI chat services allows for an ongoing conversation by keeping a history of previous messages.

## AI Memory in n8n

To integrate memory into your AI workflow, use:

- **Simple Memory**: A node that stores a customizable length of chat history for the current session.
- **Memory Services Nodes**: Available nodes include:
  - **Motorhead**
  - **Redis Chat Memory**
  - **Postgres Chat Memory**
  - **Xata**
  - **Zep**

### Chat Memory Manager Node

The **Chat Memory Manager** node is useful for:

- Advanced memory management when direct memory node integration isn't possible.
- Performing complex memory management tasks beyond standard memory nodes.
- Injecting messages into the AI that resemble user messages for additional context.

----------------------------------------

# AI Tools in n8n

## Definition of Tools in AI

In AI, "tools" refer to add-ons that enable an AI to access additional context or resources. They function as interfaces allowing an AI agent to interact with the environment.

## n8n Tool Sub-Nodes

n8n provides various tool sub-nodes that can be connected to an AI agent. Notable tools include:

- **Call n8n Workflow Tool**: Load any n8n workflow as a tool.
- **Custom Code Tool**: Write code that your agent can execute.
- **HTTP Request Tool**: Perform API calls to fetch website data.

## Examples of Using the Call n8n Workflow Tool

- [Chat with Google Sheets](https://docs.n8n.io/advanced-ai/examples/data-google-sheets/)
- [Call an API to fetch data](https://docs.n8n.io/advanced-ai/examples/api-workflow-tool/)
- [Set up a human fallback](https://docs.n8n.io/advanced-ai/examples/human-fallback/)

## Dynamic Parameter Specification

Learn how to let AI dynamically specify parameters for tools with the `$fromAI()` function [here](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

----------------------------------------

# Core Concepts

### Vector Database
A vector database stores data as high-dimensional vectors, which are mathematical representations of features or attributes. This enables fast and accurate similarity searches based on semantic and contextual meaning.

## A Simplified Example
Vectors can represent features of sentences. For instance:

| Sentence | Vector (array of dimensions) |
| --- | --- |
| n8n is a source-available automation tool that you can self-host | \[0.1, 0.2, 0.3\] |
| Zapier is an automation tool | \[0.1\] |
| Make is an automation tool | \[0.1\] |
| Confluence is a wiki tool that you can self-host | \[0.3\] |

## Demonstrating the Power of Similarity Search
Qdrant provides [vector search demos](https://qdrant.tech/demo/), including a food discovery demo that matches pictures based on visual similarities. 

## Essential Tools for Vector Databases
- **Document Loaders and Text Splitters**: Document loaders pull in documents and prepare them for embedding. Text splitters break documents into chunks for processing.
- **Embeddings**: Convert data (text, images, etc.) into vectors and back into raw data. Note that n8n only supports text embeddings.
- **Retrievers**: Fetch documents from vector databases and require pairing with an embedding to translate vectors back into data.

----------------------------------------

# Let AI Specify the Tool Parameters

When configuring tools connected to the Tools Agent, many parameters can be filled in by the AI model using the context from the task and information from other connected tools.

## Let the Model Fill in the Parameter

Each appropriate parameter field in the tool's editing dialog has an extra button to activate the AI Agent to fill in the expression automatically. If desired, users can revert to user-defined values by clicking 'X'.

**Warning:** Activating this feature will overwrite any manual definition.

## Use the `$fromAI()` Function

The `$fromAI()` function utilizes AI to dynamically fill in parameters for tools connected to the AI Agent node. It is not applicable for the Code tool or other non-tool cluster sub-nodes.

**Function Call:**
```javascript
{{ $fromAI('key') }}
```

The `key` parameter and additional arguments serve as hints for the AI model to populate the relevant data. For example, using `key: email`, the AI model looks for an email address in its context.

### Parameters

The `$fromAI()` function accepts the following parameters:

| Parameter      | Type   | Required? | Description                                                                                         |
|----------------|--------|-----------|-----------------------------------------------------------------------------------------------------|
| `key`          | string | ✅         | A string representing the key or name of the argument (1-64 characters, alphanumeric, underscores, hyphens). |
| `description`  | string | ❌         | A string describing the argument.                                                                    |
| `type`         | string | ❌         | A string specifying the data type (string, number, boolean, json; defaults to string).              |
| `defaultValue` | any    | ❌         | The default value to use for the argument.                                                          |

### Examples

1. To dynamically populate a field with a name:
   ```javascript
   $fromAI("name", "The commenter's name", "string", "Jane Doe")
   ```

2. Simplified usage without optional parameters:
   ```javascript
   $fromAI("name")
   ```

3. To populate the number of items in stock:
   ```javascript
   $fromAI("numItemsInStock", "Number of items in stock", "number", 5)
   ```

4. To pre-fix a dynamically filled subject for an email:
   ```javascript
   Generated by AI: {{ $fromAI("subject") }}
   ```

### Templates

The `$fromAI()` function can be seen in action in several templates, including:

- Angie, Personal AI Assistant with Telegram Voice and Text
- Automate Customer Support Issue Resolution using AI Text Classifier
- Scale Deal Flow with a Pitch Deck AI Vision, Chatbot and QDrant Vector Store

----------------------------------------

## Populate a Pinecone Vector Database from a Website

Use n8n to scrape a website, load the data into Pinecone, then query it using a chat workflow. This workflow uses the following nodes:

- **HTTP node**: Fetches website data.  
  [HTTP Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)

- **HTML node**: Simplifies the data by extracting the main content from the page.  
  [HTML Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)

- **Pinecone Vector Store node**: Transforms the data into vectors and stores it in Pinecone.  
  [Pinecone Vector Store Node Documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone/)

- **Embeddings OpenAI**: Transforms data into vector format.  
  [Embeddings OpenAI Documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsopenai/)

- **Chat Trigger**: Initiates a chat workflow.  
  [Chat Trigger Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/)

- **Question and Answer Chain**: Queries the vector database.  
  [Question and Answer Chain Documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/)

### Using the Example

To load the template into your n8n instance:

1. Download the workflow JSON file.
2. Open a new workflow in your n8n instance.
3. Copy in the JSON, or select **Workflow menu** > **Import from file...**.

### View Workflow File
[Download Workflow JSON](https://docs.n8n.io/_workflows/advanced-ai/examples/populate_a_pinecone_vector_database_from_a_website.json)

----------------------------------------

# Build an AI chat agent with n8n

## Requirements
- **n8n**: Recommended to use the n8n cloud service. For self-hosted, refer to installation pages.
- **Credentials for a chat model**: This tutorial uses OpenAI, but alternatives include DeepSeek, Google Gemini, Groq, Azure, etc.

## Core AI Concepts in n8n
- **AI Agent**: Utilizes Large Language Models (LLMs) to perform goal-oriented tasks. Capable of using tools, processing outputs, and making decisions.
- **Differentiation**:
  - **LLM**: Text generation, single-step workflows.
  - **AI Agent**: Goal-oriented task completion, multi-step workflows.

## Workflow Steps

### 1. Create a new workflow
- Open n8n and create an empty workflow or select **Add first step**.

### 2. Add a trigger node
1. Select **Add first step** or press `Tab`.
2. Search for **Chat Trigger** and add it to the canvas.

### 3. Add an AI Agent Node
1. Select the **Add node** connector on the trigger node.
2. Choose the **AI Agent** node.

### 4. Configure the node
1. Add a chat model by clicking the plus button under **Chat Model** on the **AI Agent** node.
2. Select **OpenAI Chat Model** from the available options.

### 5. Add credentials (if needed)
1. Click on 'Select credential' to add a new credential.
2. Input your OpenAI API key.

### 6. Test the node
1. Click on the 'Chat' button to open a local chat window.
2. Type a message and press `Enter` to see responses.

### 7. Change the prompt
1. Open the **AI Agent** node and add a **System message**.
2. Modify the system prompt as needed.

### 8. Adding persistence
1. Add memory to the **AI Agent** node to retain context between messages.
2. Select "Simple Memory" for basic usage.

### 9. Save the workflow
1. Click on the "Save" button to preserve your workflow changes.

## Best Practices
- Keep API credentials secure and private.
- Utilize the log feature in AI Agent for debugging and observing inputs/outputs.

## Conclusion
You have learned to build a basic AI workflow using an **AI Agent**, configured chat models, and implemented memory for continuity in conversations.

----------------------------------------

# LangChain Learning Resources

## Core Concepts
- **LangChain**: A framework for developing applications powered by language models.

## Documentation Links
- [LangChain Documentation](https://docs.langchain.com/docs/)
- [LangChain Python Documentation](https://python.langchain.com/docs/get_started/introduction)
- [LangChain JavaScript Documentation](https://js.langchain.com/docs/get_started/introduction)

## Code Examples
- Access [LangChain Code Templates](https://github.com/langchain-ai/langchain/tree/master/cookbook) (Python only) for use cases and patterns.

## API Documentation
- Please refer to the official LangChain documentation for API details, methods, and usage patterns.

## Configuration Instructions
- For setup and initial steps, utilize the quickstart guides provided in the LangChain Python and JavaScript documentation.

## Best Practices
- Familiarize yourself with terminology and concepts provided by resources like [What Product People Need To Know About LangChain](https://www.commandbar.com/blog/langchain-guide).

## Video Tutorials
- Explore a [YouTube series by Greg Kamradt](https://youtu.be/_v_fgW2SkkQ?si=8Z2tfAoXnN3lXU9s) for practical coding examples and explanations on LangChain.

## Community and Support
- Join discussions on LangChain in the [Discord community](https://discord.gg/bAt54txhHg) for project sharing and idea exchange.

----------------------------------------

# LangChain Concepts in n8n

This documentation covers how LangChain concepts and features map to n8n nodes.

## n8n Implementation of LangChain

n8n implements LangChain JS, allowing you to use n8n nodes in workflows that interact with LangChain.

### Trigger Nodes

- **Chat Trigger**: [Chat Trigger Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/)

### Cluster Nodes

Cluster nodes are groups of nodes that work together in an n8n workflow.

#### Root Nodes

- **Basic LLM Chain**: [Basic LLM Chain Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)
- **Retrieval Q&A Chain**: [Retrieval Q&A Chain Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/)
- **Summarization Chain**: [Summarization Chain Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainsummarization/)
- **Sentiment Analysis**: [Sentiment Analysis Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.sentimentanalysis/)
- **Text Classifier**: [Text Classifier Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier/)

#### Agents

- **Agent**: [Agent Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)

#### Vector Stores

- **Simple Vector Store**: [Simple Vector Store Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/)
- **PGVector Vector Store**: [PGVector Vector Store Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepgvector/)
- **Pinecone Vector Store**: [Pinecone Vector Store Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone/)
- **Qdrant Vector Store**: [Qdrant Vector Store Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant/)
- **Supabase Vector Store**: [Supabase Vector Store Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase/)
- **Zep Vector Store**: [Zep Vector Store Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorezep/)

#### Miscellaneous Utility Nodes

- **LangChain Code**: [LangChain Code Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.code/)

### Sub-Nodes

#### Document Loaders

- **Default Document Loader**: [Default Document Loader Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.documentdefaultdataloader/)
- **GitHub Document Loader**: [GitHub Document Loader Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.documentgithubloader/)

#### Language Models (LLMs)

- **Anthropic Chat Model**: [Anthropic Chat Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatanthropic/)
- **AWS Bedrock Chat Model**: [AWS Bedrock Chat Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatawsbedrock/)
- **Cohere Model**: [Cohere Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmcohere/)
- **Hugging Face Inference Model**: [Hugging Face Inference Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmopenhuggingfaceinference/)
- **Mistral Cloud Chat Model**: [Mistral Cloud Chat Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatmistralcloud/)
- **Ollama Chat Model**: [Ollama Chat Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/)
- **Ollama Model**: [Ollama Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmollama/)
- **OpenAI Chat Model**: [OpenAI Chat Model Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatopenai/)

#### Memory

- **Motorhead**: [Motorhead Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymotorhead/)
- **Redis Chat Memory**: [Redis Chat Memory Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memoryredischat/)
- **Postgres Chat Memory**: [Postgres Chat Memory Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorypostgreschat/)
- **Simple Memory**: [Simple Memory Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorybufferwindow/)
- **Xata**: [Xata Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memoryxata/)
- **Zep**: [Zep Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memoryzep/)

#### Output Parsers

- **Auto-fixing Output Parser**: [Auto-fixing Output Parser Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserautofixing/)
- **Item List Output Parser**: [Item List Output Parser Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparseritemlist/)
- **Structured Output Parser**: [Structured Output Parser Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserstructured/)

#### Retrievers

- **Contextual Compression Retriever**: [Contextual Compression Retriever Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.retrievercontextualcompression/)
- **MultiQuery Retriever**: [MultiQuery Retriever Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.retrievermultiquery/)
- **Vector Store Retriever**: [Vector Store Retriever Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.retrievervectorstore/)
- **Workflow Retriever**: [Workflow Retriever Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.retrieverworkflow/)

#### Text Splitters

- **Character Text Splitter**: [Character Text Splitter Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.textsplittercharactertextsplitter/)
- **Recursive Character Text Splitter**: [Recursive Character Text Splitter Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter/)
- **Token Splitter**: [Token Splitter Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.textsplittertokensplitter/)

#### Tools

- **Calculator**: [Calculator Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolcalculator/)
- **Code Tool**: [Code Tool Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.toolcode/)
- **SerpAPI**: [SerpAPI Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.toolserpapi/)
- **Think Tool**: [Think Tool Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.toolthink/)
- **Vector Store Tool**: [Vector Store Tool Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.toolvectorstore/)
- **Wikipedia**: [Wikipedia Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.toolwikipedia/)
- **Wolfram|Alpha**: [Wolfram|Alpha Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.toolwolframalpha/)
- **Workflow Tool**: [Workflow Tool Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.toolworkflow/)

#### Embeddings

- **Embeddings AWS Bedrock**: [Embeddings AWS Bedrock Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.embeddingsawsbedrock/)
- **Embeddings Cohere**: [Embeddings Cohere Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.embeddingscohere/)
- **Embeddings Google PaLM**: [Embeddings Google PaLM Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.embeddingsgooglepalm/)
- **Embeddings Hugging Face Inference**: [Embeddings Hugging Face Inference Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.embeddingshuggingfaceinference/)
- **Embeddings Mistral Cloud**: [Embeddings Mistral Cloud Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.embeddingsmistralcloud/)
- **Embeddings Ollama**: [Embeddings Ollama Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.embeddingsollama/)
- **Embeddings OpenAI**: [Embeddings OpenAI Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes.langchain.embeddingsopenai/) 

### Additional References
- Learn more about [chaining in LangChain](https://js.langchain.com/docs/concepts/lcel).
- Learn more about [Agents in LangChain](https://js.langchain.com/docs/concepts/agents).
- Learn more about [Vector stores in LangChain](https://js.langchain.com/docs/concepts/vectorstores/).
- Learn more about [Document loaders in LangChain](https://js.langchain.com/docs/concepts/document_loaders).
- Learn more about [Language models in LangChain](https://js.langchain.com/docs/concepts/chat_models).
- Learn more about [Memory in LangChain](https://langchain-ai.github.io/langgraphjs/concepts/memory/).
- Learn more about [Output parsers in LangChain](https://js.langchain.com/docs/concepts/output_parsers/).
- Learn more about [Text embeddings in LangChain](https://js.langchain.com/docs/concepts/embedding_models/).

----------------------------------------

## Connect your n8n instance to LangSmith

1. Log in to LangSmith and get your API key.
2. Set the LangSmith environment variables:

| Variable                  | Value                                |
|--------------------------|--------------------------------------|
| LANGCHAIN_ENDPOINT       | `"https://api.smith.langchain.com"` |
| LANGCHAIN_TRACING_V2     | `true`                               |
| LANGCHAIN_API_KEY        | Set this to your API key            |

Set the variables so that they're available globally in the environment where you host your n8n instance. These aren't n8n environment variables, so don't try to set them using the n8n configuration file.

3. Restart n8n.

----------------------------------------

# LangChain in n8n

n8n provides a collection of nodes that implement LangChain's functionality. The LangChain nodes are configurable, allowing the selection of preferred agent, LLM, memory, and more. Users can connect any n8n node alongside these nodes, enabling integration with various data sources and services.

## Configuration Instructions

### Nodes and Parameters

- **LangChain Nodes**: Configurable nodes that allow integration with various AI capabilities.

## Additional Resources

- **[LangChain concepts and features in n8n](https://docs.n8n.io/advanced-ai/langchain/langchain-n8n/)**: Overview of how n8n integrates and represents LangChain concepts and features.

## Best Practices

- Familiarity with AI and LangChain concepts is assumed. It is recommended to explore related learning resources for better integration and functionality use.

----------------------------------------

# RAG in n8n

## Core Concepts

### Retrieval-Augmented Generation (RAG)
Retrieval-Augmented Generation (RAG) is a technique that enhances AI responses by combining language models with external data sources, retrieving relevant documents to ground responses in up-to-date knowledge.

### Vector Store
A vector store is a database designed to store and search high-dimensional vectors (numerical representations of various data types). It processes documents by splitting them into chunks and converting each chunk into vectors using an embedding model. Queries to the vector store are performed using similarity searches based on semantic meaning.

## How to Use RAG in n8n

### Start with a RAG Template
Use the [RAG Starter Template](https://n8n.io/workflows/5010-rag-starter-template-using-simple-vector-stores-form-trigger-and-openai) which includes workflows for uploading files and querying them.

### Inserting Data into Your Vector Store
1. Add the nodes needed to fetch your source data.
2. Insert a **Vector Store** node (e.g., the [Simple Vector Store](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/)) and choose the **Insert Documents** operation.
3. Select an **embedding model** for text-to-vector conversion.
4. Add a [Default Data Loader](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.documentdefaultdataloader/) node to split content into chunks with options for chunking strategy:
   - **Character Text Splitter**: splits by character length.
   - **Recursive Character Text Splitter**: recursively splits by Markdown, HTML, code blocks, or simple characters (recommended).
   - **Token Text Splitter**: splits by token count.
5. (Optional) Add **metadata** to each chunk for context enhancement.

### Querying Your Data
Querying can be performed in two ways: through an agent or directly via a node.

#### Using Agents
1. Add an [agent](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/) to your workflow.
2. Add the vector store as a **tool** with a description:
   - Set the **limit** for returned chunks.
   - Enable **Include Metadata** for extra context.
3. Add the same **embedding model** utilized when inserting data.

#### Using the Node Directly
1. Add your vector store node to the canvas and select the **Get Many** operation.
2. Enter a query or prompt:
   - Set a **limit** for returned chunks.
   - Enable **Include Metadata** if needed.

## FAQs

### How do I choose the right embedding model?
Smaller models (e.g., `text-embedding-ada-002`) are quicker and cheaper for general-purpose tasks, while larger models (e.g., `text-embedding-3-large`) are better for complex topics and accuracy.

### What is the best text splitting for my use case?
- Small chunks (200 to 500 tokens) offer fine-grained retrieval.
- Use chunk overlapping strategies to maintain context (Markdown or Code Block splitting recommended).

----------------------------------------

# n8n public REST API

## Overview

Using n8n's public API, you can programmatically perform many tasks available in the GUI. This section covers:

- **Authentication**
- **Pagination** of results
- **API Playground** usage (self-hosted n8n only)
- **Endpoint Reference**

## n8n API Node

n8n provides an [n8n API node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.n8n/) to access the API in workflows.

## Authentication

Refer to the [authentication documentation](https://docs.n8n.io/api/authentication/) for details on how to authenticate with the n8n API.

## Pagination

For information on paginating results, see the [pagination documentation](https://docs.n8n.io/api/pagination/).

## API Playground

The built-in API playground allows you to explore the API interactively (available only in self-hosted instances). Refer to the [API playground guide](https://docs.n8n.io/api/using-api-playground/) for more information.

## Endpoint Reference

Detailed API endpoint information can be found in the [endpoint reference documentation](https://docs.n8n.io/api/api-reference/). 

## Best Practices

Consider setting up a test workflow or a test n8n instance if you're exploring the API to prevent accidental changes to live data.

----------------------------------------

# n8n Public API (1.1.1)

## User Operations
### Retrieve all users
**Endpoint:** `GET /users`  
**Authorization:** ApiKeyAuth  
**Query Parameters:**  
| Parameter  | Description |
|------------|-------------|
| limit      | number <= 250 (Default: 100) - Maximum items to return. |
| cursor     | string - For pagination. |
| includeRole| boolean (Default: false) - Include user role. |
| projectId  | string - Filter by project ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  

### Create multiple users
**Endpoint:** `POST /users`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
[
  {
    "email": "string",
    "role": "global:admin or global:member"
  }
]
```

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**403** - Forbidden  

### Get user by ID/Email
**Endpoint:** `GET /users/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - User ID or email. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  

### Delete a user
**Endpoint:** `DELETE /users/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - User ID or email. |

**Responses:**  
**204** - Success  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

### Change a user's global role
**Endpoint:** `PATCH /users/{id}/role`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - User ID or email. |

**Request Body:**
```json
{
  "newRoleName": "global:admin or global:member"
}
```

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

## Audit Operations
### Generate an audit
**Endpoint:** `POST /audit`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
{
  "additionalOptions": {
    "daysAbandonedWorkflow": 0,
    "categories": ["credentials"]
  }
}
```

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**500** - Internal server error  

## Execution Operations
### Retrieve all executions
**Endpoint:** `GET /executions`  
**Authorization:** ApiKeyAuth  
**Query Parameters:**  
| Parameter     | Description |
|---------------|-------------|
| includeData   | boolean - Include detailed data. |
| status        | string - Filter status ("error", "success", or "waiting"). |
| workflowId    | string - Filter by workflow ID. |
| projectId     | string - Filter by project ID. |
| limit         | number <= 250 (Default: 100) - Maximum items to return. |
| cursor        | string - For pagination. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

### Retrieve an execution
**Endpoint:** `GET /executions/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | number - Execution ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

### Delete an execution
**Endpoint:** `DELETE /executions/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | number - Execution ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

## Workflow Operations
### Create a workflow
**Endpoint:** `POST /workflows`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
{
  "name": "string",
  "nodes": [],
  "connections": {},
  "settings": {},
  "staticData": {}
}
```

**Responses:**  
**200** - Workflow object  
**400** - Invalid request  
**401** - Unauthorized  

### Retrieve all workflows
**Endpoint:** `GET /workflows`  
**Authorization:** ApiKeyAuth  
**Query Parameters:**  
| Parameter        | Description |
|------------------|-------------|
| active           | boolean - Filter active workflows. |
| tags             | string - Filter by tags. |
| name             | string - Filter by workflow name. |
| projectId        | string - Filter by project ID. |
| limit            | number <= 250 (Default: 100) - Maximum items to return. |
| cursor           | string - For pagination. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  

### Retrieve a workflow
**Endpoint:** `GET /workflows/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

### Update a workflow
**Endpoint:** `PUT /workflows/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Request Body:**
```json
{
  "name": "string",
  "nodes": [],
  "connections": {},
  "settings": {},
  "staticData": {}
}
```

**Responses:**  
**200** - Workflow object  
**400** - Invalid request  
**401** - Unauthorized  
**404** - Not found  

### Delete a workflow
**Endpoint:** `DELETE /workflows/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

### Activate a workflow
**Endpoint:** `POST /workflows/{id}/activate`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Responses:**  
**200** - Workflow object  
**401** - Unauthorized  
**404** - Not found  

### Deactivate a workflow
**Endpoint:** `POST /workflows/{id}/deactivate`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Responses:**  
**200** - Workflow object  
**401** - Unauthorized  
**404** - Not found  

### Transfer a workflow to another project
**Endpoint:** `PUT /workflows/{id}/transfer`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Request Body:**
```json
{
  "destinationProjectId": "string"
}
```

**Responses:**  
**200** - Success  
**400** - Invalid request  
**401** - Unauthorized  
**404** - Not found  

### Get workflow tags
**Endpoint:** `GET /workflows/{id}/tags`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Responses:**  
**200** - List of tags  
**401** - Unauthorized  
**404** - Not found  

### Update tags of a workflow
**Endpoint:** `PUT /workflows/{id}/tags`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Workflow ID. |

**Request Body:**
```json
[
  {
    "id": "string"
  }
]
```

**Responses:**  
**200** - List of updated tags  
**401** - Unauthorized  
**404** - Not found  

## Credential Operations
### Create a credential
**Endpoint:** `POST /credentials`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
{
  "name": "string",
  "type": "string",
  "data": {}
}
```

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**415** - Unsupported media type  

### Delete credential by ID
**Endpoint:** `DELETE /credentials/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Credential ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

### Show credential data schema
**Endpoint:** `GET /credentials/schema/{credentialTypeName}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| credentialTypeName | string - Credential type name. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

## Tag Operations
### Create a tag
**Endpoint:** `POST /tags`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
{
  "name": "string"
}
```

**Responses:**  
**201** - Success  
**400** - Invalid request  
**401** - Unauthorized  
**409** - Conflict  

### Retrieve all tags
**Endpoint:** `GET /tags`  
**Authorization:** ApiKeyAuth  
**Query Parameters:**  
| Parameter | Description |
|-----------|-------------|
| limit     | number <= 250 (Default: 100) - Maximum items to return. |
| cursor    | string - For pagination. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  

### Retrieve a tag
**Endpoint:** `GET /tags/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Tag ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**404** - Not found  

### Delete a tag
**Endpoint:** `DELETE /tags/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Tag ID. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

### Update a tag
**Endpoint:** `PUT /tags/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Tag ID. |

**Request Body:**
```json
{
  "name": "string"
}
```

**Responses:**  
**200** - Success  
**400** - Invalid request  
**401** - Unauthorized  
**404** - Not found  
**409** - Conflict  

## Source Control Operations
### Pull changes from the remote repository
**Endpoint:** `POST /source-control/pull`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
{
  "force": true,
  "variables": {}
}
```

**Responses:**  
**200** - Success  
**400** - Invalid request  
**409** - Conflict  

## Variable Operations
### Create a variable
**Endpoint:** `POST /variables`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
{
  "key": "string",
  "value": "test"
}
```

**Responses:**  
**201** - Success  
**400** - Invalid request  
**401** - Unauthorized  

### Retrieve variables
**Endpoint:** `GET /variables`  
**Authorization:** ApiKeyAuth  
**Query Parameters:**  
| Parameter | Description |
|-----------|-------------|
| limit     | number <= 250 (Default: 100) - Maximum items to return. |
| cursor    | string - For pagination. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  

### Delete a variable
**Endpoint:** `DELETE /variables/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Variable ID. |

**Responses:**  
**204** - Success  
**401** - Unauthorized  
**404** - Not found  

### Update a variable
**Endpoint:** `PUT /variables/{id}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| id        | string - Variable ID. |

**Request Body:**
```json
{
  "key": "string",
  "value": "test"
}
```

**Responses:**  
**204** - Success  
**400** - Invalid request  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

## Project Operations
### Create a project
**Endpoint:** `POST /projects`  
**Authorization:** ApiKeyAuth  
**Request Body:**
```json
{
  "name": "string"
}
```

**Responses:**  
**201** - Success  
**400** - Invalid request  
**401** - Unauthorized  

### Retrieve projects
**Endpoint:** `GET /projects`  
**Authorization:** ApiKeyAuth  
**Query Parameters:**  
| Parameter | Description |
|-----------|-------------|
| limit     | number <= 250 (Default: 100) - Maximum items to return. |
| cursor    | string - For pagination. |

**Responses:**  
**200** - Success  
**401** - Unauthorized  

### Delete a project
**Endpoint:** `DELETE /projects/{projectId}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| projectId | string - Project ID. |

**Responses:**  
**204** - Success  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

### Update a project
**Endpoint:** `PUT /projects/{projectId}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| projectId | string - Project ID. |

**Request Body:**
```json
{
  "name": "string"
}
```

**Responses:**  
**204** - Success  
**400** - Invalid request  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

### Add one or more users to a project
**Endpoint:** `POST /projects/{projectId}/users`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| projectId | string - Project ID. |

**Request Body:**
```json
{
  "relations": [
    {
      "userId": "string",
      "role": "string"
    }
  ]
}
```

**Responses:**  
**201** - Success  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

### Delete a user from a project
**Endpoint:** `DELETE /projects/{projectId}/users/{userId}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| projectId | string - Project ID. |
| userId    | string - User ID. |

**Responses:**  
**204** - Success  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found  

### Change a user's role in a project
**Endpoint:** `PATCH /projects/{projectId}/users/{userId}`  
**Authorization:** ApiKeyAuth  
**Path Parameters:**  
| Parameter | Description |
|-----------|-------------|
| projectId | string - Project ID. |
| userId    | string - User ID. |

**Request Body:**
```json
{
  "role": "string"
}
```

**Responses:**  
**204** - Success  
**401** - Unauthorized  
**403** - Forbidden  
**404** - Not found

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# API Authentication

n8n uses API keys to authenticate API calls.

## API Scopes

Enterprise instances can limit the resources and actions an API key can access with scopes. Non-enterprise API keys have full access to all resources and capabilities.

## Create an API Key

1. Log in to n8n.
2. Go to **Settings** > **n8n API**.
3. Select **Create an API key**.
4. Choose a **Label** and set an **Expiration** time for the key.
5. If on an enterprise plan, choose the **Scopes** for the key.
6. Copy **My API Key** and use it to authenticate your calls.

## Call the API Using Your Key

Send the API key in your API call as a header named `X-N8N-API-KEY`.

### Example cURL Requests

To get all active workflows:

For a self-hosted n8n instance:
```bash
curl -X 'GET' \
  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true' \
  -H 'accept: application/json' \
  -H 'X-N8N-API-KEY: <your-api-key>'
```

For n8n Cloud:
```bash
curl -X 'GET' \
  '<your-cloud-instance>/api/v<version-number>/workflows?active=true' \
  -H 'accept: application/json' \
  -H 'X-N8N-API-KEY: <your-api-key>'
```

## Delete an API Key

1. Log in to n8n.
2. Go to **Settings** > **n8n API**.
3. Select **Delete** next to the key you want to delete.
4. Confirm the delete by selecting **Delete Forever**.

----------------------------------------

# API Pagination

- Default page size: 100 results
- Maximum page size limit: 250 results
- When a response contains more than one page, it includes a cursor for requesting the next pages.

## Example: Retrieve Active Workflows

### Request the First Page

#### For a self-hosted n8n instance
```bash
curl -X 'GET' \
  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150' \
  -H 'accept: application/json' \
  -H 'X-N8N-API-KEY: <your-api-key>'
```

#### For n8n Cloud
```bash
curl -X 'GET' \
  '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150' \
  -H 'accept: application/json' \
  -H 'X-N8N-API-KEY: <your-api-key>'
```

### Example Response
```json
{
  "data": [
    // The response contains an object for each workflow
    {
      // Workflow data
    }
  ],
  "nextCursor": "MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA"
}
```

### Request the Next Page

#### For a self-hosted n8n instance
```bash
curl -X 'GET' \
  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \
  -H 'accept: application/json'
```

#### For n8n Cloud
```bash
curl -X 'GET' \
  '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \
  -H 'accept: application/json'
```

----------------------------------------

# Using the API Playground

## Feature Availability
The API playground isn't available on Cloud. It is available for all self-hosted pricing tiers.

## Accessing the API Playground
The n8n API has a built-in Swagger UI playground in self-hosted versions. You can access the playground using the following path constructed from your environment variables:
```
N8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/docs
```
The API version number is `1`.

## Accessing Real Data
If you select **Authorize** and enter your API key in the API playground, you can access your live data. Be aware you can change or delete real data.

## Credential Formats
The API includes documentation about credential formats available using the `credentials` endpoint:
```
N8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/credentials/schema/{credentialTypeName}
```

### Finding `credentialTypeName`
To find the type, download your workflow as JSON and examine it. For instance, for a Google Drive node, the `{credentialTypeName}` is `googleDriveOAuth2Api`:
```json
{
    "...": "...",
    "credentials": {
        "googleDriveOAuth2Api": {
            "id": "9",
            "name": "Google Drive"
        }
    }
}
```

----------------------------------------

# API Documentation

## Base URL
- The base URL for the n8n API is: `https://api.n8n.io/v1`.

## Authentication
- API requests require authentication. Use API Key for authorization.

## Endpoints

### Node Operations

#### Get Node
- **Endpoint:** `/nodes`
- **Method:** `GET`
- **Description:** Retrieves a list of available nodes.

#### Execute Node
- **Endpoint:** `/nodes/{node_id}/execute`
- **Method:** `POST`
- **Description:** Executes a specific node by ID.
- **Request Body:**
    ```json
    {
      "parameters": {
        // node-specific parameters
      }
    }
    ```
- **Response:**
    ```json
    {
      "data": {
        // node execution results
      }
    }
    ```

### Workflow Operations

#### Get Workflows
- **Endpoint:** `/workflows`
- **Method:** `GET`
- **Description:** Retrieves a list of workflows.

#### Create Workflow
- **Endpoint:** `/workflows`
- **Method:** `POST`
- **Request Body:**
    ```json
    {
      "name": "Workflow Name",
      "nodes": [
        // array of node definitions
      ]
    }
    ```
- **Response:**
    ```json
    {
      "id": "new_workflow_id",
      "name": "Workflow Name"
    }
    ```

#### Execute Workflow
- **Endpoint:** `/workflows/{workflow_id}/execute`
- **Method:** `POST`
- **Description:** Executes a specific workflow by ID.
- **Request Body:**
    ```json
    {
      "input": {
        // input data for the workflow
      }
    }
    ```
- **Response:**
    ```json
    {
      "output": {
        // output data from the workflow
      }
    }
    ```

## Best Practices
- Always validate node inputs before execution.
- Organize workflows logically to ensure clarity and maintainability.
- Handle errors gracefully in workflows.

----------------------------------------

# Choose your n8n

## Platforms

Different ways to set up n8n:

- **n8n Cloud**: hosted solution, no installation required.
- **Self-host**: recommended for production or customized use cases.
  - **npm**: Installation via npm.
  - **Docker**: Installation using Docker.
  - **Server setup guides**: Available for popular platforms.
- **Embed**: White label and build n8n into your product.

### Self-hosting Knowledge Prerequisites

Self-hosting n8n requires knowledge in:

- Server and container setup/configuration
- Application resource management and scaling
- Server/application security
- n8n configuration

Recommendations caution that mistakes can lead to data loss, security issues, and downtime. For inexperienced users, n8n Cloud is recommended.

## Licenses

n8n operates under the following licenses:

- [Sustainable Use License](https://github.com/n8n-io/n8n/blob/master/LICENSE.md)
- [n8n Enterprise License](https://github.com/n8n-io/n8n/blob/master/LICENSE_EE.md)

For additional details, refer to the [Sustainable Use License](https://docs.n8n.io/sustainable-use-license/).

## Free Versions

n8n offers:

- A free trial of n8n Cloud.
- A free self-hosted community edition.

## Paid Versions

n8n provides two paid versions:

- **n8n Cloud**: Various paid plans based on usage and features.
- **Self-hosted**: Available in both free and paid versions.

For details on Cloud plans and Enterprise Self-hosted, refer to [Pricing](https://n8n.io/pricing/).

----------------------------------------

## Code in n8n

n8n is a low-code tool allowing both no-code and code implementations.

### Code in Your Workflows

#### Expressions
- Use [expressions](https://docs.n8n.io/glossary/#expression-n8n) to transform data in your nodes.
- JavaScript can be used in expressions along with n8n's [Built-in methods and variables](https://docs.n8n.io/code/builtin/overview/) and [Data transformation functions](https://docs.n8n.io/code/builtin/data-transformation-functions/).

#### Code Node
- Use the Code node to add JavaScript or Python to your workflow.
- More information available at [Code node](https://docs.n8n.io/code/code-node/).

### Technical Nodes

n8n provides core nodes for key functionalities such as:
- **HTTP Request**: [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
- **Webhook**: [Webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)
- **Code**: [Code node](https://docs.n8n.io/code/code-node/)

#### Writing a Backend
- Use nodes to make API calls (e.g., creating an API endpoint). Reference: [Create an API endpoint](https://n8n.io/workflows/1750-creating-an-api-endpoint/).

#### Representing Complex Logic
- Build complex workflows using [If](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/), [Switch](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.switch/), and [Merge](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/) nodes.

### Other Developer Resources

- **n8n API**: Allows programmatic tasks similar to GUI functions. Access via [n8n API node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.n8n/). More info at [API documentation](https://docs.n8n.io/api/).
  
- **Self-hosting**: Instructions available at [Hosting documentation](https://docs.n8n.io/hosting/).

- **Building Custom Nodes**: Develop custom nodes and publish them via [npm](https://www.npmjs.com/). Reference: [Creating nodes](https://docs.n8n.io/integrations/creating-nodes/overview/).

----------------------------------------

# AI Coding with GPT

## Use AI in the Code Node

### Feature availability
AI assistance in the Code node is available to Cloud users only.

### Important Notes
- AI-generated code overwrites existing code in the Code tab.
- Recommended to use AI as a starting point and edit the generated code.

### Steps to Generate Code
1. In the Code node, set **Language** to **JavaScript**.
2. Select the **Ask AI** tab.
3. Write your query.
4. Select **Generate Code**.

## Usage Limits
- No limits during the trial phase. Permanent limits may apply based on pricing tier.

## Feature Limits
- AI can only manipulate data from the n8n workflow.
- AI operates with schema knowledge only; it does not know user-specific data.
- Must run nodes before the Code node to provide data.
- May encounter issues with large data schemas or many preceding nodes.

## Writing Good Prompts
- Provide examples and specific processing steps.
- Be clear and direct to avoid ambiguities.
- Ensure the output format is defined: transformed, filtered, aggregated, or sorted.

### n8n-Specific Guidance
- Specify interactions between data from multiple nodes.
- Ensure compatibility with n8n's data structure.

## Example Prompts

### Example 1: Find a Piece of Data Inside a Second Dataset
Prompt:
> The Slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it.

JavaScript:
```javascript
const slackUser = $("Mock Slack").all()[0];
const notionUsers = $input.all();
const slackUserEmail = slackUser.json.email;
const notionUser = notionUsers.find(
  (user) => user.json.person && user.json.person.email === slackUserEmail
);
return notionUser ? [{ json: { notionId: notionUser.json.id } }] : [];
```

### Example 2: Data Transformation
Prompt:
> Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark.

JavaScript:
```javascript
const items = $input.all();
const usernames = items.map((item) => `"${item.json.username}"`);
const result = usernames.join(", ");
return [{ json: { usernames: result } }];
```

### Example 3: Summarize Data and Create a Slack Message
Prompt:
> Create a markdown text for Slack that counts how many ideas, features, and bugs have been submitted... 

JavaScript:
```javascript
const submissions = $input.all();
let ideaCount = 0;
let featureCount = 0;
let bugCount = 0;
submissions.forEach((submission) => {
  switch (submission.json.property_type[0]) {
    case "Idea":
      ideaCount++;
      break;
    case "Feature":
      featureCount++;
      break;
    case "Bug":
      bugCount++;
      break;
  }
});
const topSubmissions = submissions
  .sort((a, b) => b.json.property_votes - a.json.property_votes)
  .slice(0, 5);
let topSubmissionText = "";
topSubmissions.forEach((submission) => {
  topSubmissionText += `<${submission.json.url}|${submission.json.name}> with ${submission.json.property_votes} votes\n`;
});
const slackMessage = `*Summary of Submissions*\nIdeas: ${ideaCount}\nFeatures: ${featureCount}\nBugs: ${bugCount}\nTop 5 Submissions:\n${topSubmissionText}`;
return [{ json: { slackMessage } }];
```

### Reference Incoming Node Data Explicitly
Use dot notation for nested fields to clarify the data you want.

Prompt:
> The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title.

JavaScript:
```javascript
const items = $input.all();
const newItems = items.map((item) => {
  const firstName = item.json.personal_info.first_name;
  const jobTitle = item.json.work_info.job_title;
  return {
    json: {
      firstName,
      jobTitle,
    },
  };
});
return newItems;
```

## Fixing the Code
AI-generated code may require edits. Familiarity with n8n's data structure and built-in methods is recommended.

----------------------------------------

# Convenience Methods

n8n provides methods to simplify common tasks in expressions.

## Python Support

Python can be utilized in the Code node, but is not available in expressions.

### Method List

| Method | Description | Available in Code node? |
| --- | --- | --- |
| `$evaluateExpression(expression: string, itemIndex?: number)` | Evaluates a string as an expression. If `itemIndex` is not provided, data from item 0 is used. | Yes |
| `$ifEmpty(value, defaultValue)` | Tests if the first parameter is empty, returning either it or the second parameter. The first parameter is considered empty if it's:  <br>- `undefined`<br>- `null`<br>- An empty string `''`<br>- An array where `value.length` is false<br>- An object where `Object.keys(value).length` is false | Yes |
| `$if(condition: boolean, trueValue: any, falseValue: any)` | Takes three parameters: a condition, a value to return if true, and a value to return if false. | No |
| `$max(...numbers: number[])` | Returns the highest of the provided numbers. | No |
| `$min(...numbers: number[])` | Returns the lowest of the provided numbers. | No |

### Alternate Method List

| Method | Description |
| --- | --- |
| `_evaluateExpression(expression: string, itemIndex?: number)` | Evaluates a string as an expression. If `itemIndex` is not provided, data from item 0 is used. |
| `_ifEmpty(value, defaultValue)` | Tests if the first parameter is empty, returning either it or the second parameter. The first parameter is considered empty if it's:  <br>- `undefined`<br>- `null`<br>- An empty string `''`<br>- An array where `value.length` is false<br>- An object where `Object.keys(value).length` is false |

----------------------------------------

# Data Transformation Functions

Data transformation functions are helper functions to facilitate data transformation within expressions.

## JavaScript in Expressions

You can implement JavaScript in expressions.

## Available Functions by Data Type

- **Arrays**: Specific functions for array manipulation.
- **Dates**: Functions for handling date transformations.
- **Numbers**: Functions related to numeric operations.
- **Objects**: Functions for object manipulation.
- **Strings**: Functions for string transformations.

## Usage

Data transformation functions can be accessed within the expressions editor. The syntax is:

```
{{ dataItem.function() }}
```

### Example

To validate if a string is an email:

```javascript
{{ "example@example.com".isEmail() }} // Returns true
```

----------------------------------------

# Current Node Input

Methods for working with the input of the current node in n8n.

## Node Input Methods

| Method               | Description                                                                                                      | Available in Code Node? |
|----------------------|------------------------------------------------------------------------------------------------------------------|--------------------------|
| `$binary`            | Shorthand for `$input.item.binary`. Incoming binary data from a node.                                           | No                       |
| `$input.item`       | The input item of the current node that's being processed.                                                      | Yes                      |
| `$input.all()`      | All input items in the current node.                                                                             | Yes                      |
| `$input.first()`    | First input item in the current node.                                                                            | Yes                      |
| `$input.last()`     | Last input item in the current node.                                                                             | Yes                      |
| `$input.params`     | Object containing the query settings of the previous node. This includes data such as the operation it ran.      | Yes                      |
| `$json`             | Shorthand for `$input.item.json`. Incoming JSON data from a node.                                                | Yes (when running once for each item) |
| `$input.context.noItemsLeft` | Boolean. Only available when working with the Loop Over Items node. Indicates whether processing continues. | Yes                      |

## Alternative Input Methods

| Method               | Description                                                                                                      |
|----------------------|------------------------------------------------------------------------------------------------------------------|
| `_input.item`       | The input item of the current node that's being processed.                                                      |
| `_input.all()`      | All input items in the current node.                                                                             |
| `_input.first()`    | First input item in the current node.                                                                            |
| `_input.last()`     | Last input item in the current node.                                                                             |
| `_input.params`     | Object containing the query settings of the previous node. This includes data such as the operation it ran.      |
| `_json`             | Shorthand for `_input.item.json`. Incoming JSON data from a node. Available when set to **Run Once for Each Item**. |
| `_input.context.noItemsLeft` | Boolean. Only available when working with the Loop Over Items node. Indicates whether processing continues. |

----------------------------------------

# Data Transformation Functions for Arrays

A reference document listing built-in convenience functions to support data transformation in expressions for arrays.

## Functions

### average()
Returns the value of elements in an array.

### chunk(size: Number): Array
Splits arrays into chunks with a length of size.
- **Parameters:**
  - `size` (Required, Number): The size of each chunk.

### compact(): Array
Removes empty values from the array.

### difference(arr: Array): Array
Compares two arrays. Returns all elements in the base array that aren't present in `arr`.
- **Parameters:**
  - `arr` (Required, Array): The array to compare to the base array.

### intersection(arr: Array): Array
Compares two arrays. Returns all elements in the base array that are present in `arr`.
- **Parameters:**
  - `arr` (Required, Array): The array to compare to the base array.

### first(): Array item
Returns the first element of the array.

### isEmpty(): Boolean
Checks if the array doesn't have any elements.

### isNotEmpty(): Boolean
Checks if the array has elements.

### last(): Array item
Returns the last element of the array.

### max(): Number
Returns the highest value in an array.

### merge(arr: Array): Array
Merges two Object-arrays into one array by merging the key-value pairs of each element.
- **Parameters:**
  - `arr` (Required, Array): The array to merge into the base array.

### min(): Number
Gets the minimum value from a number-only array.

### pluck(fieldName?: String): Array
Returns an array of Objects where keys equal the given field names.
- **Parameters:**
  - `fieldName` (Optional, String): The key(s) you want to retrieve, as comma-separated strings.

### randomItem(): Array item
Returns a random element from an array.

### removeDuplicates(key?: String): Array
Removes duplicates from an array.
- **Parameters:**
  - `key` (Optional, String): A key, or comma-separated list of keys, to check for duplicates.

### renameKeys(from: String, to: String): Array
Renames all matching keys in the array.
- **Parameters:**
  - `from` (Required, String): The key you want to rename.
  - `to` (Required, String): The new name.

### smartJoin(keyField: String, nameField: String): Array
Operates on an array of objects. Creates a new object containing key-value pairs, removing non-matching and empty values.
- **Parameters:**
  - `keyField` (Required, String): The key to join.
  - `nameField` (Required, String): The value to join.
  
#### Example
```javascript
// Input
{{ [{"type":"fruit", "name":"apple"},{"type":"vegetable", "name":"carrot"} ].smartJoin("type","name") }}
// Output
[Object: {"fruit":"apple","vegetable":"carrot"}]
```

### sum(): Number
Returns the total sum of all the values in an array of parsable numbers.

### toJsonString(): String
Convert an array to a JSON string. Equivalent of `JSON.stringify`.

### union(arr: Array): Array
Concatenates two arrays and then removes duplicates.
- **Parameters:**
  - `arr` (Required, Array): The array to compare to the base array.

### unique(key?: String): Array
Removes duplicates from an array.
- **Parameters:**
  - `key` (Optional, String): A key, or comma-separated list of keys, to check for duplicates.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# Booleans

## Overview

This document lists built-in convenience functions for data transformation in expressions for arrays in n8n.

## JavaScript in Expressions

You can use any JavaScript in expressions. Refer to Expressions documentation for more information.

## toInt()

### Description
Convert a boolean to a number. 

### Behavior
- `false` converts to `0`
- `true` converts to `1`

----------------------------------------

# Dates

A reference document listing built-in convenience functions for data transformation in expressions for dates.

## Function: beginningOf(unit?: DurationUnit): Date 

Transforms a Date to the start of the given time period. Returns either a JavaScript Date or Luxon Date, depending on input.

### Function Parameters
- **unit**: Optional string enum
  - Default: `week`
  - Values: `second`, `minute`, `hour`, `day`, `week`, `month`, `year`

---

## Function: endOfMonth(): Date 

Transforms a Date to the end of the month.

---

## Function: extract(datePart?: DurationUnit): Number 

Extracts the part defined in datePart from a Date. Returns either a JavaScript Date or Luxon Date, depending on input.

### Function Parameters
- **datePart**: Optional string enum
  - Default: `week`
  - Values: `second`, `minute`, `hour`, `day`, `week`, `month`, `year`

---

## Function: format(fmt: TimeFormat): String 

Formats a Date in the given structure.

### Function Parameters
- **fmt**: Required string enum
  - Refer to [Luxon | Table of tokens](https://moment.github.io/luxon/#/formatting?id=table-of-tokens) for formats.

---

## Function: isBetween(date1: Date | DateTime, date2: Date | DateTime): Boolean 

Checks if a Date is between two given dates.

### Function Parameters
- **date1**: Required Date or DateTime
- **date2**: Required Date or DateTime

---

## Function: isDst(): Boolean 

Checks if a Date is within Daylight Savings Time.

---

## Function: isInLast(n?: Number, unit?: DurationUnit): Boolean 

Checks if a Date is within a given time period.

### Function Parameters
- **n**: Optional Number
  - Default: `0`
- **unit**: Optional string enum
  - Default: `minutes`
  - Values: `second`, `minute`, `hour`, `day`, `week`, `month`, `year`

---

## Function: isWeekend(): Boolean 

Checks if the Date falls on a Saturday or Sunday.

---

## Function: minus(n: Number, unit?: DurationUnit): Date 

Subtracts a given time period from a Date. Returns either a JavaScript Date or Luxon Date, depending on input.

### Function Parameters
- **n**: Required Number
- **unit**: Optional string enum
  - Default: `milliseconds`
  - Values: `second`, `minute`, `hour`, `day`, `week`, `month`, `year`

---

## Function: plus(n: Number, unit?: DurationUnit): Date 

Adds a given time period to a Date. Returns either a JavaScript Date or Luxon Date, depending on input.

### Function Parameters
- **n**: Required Number
- **unit**: Optional string enum
  - Default: `milliseconds`
  - Values: `second`, `minute`, `hour`, `day`, `week`, `month`, `year`

---

## Function: toDateTime(): Date 

Converts a JavaScript date to a Luxon date object.

----------------------------------------

# Numbers

A reference document listing built-in convenience functions to support data transformation in expressions for numbers.

## JavaScript in expressions

You can use any JavaScript in expressions.

## Functions

### ceil()

Rounds up a number to a whole number.

---

### floor()

Rounds down a number to a whole number.

---

### format(locales?: LanguageCode, options?: FormatOptions): String

Returns a formatted string of a number based on the given LanguageCode and FormatOptions. When no arguments are given, transforms the number in a like format 1.234.

#### Function parameters

- **locales**: Optional string, an IETF BCP 47 language tag. Default: `en-US`
- **options**: Optional object, configure options for number formatting. Refer to [MDN | Intl.NumberFormat()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for more information.

---

### isEven(): Boolean

Returns true if the number is even. Only works on whole numbers.

---

### isOdd(): Boolean

Returns true if the number is odd. Only works on whole numbers.

---

### round(decimalPlaces?: Number): Number

Returns the value of a number rounded to the nearest whole number, unless a decimal place is specified.

#### Function parameters

- **decimalPlaces**: Optional number, how many decimal places to round to. Default: `0`

---

### toBoolean(): Boolean

Converts a number to a boolean. `0` converts to `false`. All other values convert to `true`.

---

### toDateTime(format?: String): Date

Converts a number to a Luxon date object.

#### Function parameters

- **format**: Optional string enum. Can be `ms` (milliseconds), `s` (seconds), or `excel` (Excel 1900). Defaults to milliseconds.

----------------------------------------

# Data Transformation Functions for Objects

A reference document listing built-in convenience functions to support data transformation in expressions for objects.

## JavaScript in Expressions
You can use any JavaScript in expressions. Refer to n8n Expressions for more information.

### isEmpty(): Boolean
Checks if the Object has no key-value pairs.

### merge(object: Object): Object
Merges two Objects into a single Object using the first as the base Object. If a key exists in both Objects, the key in the base Object takes precedence.

#### Function Parameters
- **object**: Required Object. The Object to merge with the base Object.

### hasField(fieldName: String): Boolean
Checks if the Object has a given field. Only top-level keys are supported.

#### Function Parameters
- **fieldName**: Required String. The field to search for.

### removeField(key: String): Object
Removes a given field from the Object.

#### Function Parameters
- **key**: Required String. The field key of the field to remove.

### removeFieldsContaining(value: String): Object
Removes fields with a given value from the Object.

#### Function Parameters
- **value**: Required String. The field value of the field to remove.

### keepFieldsContaining(value: String): Object
Removes fields that do not match the given value from the Object.

#### Function Parameters
- **value**: Required String. The field value of the field to keep.

### compact(): Object
Removes empty values from an Object.

### toJsonString(): String
Convert an object to a JSON string. Equivalent of `JSON.stringify`.

### urlEncode(): String
Transforms an Object into a URL parameter list. Only top-level keys are supported.

----------------------------------------

# Data Transformation Functions for Strings

A reference document listing built-in convenience functions to support data transformation in expressions for strings.

## Functions

### `base64Encode()`
Encode a string as base64.

### `base64Decode()`
Convert a base64 encoded string to a normal string.

### `extractDomain()`
Extracts a domain from a string containing a valid URL. Returns undefined if none is found.

### `extractEmail()`
Extracts an email from a string. Returns undefined if none is found.

### `extractUrl()`
Extracts a URL from a string. Returns undefined if none is found.

### `extractUrlPath()`
Extract the path but not the root domain from a URL. 
```javascript
"https://example.com/orders/1/details".extractUrlPath() // returns "/orders/1/details/"
```

### `hash(algo?: Algorithm)`
Returns a string hashed with the given algorithm.

#### Function Parameters
- `algo` (Optional): String enum
  - Default: `md5`
  - Options: `md5`, `base64`, `sha1`, `sha224`, `sha256`, `sha384`, `sha512`, `sha3`, `ripemd160`

### `isDomain()`
Checks if a string is a domain.

### `isEmail()`
Checks if a string is an email.

### `isEmpty()`
Checks if a string is empty.

### `isNotEmpty()`
Checks if a string has content.

### `isNumeric()`
Checks if a string only contains digits.

### `isUrl()`
Checks if a string is a valid URL.

### `parseJson()`
Equivalent of `JSON.parse()`. Parses a string as a JSON object.

### `quote(mark?: String)`
Returns a string wrapped in quotation marks.  
Default quotation is `"`.

#### Function Parameters
- `mark` (Optional): String to specify quote mark style. Default: `"`

### `removeMarkdown()`
Removes Markdown formatting from a string.

### `replaceSpecialChars()`
Replaces non-ASCII characters in a string with an ASCII representation.

### `removeTags()`
Remove tags, such as HTML or XML, from a string.

### `toBoolean()`
Convert a string to a boolean. 
```javascript
"false", "0", "", and "no" convert to false.
```

### `toDateTime()`
Converts a string to a Luxon date object.

### `toDecimalNumber()`
See `toFloat`.

### `toFloat()`
Converts a string to a decimal number.

### `toInt()`
Converts a string to an integer.

### `toSentenceCase()`
Formats a string to sentence case.

### `toSnakeCase()`
Formats a string to snake case.

### `toTitleCase()`
Formats a string to title case. Will not change already uppercase letters.

### `toWholeNumber()`
Converts a string to a whole number.

### `urlDecode(entireString?: Boolean)`
Decodes a URL-encoded string, replaces percent-encoded characters with their original characters.

#### Function Parameters
- `entireString` (Optional): Boolean to determine if URI syntax characters should be decoded.

### `urlEncode(entireString?: Boolean)`
Encodes a string to be used/included in a URL.

#### Function Parameters
- `entireString` (Optional): Boolean to determine if URI syntax characters should be encoded.

----------------------------------------

# Built-in Date and Time Methods

## Overview
Methods for working with date and time using n8n.

## Python Support
You can use Python in the Code node. It isn't available in expressions.

## Methods

| Method | Description | Available in Code node? |
| --- | --- | --- |
| `$now` | A Luxon object containing the current timestamp. Equivalent to `DateTime.now()`. | Yes |
| `$today` | A Luxon object containing the current timestamp, rounded down to the day. Equivalent to `DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })`. | Yes |

| Method | Description |
| --- | --- |
| `_now` | A Luxon object containing the current timestamp. Equivalent to `DateTime.now()`. |
| `_today` | A Luxon object containing the current timestamp, rounded down to the day. Equivalent to `DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })`. |

## Date Parsing
n8n passes dates between nodes as strings, so you need to parse them. Luxon helps you do this. Refer to [Date and time with Luxon](https://docs.n8n.io/code/cookbook/luxon/) for more information.

## Convenience Functions
n8n provides built-in convenience functions to support data transformation in expressions for dates. Refer to [Data transformation functions | Dates](https://docs.n8n.io/code/builtin/data-transformation-functions/dates/) for more information.

----------------------------------------

# HTTP Node Variables

Variables for working with HTTP node requests and responses when using pagination.

These variables are for use in expressions in the HTTP node. You can't use them in other nodes.

| Variable      | Description                                                                                                                                              |
|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|
| `$pageCount`  | The pagination count. Tracks how many pages the node has fetched.                                                                                      |
| `$request`    | The request object sent by the HTTP node.                                                                                                             |
| `$response`   | The response object from the HTTP call. Includes `$response.body`, `$response.headers`, and `$response.statusCode`. The contents of `body` and `headers` depend on the data sent by the API. |

----------------------------------------

# JMESPath Method

This is an n8n-provided method for working with the JMESPath library.

## Python Support

You can use Python in the Code node, but it isn't available in expressions.

## Methods

| Method       | Description                                                    | Available in Code node? |
|--------------|----------------------------------------------------------------|--------------------------|
| `$jmespath()`| Perform a search on a JSON object using JMESPath.             | Yes                      |
| `_jmespath()`| Perform a search on a JSON object using JMESPath.             | No                       |

----------------------------------------

# LangChain Code Node Methods

## Methods

| Method | Description |
| --- | --- |
| `this.addInputData(inputName, data)` | Populate the data of a specified non-main input. <br> - `inputName`: Must be one of: `ai_agent`, `ai_chain`, `ai_document`, `ai_embedding`, `ai_languageModel`, `ai_memory`, `ai_outputParser`, `ai_retriever`, `ai_textSplitter`, `ai_tool`, `ai_vectorRetriever`, `ai_vectorStore`.<br> - `data`: Refer to the [Data structure](https://docs.n8n.io/data/data-structure/) for expected data structure. |
| `this.addOutputData(outputName, data)` | Populate the data of a specified non-main output. <br> - `outputName`: Must be one of: `ai_agent`, `ai_chain`, `ai_document`, `ai_embedding`, `ai_languageModel`, `ai_memory`, `ai_outputParser`, `ai_retriever`, `ai_textSplitter`, `ai_tool`, `ai_vectorRetriever`, `ai_vectorStore`.<br> - `data`: Refer to the [Data structure](https://docs.n8n.io/data/data-structure/) for expected data structure. |
| `this.getInputConnectionData(inputName, itemIndex, inputIndex?)` | Get data from a specified non-main input. <br> - `inputName`: Must be one of: `ai_agent`, `ai_chain`, `ai_document`, `ai_embedding`, `ai_languageModel`, `ai_memory`, `ai_outputParser`, `ai_retriever`, `ai_textSplitter`, `ai_tool`, `ai_vectorRetriever`, `ai_vectorStore`.<br> - `itemIndex`: Should be `0`.<br> - `inputIndex`: Use if multiple nodes are connected to the specified input. |
| `this.getInputData(inputIndex?, inputName?)` | Get data from the main input. |
| `this.getNode()` | Get the current node. |
| `this.getNodeOutputs()` | Get the outputs of the current node. |
| `this.getExecutionCancelSignal()` | Use to stop the execution of a function when the workflow stops. Required if building custom chains or agents. |

----------------------------------------

# n8n Metadata

## Core Concepts
Methods for working with n8n metadata encompass:
- Access to environment variables for self-hosted n8n.
- Metadata about workflows, executions, and nodes.
- Information regarding instance variables and external secrets.

## Node & Parameter Details

| Method | Description | Available in Code node? |
| --- | --- | --- |
| `$env` | Contains n8n instance configuration environment variables. | Yes |
| `$execution.customData` | Set and get custom execution data. | Yes |
| `$execution.id` | The unique ID of the current workflow execution. | Yes |
| `$execution.mode` | Indicates if the execution was triggered automatically or manually. Possible values: `test`, `production`. | Yes |
| `$execution.resumeUrl` | The webhook URL to resume a workflow waiting at a Wait node. | Yes |
| `$getWorkflowStaticData(type)` | Accesses static workflow data. Static data doesn't persist when testing workflows. | Yes |
| `$("<node-name>").isExecuted` | Checks whether a node has executed. | Yes |
| `$itemIndex` | The index of an item in a list. | No |
| `$nodeVersion` | Gets the version of the current node. | Yes |
| `$prevNode.name` | Name of the node that the current input came from. | Yes |
| `$prevNode.outputIndex` | Index of the output connector from which the current input came. | Yes |
| `$prevNode.runIndex` | Run of the previous node generating the current input. | Yes |
| `$runIndex` | Number of times the current node has executed (zero-based). | Yes |
| `$secrets` | Information about external secrets setup. | Yes |
| `$vars` | Variables available in the active environment. | Yes |
| `$version` | The node version. | No |
| `$workflow.active` | Indicates if the workflow is active (true/false). | Yes |
| `$workflow.id` | The workflow ID. | Yes |
| `$workflow.name` | The workflow name. | Yes |

## Additional Method Details

| Method | Description |
| --- | --- |
| `_env` | Contains n8n instance configuration environment variables. |
| `_execution.customData` | Set and get custom execution data. |
| `_execution.id` | The unique ID of the current workflow execution. |
| `_execution.mode` | Indicates if the execution was triggered automatically or manually. Possible values: `test`, `production`. |
| `_execution.resumeUrl` | The webhook URL to resume a workflow waiting at a Wait node. |
| `_getWorkflowStaticData(type)` | Accesses static workflow data. |
| `_("<node-name>").isExecuted` | Checks whether a node has executed. |
| `_nodeVersion` | Gets the version of the current node. |
| `_prevNode.name` | Name of the node that the current input came from. |
| `_prevNode.outputIndex` | Index of the output connector from which the current input came. |
| `_prevNode.runIndex` | Run of the previous node generating the current input. |
| `_runIndex` | Number of times the current node has executed (zero-based). |
| `_secrets` | Information about external secrets setup. |
| `_vars` | Variables available in the active environment. |
| `_workflow.active` | Indicates if the workflow is active (true/false). |
| `_workflow.id` | The workflow ID. |
| `_workflow.name` | The workflow name. |

----------------------------------------

# Output of Other Nodes

Methods for working with the output of other nodes in n8n. 

## Python Support
Python can be used in the Code node, but it isn't available in expressions.

## Node Methods

### Methods for Accessing Node Outputs

| Method | Description | Available in Code node? |
| --- | --- | --- |
| `$("<node-name>").all(branchIndex?, runIndex?)` | Returns all items from a given node. If `branchIndex` isn't specified, it defaults to the output connecting `node-name` to the Code node. | Yes |
| `$("<node-name>").first(branchIndex?, runIndex?)` | Returns the first item output by the given node. Defaults to the output connecting `node-name` to the Code node if `branchIndex` isn't given. | Yes |
| `$("<node-name>").last(branchIndex?, runIndex?)` | Returns the last item output by the given node. Defaults to the output connecting `node-name` to the Code node if `branchIndex` isn't given. | Yes |
| `$("<node-name>").item` | The linked item used to produce the current item. Refer to Item linking for more information. | No |
| `$("<node-name>").params` | An object containing the query settings of the node, including operation details and result limits. | Yes |
| `$("<node-name>").context` | Provides information about the processing in the Loop Over Items node. Indicates whether items are still being processed. | Yes |
| `$("<node-name>").itemMatching(currentNodeInputIndex)` | Use this instead of `$("<node-name>").item` in the Code node to trace back from an input item. | Yes |

### Alternative Methods Using Underscore

| Method | Description | Available in Code node? |
| --- | --- | --- |
| `_("<node-name>").all(branchIndex?, runIndex?)` | Returns all items from a given node. If `branchIndex` isn't specified, it defaults to the output connecting `node-name` to the Code node. | Yes |
| `_("<node-name>").first(branchIndex?, runIndex?)` | Returns the first item output by the given node. Defaults to the output connecting `node-name` to the Code node if `branchIndex` isn't specified. | Yes |
| `_("<node-name>").last(branchIndex?, runIndex?)` | Returns the last item output by the given node. Defaults to the output connecting `node-name` to the Code node if `branchIndex` isn't specified. | Yes |
| `_("<node-name>").item` | The linked item used to produce the current item. Refer to Item linking for more information. | No |
| `_("<node-name>").params` | An object containing the query settings of the node, including operation details and result limits. | Yes |
| `_("<node-name>").context` | Provides information about the processing in the Loop Over Items node. Indicates whether items are still being processed. | Yes |
| `_("<node-name>").itemMatching(currentNodeInputIndex)` | Use this instead of `_("<node-name>").item` in the Code node to trace back from an input item. | Yes |

----------------------------------------

# Built-in Methods and Variables

n8n provides built-in methods and variables for working with data and accessing n8n data. This section serves as a reference for available methods and variables for use in expressions.

## Availability

- Some methods and variables are not available in the Code node.
- Data transformation functions are only available in the expressions editor.

## References

- **Current Node Input**: [Documentation](https://docs.n8n.io/code/builtin/current-node-input/)
- **Output of Other Nodes**: [Documentation](https://docs.n8n.io/code/builtin/output-other-nodes/)
- **Date and Time**: [Documentation](https://docs.n8n.io/code/builtin/date-time/)
- **JMESPath**: [Documentation](https://docs.n8n.io/code/builtin/jmespath/)
- **HTTP Node**: [Documentation](https://docs.n8n.io/code/builtin/http-node-variables/)
- **LangChain Code Node**: [Documentation](https://docs.n8n.io/code/builtin/langchain-methods/)
- **n8n Metadata**: [Documentation](https://docs.n8n.io/code/builtin/n8n-metadata/)
- **Convenience Methods**: [Documentation](https://docs.n8n.io/code/builtin/convenience/)
- **Data Transformation Functions**: [Documentation](https://docs.n8n.io/code/builtin/data-transformation-functions/)

----------------------------------------

# Using the Code Node

The Code node allows writing custom JavaScript or Python to be executed as a step in workflows.

## Usage

### Choose a Mode

- **Run Once for All Items**: Executes the code once, regardless of input items.
- **Run Once for Each Item**: Executes the code for each input item.

## JavaScript

The Code node supports Node.js.

### Supported JavaScript Features

- Promises: You can return a promise that resolves to items.
- `console.log`: Use for debugging workflows.

### External Libraries

For self-hosted n8n, external npm modules can be imported. 
- Built-in available modules:
  - [crypto Node.js module](https://nodejs.org/docs/latest-v18.x/api/crypto.html)
  - [moment npm package](https://www.npmjs.com/package/moment)

### Built-in Methods and Variables

Use `$variableName` or `$methodName()` syntax. Type `$` in the Code node for suggestions.

### Keyboard Shortcuts

Keyboard shortcuts are supported for autocompletion, code-folding, and multiple-cursors. A full list is available in the keyboard shortcuts documentation.

## Python

Python support is provided using [Pyodide](https://pyodide.org/en/stable/), which does not include a Python executable.

### Limitations

- Slower processing time than JavaScript.
- Built-in methods and variables syntax: `_variableName` or `_methodName()`. Type `_` for suggestions.

### Keyboard Shortcuts

Identical support for keyboard shortcuts as in JavaScript.

## File System and HTTP Requests

Direct file system access and HTTP requests are not allowed. Use:
- [Read/Write File From Disk](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/)
- [HTTP Request](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)

## Key Concepts

- **Data Structure**: Understand data received in the Code node.
- **Item Linking**: How to link items when the number of input and output items does not match.

## Use AI in the Code Node

- AI features available to Cloud users only.
- AI generated code replaces existing code.

### Steps to Use AI

1. Set **Language** to **JavaScript**.
2. Select the **Ask AI** tab.
3. Write your query.
4. Select **Generate Code**. 

Refer to official documentation for more comprehensive guidance on the Code node and its functionalities.

----------------------------------------

# Examples using n8n's Built-in Methods and Variables

n8n provides built-in methods and variables for working with data and accessing n8n data. This section provides usage examples.

## Built-in Methods and Variables

### execution
- Description: Allows access to workflow execution details.

### getWorkflowStaticData
- Description: Retrieves static data associated with the workflow.

### Retrieve linked items from earlier in the workflow
- Description: Fetches items that were linked to the current workflow execution.

### (node-name).all
- Description: Accesses all data from the specified node.

### vars
- Description: Provides access to variables within the n8n environment. 

## Related Resources
- **Built-in Methods and Variables Reference**: Overview of built-in methods and variables.
- **Expressions**: Documentation on expressions within n8n.
- **Code Node**: Guidance on utilizing the code node in workflows.

----------------------------------------

# `("<node-name>").all(branchIndex?: number, runIndex?: number)`

Accesses all the items of the current or parent nodes. Without parameters, it returns all items of the current node.

## Getting items

### JavaScript Code Example

```javascript
// Returns all the items of the given node and current run
let allItems = $("<node-name>").all();
// Returns all items the node "IF" outputs (index: 0 which is Output "true" of its most recent run)
let allItems = $("IF").all();
// Returns all items the node "IF" outputs (index: 0 which is Output "true" of the same run as current node)
let allItems = $("IF").all(0, $runIndex);
// Returns all items the node "IF" outputs (index: 1 which is Output "false" of run 0 which is the first run)
let allItems = $("IF").all(1, 0);
```

### Python Code Example

```python
# Returns all the items of the given node and current run
allItems = _("<node-name>").all()
# Returns all items the node "IF" outputs (index: 0 which is Output "true" of its most recent run)
allItems = _("IF").all()
# Returns all items the node "IF" outputs (index: 0 which is Output "true" of the same run as current node)
allItems = _("IF").all(0, _runIndex)
# Returns all items the node "IF" outputs (index: 1 which is Output "false" of run 0 which is the first run)
allItems = _("IF").all(1, 0)
```

## Accessing item data

Retrieve all items output by a previous node and log the data they contain.

### JavaScript Code Example

```javascript
previousNodeData = $("<node-name>").all();
for(let i=0; i<previousNodeData.length; i++) {
    console.log(previousNodeData[i].json);
}
```

### Python Code Example

```python
previousNodeData = _("<node-name>").all()
for item in previousNodeData:
    # item is of type <class 'pyodide.ffi.JsProxy'>
    # Convert it to a Dict
    itemDict = item.json.to_py()
    print(itemDict)
```

----------------------------------------

## Core Concepts

### `execution.id`
Contains the unique ID of the current workflow execution.

### `execution.resumeUrl`
The webhook URL to call to resume a waiting workflow.

### `execution.customData`
This is only available in the Code node.

## Node & Parameter Details

### Code Examples

#### JavaScript
```javascript
let executionId = $execution.id;
$execution.customData.set("key", "value");
$execution.customData.setAll({"key1": "value1", "key2": "value2"});
var customData = $execution.customData.getAll();
var customData = $execution.customData.get("key");
```

#### Python
```python
executionId = _execution.id
_execution.customData.set("key", "value");
_execution.customData.setAll({"key1": "value1", "key2": "value2"});
customData = _execution.customData.getAll();
customData = _execution.customData.get("key");
``` 

Refer to Custom executions data for more information.

----------------------------------------

# `getWorkflowStaticData(type)`

Access static workflow data.

## Core Concepts

- **Static Data**: Data available when the workflow is active and called by a trigger or webhook. Not available during testing.
- **Types of Static Data**:
  - **Global Static Data**: Accessible by all nodes in the workflow. 
  - **Node Static Data**: Unique to individual nodes.

## Example with Global Data

### JavaScript

```javascript
// Get the global workflow static data
const workflowStaticData = $getWorkflowStaticData('global');
// Access its data
const lastExecution = workflowStaticData.lastExecution;
// Update its data
workflowStaticData.lastExecution = new Date().getTime();
// Delete data
delete workflowStaticData.lastExecution;
```

### Python

```python
# Get the global workflow static data
workflowStaticData = _getWorkflowStaticData('global')
# Access its data
lastExecution = workflowStaticData.lastExecution
# Update its data
workflowStaticData.lastExecution = new Date().getTime()
# Delete data
delete workflowStaticData.lastExecution
```

## Example with Node Data

### JavaScript

```javascript
// Get the static data of the node
const nodeStaticData = $getWorkflowStaticData('node');
// Access its data
const lastExecution = nodeStaticData.lastExecution;
// Update its data
nodeStaticData.lastExecution = new Date().getTime();
// Delete data
delete nodeStaticData.lastExecution;
```

### Python

```python
# Get the static data of the node
nodeStaticData = _getWorkflowStaticData('node')
# Access its data
lastExecution = nodeStaticData.lastExecution
# Update its data
nodeStaticData.lastExecution = new Date().getTime()
# Delete data
delete nodeStaticData.lastExecution
```

----------------------------------------

# Retrieve Linked Items from Earlier in the Workflow

Every item in a node's input data links back to the items used in previous nodes to generate it. This is useful if you need to retrieve linked items from further back than the immediate previous node.

To access the linked items from earlier in the workflow, use `("<node-name>").itemMatching(currentNodeinputIndex)`.

## Example Workflow

1. **Customer Datastore Node** generates example data:

```json
[
    {
        "id": "23423532",
        "name": "Jay Gatsby",
        "email": "gatsby@west-egg.com",
        "notes": "Keeps asking about a green light??",
        "country": "US",
        "created": "1925-04-10"
    },
    {
        "id": "23423533",
        "name": "José Arcadio Buendía",
        "email": "jab@macondo.co",
        "notes": "Lots of people named after him. Very confusing",
        "country": "CO",
        "created": "1967-05-05"
    }
]
```

2. **Edit Fields Node** simplifies this data:

```json
[
    {
        "name": "Jay Gatsby"
    },
    {
        "name": "José Arcadio Buendía"
    }
]
```

3. **Code Node** restores the email address to the correct person:

```json
[
    {
        "name": "Jay Gatsby",
        "restoreEmail": "gatsby@west-egg.com"
    },
    {
        "name": "José Arcadio Buendía",
        "restoreEmail": "jab@macondo.co"
    }
]
```

## Code Examples

### JavaScript

```javascript
for (let i = 0; i < $input.all().length; i++) {
    $input.all()[i].json.restoreEmail = $('Customer Datastore (n8n training)').itemMatching(i).json.email;
}
return $input.all();
```

### Python

```python
for i, item in enumerate(_input.all()):
    _input.all()[i].json.restoreEmail = _('Customer Datastore (n8n training)').itemMatching(i).json.email
return _input.all();
``` 

You can view and download the example workflow from the [n8n website | itemMatching usage example](https://n8n.io/workflows/1966-itemmatching-usage-example/).

----------------------------------------

# `vars`

`vars` contains all variables for the active environment in n8n. It is read-only, meaning you can access variables using `vars`, but must set them through the UI.

## Accessing Variables

### JavaScript
```javascript
// Access a variable
$vars.<variable-name>
```

### Python
```python
# Access a variable
_vars.<variable-name>
```

## `vars` and `env`

`vars` gives access to user-created variables and is part of the environments feature. Meanwhile, `env` provides access to configuration environment variables for your n8n instance.

----------------------------------------

# Code Node Cookbook

## Overview
This section contains examples and recipes for tasks you can perform with the Code node in n8n.

## Examples

- **Get Number of Items Returned by Last Node**: 
  - Reference to the relevant documentation: [Get number of items returned by last node](https://docs.n8n.io/code/cookbook/code-node/number-items-last-node/)

- **Get the Binary Data Buffer**: 
  - Reference to the relevant documentation: [Get the binary data buffer](https://docs.n8n.io/code/cookbook/code-node/get-binary-data-buffer/)

- **Output to the Browser Console**: 
  - Reference to the relevant documentation: [Output to the browser console](https://docs.n8n.io/code/cookbook/code-node/console-log/)

## Related Resources
- **Built-in Methods and Variables Reference**: [Built-in methods and variables reference](https://docs.n8n.io/code/builtin/overview/)
- **Code Node Documentation**: [Code node](https://docs.n8n.io/code/code-node/)

----------------------------------------

# Output to the Browser Console

You can use `console.log()` or `print()` in the Code node for debugging.

## console.log (JavaScript)

Example usage:
```javascript
let a = "apple";
console.log(a);
```

## print (Python)

Set your Code node **Language** to **Python**, then use the following code:
```python
a = "apple"
print(a)
```

### Handling an Output of `[object Object]`

If the console displays `[object Object]`, check the data type and convert it as needed. To check the data type in Python:
```python
print(type(myData))
```

#### JsProxy

If `type()` outputs `<class 'pyodide.ffi.JsProxy'>`, convert it to a native Python object using `to_py()`. Example:
```python
previousNodeData = _("<node-name>").all()
for item in previousNodeData:
    itemDict = item.json.to_py()
    print(itemDict)
```
Refer to the Pyodide documentation on [JsProxy](https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.JsProxy) for more information.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# Get the binary data buffer

The binary data buffer contains all the binary file data processed by a workflow. You can perform operations on the binary data using this buffer.

### Usage

To access the binary data buffer, use n8n's `getBinaryDataBuffer()` function.

#### Function Signature
```javascript
/**
 * itemIndex: number. The index of the item in the input data.
 * binaryPropertyName: string. The name of the binary property. 
 * The default in the Read/Write File From Disk node is 'data'. 
 */
let binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(itemIndex, binaryPropertyName);
```

#### Example

To retrieve the data in the binary buffer for the first input item:
```javascript
let binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(0, 'data');
// Returns the data in the binary buffer for the first input item
```

### Best Practices

- Always use the `getBinaryDataBuffer()` function.
- Avoid using older methods of directly accessing the buffer, such as targeting it with expressions like `items[0].binary.data.data`.

### Notes

- The `getBinaryDataBuffer()` function is not supported in Python.

----------------------------------------

# Get Number of Items Returned by the Previous Node

To get the number of items returned by the previous node, use the following code examples:

## JavaScript Example
```javascript
if (Object.keys(items[0].json).length === 0) {
    return [
        {
            json: {
                results: 0,
            }
        }
    ];
}
return [
    {
        json: {
            results: items.length,
        }
    }
];
```

### Output
```json
[
    {
        "results": 8
    }
]
```

## Python Example
```python
if len(items[0].json) == 0:
    return [
        {
            "json": {
                "results": 0,
            }
        }
    ]
else:
    return [
        {
            "json": {
                "results": items.length,
            }
        }
    ]
```

### Output
```json
[
    {
        "results": 8
    }
]
```

----------------------------------------

# Expressions Cookbook

This section contains examples and recipes for tasks you can do with expressions.

## Python Support

You can use Python in the Code node. It isn't available in expressions.

## Related Resources

- Built-in methods and variables reference
- Expressions

----------------------------------------

# Check incoming data

You can check the incoming data and return a different value if it doesn't match a condition. For instance, to check if a variable from the previous node is empty and return a string if it is, use the following code snippet to return `not found`:

```javascript
{{$json["variable_name"] ? $json["variable_name"] : "not found"}}
```

This expression uses the ternary operator. Alternatively, you can use the nullish coalescing operator (`??`) or the logical OR operator (`||`):

```javascript
{{ $x ?? "default value" }}
{{ $x || "default value" }}
```

In these cases, the value of `$x` will be used if it is set to a non-null, non-false value; otherwise, the string `default value` will be the fallback value.

----------------------------------------

# Expressions Common Issues

## The 'JSON Output' in item 0 contains invalid JSON

This error occurs when you use JSON mode without providing a valid JSON object. The error may display as `The 'JSON Output' in item 0 does not contain a valid JSON object`.

**Resolution Steps:**
- Validate the JSON using a JSON validator.
- Ensure the JSON object does not reference undefined input data, which may happen if the incoming data lacks consistent fields.

## Can't get data for expression

This error occurs when n8n cannot retrieve the data referenced by an expression, often because the preceding node hasn't run yet. The error may appear as `Referenced node is unexecuted`, indicating the specific node that hasn't executed.

**Resolution Steps:**
- Test the workflow up to the named node.
- For nodes using JavaScript or custom code, check if a previous node has executed before accessing its value:
  
  ```javascript
  $("<node-name>").isExecuted
  ```
  
**Example:**
To demonstrate the error with referenced input data parameters:
  
```javascript
{
  "my_field_1": {{ $input.params }}
}
```

## Invalid Syntax

This error appears when an expression contains a syntax error. For example, a trailing period may cause an invalid syntax error.

**Example of Invalid Syntax:**
  
```javascript
{
  "my_field_1": "value",
  "my_field_2": {{ $('If').item.json. }}
}
```

**Resolution Steps:**
- Verify the expression syntax to ensure it follows the expected format.

----------------------------------------

# Examples using n8n's HTTP Request Node

The HTTP Request node is one of the most versatile nodes in n8n. Use this node to make HTTP requests to query data from any app or service with a REST API.

## Node Reference
Refer to [HTTP Request](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) for information on node settings.

## Pagination
Refer to the pagination section for strategies on handling multiple pages of data in requests.

## Best Practices
- Use HTTP Request node for interacting with any REST API service.
- Always handle authentication requirements as specified by the API documentation. 

## Related Resources
- [HTTP Request Node Details](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)
- [Built-in Methods and Variables Reference](https://docs.n8n.io/code/builtin/overview/)
- [Expressions Documentation](https://docs.n8n.io/code/expressions/)

----------------------------------------

# Pagination in the HTTP Request Node

The HTTP Request node supports pagination, which allows fetching data across multiple pages depending on the API implementation. 

## Enable Pagination

In the HTTP Request node, select **Add Option** > **Pagination**.

## Use a URL from the Response to Get the Next Page Using `$response`

1. Set **Pagination Mode** to **Response Contains Next URL**.
2. In **Next URL**, use an expression to set the URL. For example:
   ```json
   {
     "next-url": "{{ $response.body['next-page'] }}"
   }
   ```

## Get the Next Page by Number Using `$pageCount`

1. Set **Pagination Mode** to **Update a Parameter in Each Request**.
2. Set **Type** to **Query**.
3. Enter the **Name** of the query parameter. Example:
   - **Name**: `page`
4. Hover over **Value** and toggle **Expression** on.
5. Enter `{{ $pageCount + 1 }}`

`$pageCount` starts at zero, so adding `+1` fetches the next page progressively.

## Navigate Pagination Through Body Parameters

1. Set the HTTP Request Method to **POST**.
2. Set **Pagination Mode** to **Update a Parameter in Each Request**.
3. Select **Body** in the **Type** parameter.
4. Enter the **Name** of the body parameter. Example:
   - **Name**: `page`
5. Hover over **Value** and toggle **Expression** on.
6. Enter `{{ $pageCount + 1 }}`

## Set the Page Size in the Query

1. Select **Send Query Parameters** in the main node parameters.
2. Enter the **Name** of the query parameter to set page size. Example:
   - **Name**: `limit`
3. In **Value**, enter your page size.

----------------------------------------

# Query JSON with JMESPath

## JMESPath
JMESPath is a query language for JSON that allows extraction and transformation of elements from a JSON document.

## The `jmespath()` Method
n8n provides a method called `jmespath()` for searching a JSON object using the JMESPath query language.

### Basic Syntax
```javascript
$jmespath(object, searchString)
```
```python
_jmespath(object, searchString)
```

### Example
Equivalent JavaScript for understanding:
```javascript
var jmespath = require('jmespath');
jmespath.search(object, searchString);
```
- `object`: A JSON object (e.g., output of a previous node).
- `searchString`: An expression in JMESPath.

### Search Parameter Order
In JMESPath examples, the order is `search(searchString, object)`; however, n8n uses `search(object, searchString)`.

## Common Tasks
Examples for common operations using JMESPath:

### Apply a JMESPath Expression
Given this JSON:
```json
[
  {
    "body": {
      "people": [
        {"first": "James", "last": "Green"},
        {"first": "Jacob", "last": "Jones"},
        {"first": "Jayden", "last": "Smith"}
      ],
      "dogs": {
        "Fido": {"color": "brown", "age": 7},
        "Spot": {"color": "black and white", "age": 5}
      }
    }
  }
]
```

#### Retrieve First Names
```javascript
{{$jmespath($json.body.people, "[*].first")}} // Returns ["James", "Jacob", "Jayden"]
```
```javascript
let firstNames = $jmespath($json.body.people, "[*].first")
return {firstNames}; // Returns: [{"firstNames": ["James", "Jacob", "Jayden"]}]
```
```python
firstNames = _jmespath(_json.body.people, "[*].first")
return {"firstNames": firstNames} // Returns: [{"firstNames": ["James", "Jacob", "Jayden"]}]
```

#### Slice of First Names
```javascript
{{$jmespath($json.body.people, "[:2].first")}} // Returns ["James", "Jacob"]
```
```javascript
let firstTwoNames = $jmespath($json.body.people, "[:2].first");
return {firstTwoNames}; // Returns: [{"firstNames": ["James", "Jacob"]}]
```
```python
firstTwoNames = _jmespath(_json.body.people, "[:2].first")
return {"firstTwoNames": firstTwoNames} // Returns: [{"firstTwoNames": ["James", "Jacob"]}]
```

#### Retrieve Dogs' Ages
```javascript
{{$jmespath($json.body.dogs, "*.age")}} // Returns [7,5]
```
```javascript
let dogsAges = $jmespath($json.body.dogs, "*.age");
return {dogsAges}; // Returns: [{"dogsAges": [7, 5]}]
```
```python
dogsAges = _jmespath(_json.body.dogs, "*.age")
return {"dogsAges": dogsAges} // Returns: [{"dogsAges": [7, 5]}]
```

### Select Multiple Elements
Use Multiselect to extract first and last names into a new list:
```javascript
{{$jmespath($json.body.people, "[].[first, last]")}} // Returns [["James","Green"],["Jacob","Jones"],["Jayden","Smith"]]
```
```javascript
let newList = $jmespath($json.body.people, "[].[first, last]");
return {newList}; // Returns: [{"newList": [["James","Green"], ["Jacob","Jones"], ["Jayden","Smith"]]}]
```
```python
newList = _jmespath(_json.body.people, "[].[first, last]")
return {"newList": newList} // Returns: [{"newList": [["James","Green"], ["Jacob","Jones"], ["Jayden","Smith"]]}]
```

### Alternative to Arrow Functions
To search for an object by name:
```javascript
{{ $jmespath($("Code").all(), "[?json.name=='Lenovo'].json.category_id") }}
```

----------------------------------------

# Date and Time with Luxon

## Core Concepts
Luxon is a JavaScript library designed for working with date and time more easily. In n8n, dates are passed between nodes as strings, requiring parsing. Luxon simplifies this process.

## Variables
n8n creates two custom Luxon variables:
- `now`: A Luxon object representing the current timestamp (equivalent to `DateTime.now()`).
- `today`: A Luxon object representing the current timestamp rounded down to the day (equivalent to `DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })`).

## Date and Time Behavior in n8n
- Dates are converted to strings between nodes in a workflow.
- To convert a string to a date with Luxon, use `DateTime.fromISO('date_string')` or `DateTime.fromFormat('date_string', 'format')`.

## Setting the Timezone
Luxon uses the n8n timezone, which can be:
- Default: `America/New York`
- Custom timezone set via the `GENERIC_TIMEZONE` environment variable or for an individual workflow.

## Common Tasks

### Convert Date String to Luxon
#### Supported Standard Format
Use `fromISO()` for ISO 8601 strings:
```javascript
{{DateTime.fromISO('2019-06-23T00:00:00.00')}}
let luxonDateTime = DateTime.fromISO('2019-06-23T00:00:00.00');
```

#### Non-Standard Format
Use `fromFormat()` with a format string:
```javascript
{{DateTime.fromFormat("23-06-2019", "dd-MM-yyyy")}}
let newFormat = DateTime.fromFormat("23-06-2019", "dd-MM-yyyy");
```

### Get n Days from Today
To calculate a date offset from today:
```javascript
{{$today.minus({days: 7})}}
let sevenDaysAgo = $today.minus({days: 7});
```

### Create Human-Readable Dates
Format the date to a human-readable format:
```javascript
{{$today.minus({days: 7}).toLocaleString()}}
let readableSevenDaysAgo = $today.minus({days: 7}).toLocaleString();
```

### Get the Time Between Two Dates
Use the `diff` feature for calculating durations:
```javascript
{{DateTime.fromISO('2019-06-23').diff(DateTime.fromISO('2019-05-23'), 'months').toObject()}}
let monthsBetweenDates = DateTime.fromISO('2019-06-23').diff(DateTime.fromISO('2019-05-23'), 'months').toObject();
```

### A Longer Example: Countdown to Christmas
To create a countdown to Christmas:
```javascript
{{"There are " + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + " days to Christmas!"}}
let daysToChristmas = "There are " + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + " days to Christmas!";
```

## References
- [Luxon API Documentation](https://moment.github.io/luxon/api-docs/index.html)
- [DateTime fromISO](https://moment.github.io/luxon/api-docs/index.html#datetimefromiso)
- [DateTime fromFormat](https://moment.github.io/luxon/#/parsing?id=ad-hoc-parsing)
- [DateTime Diff](https://moment.github.io/luxon/#/math?id=diffs)

----------------------------------------

# Expressions

Expressions are a feature in n8n nodes that enable dynamic parameter settings based on data from previous node executions, the workflow, or the n8n environment. JavaScript can be executed within an expression, facilitating data manipulation without extensive code.

n8n utilizes a templating language called Tournament, enhanced with custom methods, variables, and data transformation functions to streamline tasks like accessing data from other nodes and workflow metadata.

## Supported Libraries
- **Luxon**: Library for working with dates and time.
- **JMESPath**: Library for querying JSON data.

## Writing Expressions

To set a parameter value using an expression:
1. Hover over the parameter.
2. Select **Expressions** in the **Fixed/Expression** toggle.
3. Write your expression in the parameter or use the **Open expression editor** to access available data in the **Variable selector**. All expressions follow this format: `{{ your expression here }}`.

### Example: Get Data from Webhook Body
To extract the value of `city` from the webhook body:

Webhook data example:
```json
[
  {
    "headers": {
      "host": "n8n.instance.address"
    },
    "params": {},
    "query": {},
    "body": {
      "name": "Jim",
      "age": 30,
      "city": "New York"
    }
  }
]
```

Expression to access `city`:
```javascript
{{$json.body.city}}
```
Alternatively:
```javascript
{{$json['body']['city']}}
```

### Example: Writing Longer JavaScript
n8n expressions are limited to single lines of JavaScript. Multi-line or variable assignments are not permitted.

Invalid example:
```javascript
{{ 
  function example() { 
    let end = DateTime.fromISO('2017-03-13'); 
    let start = DateTime.fromISO('2017-02-13'); 
    let diffInMonths = end.diff(start, 'months'); 
    return diffInMonths.toObject(); 
  } 
  example(); 
}}
```

Valid example:
```javascript
{{DateTime.fromISO('2017-03-13').diff(DateTime.fromISO('2017-02-13'), 'months').toObject()}}
```

## Common Issues
For common errors or issues with expressions and suggested resolutions, refer to the [Common Issues](https://docs.n8n.io/code/cookbook/expressions/common-issues/) documentation.

----------------------------------------

# Custom Variables in n8n

## Feature Availability
- Available on Self-hosted Enterprise and Pro Cloud plans.
- Requires access to the n8n instance owner account to create and edit variables. All users can use existing variables.
- Available in version 0.225.0 and above.

## Definitions
- Custom variables are read-only variables used to store and reuse values in n8n workflows.
- Variables are shared within the n8n instance.

## Create Variables
To create a new variable:
1. On the **Variables** page, select **Add Variable**.
2. Enter a **Key** and **Value**. 
   - Maximum key length: 50 characters
   - Maximum value length: 220 characters
   - Allowed characters: Lowercase and uppercase letters, numbers, and underscores (`A-Z`, `a-z`, `0-9`, `_`).
3. Select **Save**. The variable is now available for use in all workflows in the n8n instance.

## Edit and Delete Variables
To edit or delete a variable:
1. On the **Variables** page, hover over the variable you want to change.
2. Select **Edit** or **Delete**.

## Use Variables in Workflows
You can access variables in the Code node and in expressions:

```javascript
// Access a variable
$vars.<variable-name>
```

- All variables are treated as strings during workflow execution. 
- If a variable has no value, it is treated as `undefined`. 
- Workflows do not automatically fail in this case.
- Variables are read-only; changes must be made through the UI.
- For custom data within workflows, use [Workflow static data](https://docs.n8n.io/code/cookbook/builtin/get-workflow-static-data/).

----------------------------------------

## Available Courses

- **Level 1: Beginner course**: [Link to course](https://docs.n8n.io/courses/level-one/)
- **Level 2: Intermediate course**: [Link to course](https://docs.n8n.io/courses/level-two/)

## Workflows

- [Creating an API endpoint](https://n8n.io/workflows/1750-creating-an-api-endpoint/)
- [AI agent chat](https://n8n.io/workflows/1954-ai-agent-chat/)
- [Scrape and summarize webpages with AI](https://n8n.io/workflows/1951-scrape-and-summarize-webpages-with-ai/)
- [Very quick quickstart](https://n8n.io/workflows/1700-very-quick-quickstart/)
- [Pulling data from services that n8n doesn’t have a pre-built integration for](https://n8n.io/workflows/1748-pulling-data-from-services-that-n8n-doesnt-have-a-pre-built-integration-for/)
- [Joining different datasets](https://n8n.io/workflows/1747-joining-different-datasets/)
- [Back Up Your n8n Workflows To Github](https://n8n.io/workflows/1534-back-up-your-n8n-workflows-to-github/)
- [OpenAI GPT-3: Company Enrichment from website content](https://n8n.io/workflows/1862-openai-gpt-3-company-enrichment-from-website-content/)
- [AI agent that can scrape webpages](https://n8n.io/workflows/2006-ai-agent-that-can-scrape-webpages/)
- [Convert JSON to an Excel file](https://n8n.io/workflows/1435-convert-json-to-an-excel-file/)

----------------------------------------

# Level One: Introduction to n8n

## Course Overview
This course introduces fundamental concepts within n8n and develops low-code automation expertise. 

### Learning Objectives
By the end of this course, you will know how to:
- Set up n8n and navigate the Editor UI.
- Structure data within n8n.
- Configure node parameters and add credentials.
- Utilize conditional logic in workflows.
- Schedule and control workflows.
- Import, download, and share workflows.

### Workflow Projects
You will build two workflows:
- A two-node workflow to retrieve articles from Hacker News.
- A seven-node workflow to extract records from a data warehouse, filter and calculate results, and notify team members.

## Prerequisites
1. **n8n Setup**: Use [n8n Cloud](https://docs.n8n.io/manage-cloud/overview/) or the [self-hosted version](https://docs.n8n.io/hosting/installation/docker/).
2. **User ID**: Obtain a unique ID and credentials by signing up.
3. Basic knowledge of JavaScript and APIs is beneficial but not required.
4. An account on the n8n community forum to receive a profile badge upon completion.

## Course Duration
The course should take approximately **two hours** to complete.

## Completion Criteria
To complete the course, you must:
- Build the [main workflow](https://docs.n8n.io/courses/level-one/chapter-5/chapter-5.1/).
- Pass the [quiz](https://n8n-community.typeform.com/to/JMoBXeGA) at the end.

## Progress Tracking
You can check your course progress by verifying your unique ID [here](https://internal.users.n8n.cloud/webhook/course-level-1/verify). Completion rewards include a badge and avatar for forum profiles.

----------------------------------------

# Navigating the Editor UI

## n8n Version
This documentation is based on n8n version 1.82.1.

## Getting Started
- To set up n8n, use [n8n Cloud](https://app.n8n.cloud/register) (recommended) or [self-host with Docker](https://docs.n8n.io/hosting/installation/docker/).

## Editor UI Settings
The Editor UI is where you build workflows. Access workflows and credentials here.

### Left-side Panel
Contains the following sections:
- **Overview**: All accessible workflows and credentials.
- **Projects**: Groups workflows and credentials (available on paid plans).
- **Admin Panel**: Access usage, billing, and version settings (n8n Cloud only).
- **Templates**: Pre-made workflows for common use cases.
- **Variables**: Store and access data (available on Pro and Enterprise Plans).
- **All executions**: Information about workflow executions.
- **Help**: Resources around n8n products and community.
- **Update**: Shows recent product updates.
- **Settings**: Manage users and access settings (under `...` menu).

### Top Bar
- **Workflow Name**: Edit name of the workflow.
- **+ Add Tag**: Organize workflows with optional tags.
- **Inactive/Active Toggle**: Activate/deactivate current workflow.
- **Share**: Collaborate on workflows (available on paid plans).
- **Save**: Save the workflow.
- **History**: View previous versions of the workflow.

### Canvas
The canvas is the area where you add nodes:
- **Execute Workflow**: Runs all nodes in sequence.
- **Add Node**: Opens the nodes panel.
- **Sticky Note**: Add notes to the canvas.
- **Add First Step**: Where to add the first node.

### Moving the Canvas
- **Ctrl + Left Button Mouse**: Move around.
- **Middle Button Mouse**: Move around.
- **Two Fingers on Touchpad**: Slide to move.

## Nodes
Nodes are the building blocks of a workflow.

### Node Types
1. **App/Action Nodes**: Add, remove, edit data; external data interactions.
2. **Trigger Nodes**: Start workflows and supply initial data.
3. **Core Nodes**: Provide functionalities like logic, scheduling, generic API calls.
4. **Cluster Nodes**: Groups that work together for AI workflows.

### Finding Nodes
Open the Nodes Panel:
- Click **+** in the top corner.
- Click **+** on an existing node.
- Press `Tab`.

### Adding Nodes
Add nodes by:
- Selecting from the nodes panel (connects automatically).
- Dragging and dropping onto the canvas.

### Node Buttons
On hovering over a node:
- **Execute Node**: Play icon.
- **Deactivate/Activate Node**: Power icon.
- **Delete Node**: Trash icon.
- Ellipsis icon: Opens a context menu with other node options.

### Moving a Workflow
Select all nodes with mouse or `Ctrl + A`, then drag to reposition.

## Summary
This document detailed navigation of the Editor UI, key components, and node handling within n8n workflows.

----------------------------------------

# Building a Mini-workflow

## Steps:

1. **Add a Manual Trigger node**
2. **Add the Hacker News node**
3. **Configure the Hacker News node**
4. **Execute the node**
5. **Save the workflow**

## 1. Add a Manual Trigger node

- Search for the **Manual Trigger** node and add it to the canvas.

## 2. Add the Hacker News node

- Search for the **Hacker News** node.
- Select **Get many items** action.

## 3. Configure the Hacker News node

### Parameters

- **Resource**: All
- **Operation**: Get Many
- **Limit**: 10
- **Additional Fields** > **Add Field** > **Keyword**: automation

### Settings

- **Notes**: Get the 10 latest articles.
- **Display note in flow?**: true

## 4. Execute the node

- Select the **Execute step** button in the node details window to view results.

### Node Executions

- A green checkmark indicates successful execution.
- Output is displayed in **Table**, **JSON**, and **Schema** formats.

## 5. Save the workflow

- Click **Back to canvas**.
- Rename the workflow to "Hacker News workflow".
- Save using **Ctrl + S** or **Cmd + S** or select the **Save** button.

## Summary

Built a mini-workflow to fetch articles from Hacker News using Manual Trigger and Hacker News node, configured parameters and settings, executed the workflow, and saved it.

----------------------------------------

# Automating a Real-world Use Case

## Scenario Overview
Nathan, an Analytics Manager at ABCorp, needs to automate the weekly sales reporting process. He collects sales data from a legacy data warehouse that lacks a CSV export option, but recent API endpoints have been added to expose the data.

### Key Tasks to Automate
1. Calculate the sum of all "Booked" sales orders.
2. Announce the total in the company Discord every Monday.
3. Create a spreadsheet of all "Processing" sales for review by Sales Managers.

## API Integration
Nathan’s legacy data warehouse provides API endpoints that allow for the retrieval and management of sales data. The integration with n8n allows for the automation of retrieving this data and performing the necessary calculations.

### API Requirements
- Ensure API endpoints are available for data retrieval.
- Implement custom code if necessary to structure data for n8n workflows. 

## Workflow Implementation
1. **Collect Data**: Use HTTP Request node to fetch data from the API.
2. **Process Data**: Use Functions or Code nodes to calculate totals and organize data.
3. **Output Data**: Send results to Discord using the Discord node and create a spreadsheet with Google Sheets or another relevant integration. 

### Example API Request (Pseudo-code):
```javascript
const fetchSalesData = async () => {
    const response = await fetch('https://api.abcorpsalesdata.com/sales');
    const data = await response.json();
    return data;
};
```

----------------------------------------

# Designing the Workflow

## Workflow Steps
1. Get data from the data warehouse (order id, order status, order value, employee name)
2. Filter orders by status (Processing or Booked)
3. Calculate total value of Booked orders
4. Notify team members about Booked orders in Discord
5. Insert details of Processing orders into Airtable
6. Schedule workflow to run every Monday morning

## Key Integrations
- **Discord**: For notifications about Booked orders
- **Airtable**: For inserting details about Processing orders

## Workflow Structure
To build this workflow, the following nodes would be involved:
- Data retrieval node (From the data warehouse)
- Filter node (To filter orders by status)
- Calculation node (To calculate total of Booked orders)
- Discord integration node (For notifications)
- Airtable integration node (To insert data)
- Cron node (To schedule the workflow on Mondays)

## Credentials
Use credentials received via email upon signing up for the course for accessing necessary integrations.

----------------------------------------

# Getting Data from the Data Warehouse

## Create New Workflow

1. Open the Editor UI and create a new workflow:
   - Select `Ctrl` + `Alt` + `N` or `Cmd` + `Option` + `N`.
   - Open the left menu, navigate to **Workflows**, and select **Add workflow**.
2. Name the workflow "Nathan's workflow."

## Add an HTTP Request Node

1. In the Editor UI, add an **HTTP Request** node.
2. Configure parameters for the HTTP Request node:
   - **Method**: Ensure it is set to `GET`.
   - **URL**: Add the **Dataset URL** received via email.
   - **Send Headers**: Toggle to true. Ensure **Using Fields Below** is selected.
     - **Header Parameters**:
       - **Name**: `unique_id`
       - **Value**: The Unique ID received via email.
   - **Authentication**: 
     - Select **Generic Credential Type**.
     - **Generic Auth Type**: Select **Header Auth**.
     - **Credential for Header Auth**: 
       - Click **\+ Create new credential**.
       - In the Credentials window, set:
         - **Name**: Header Auth name received via email.
         - **Value**: Header Auth value received via email.
       - Select **Save** to save your credentials.

## Get the Data

1. Select the **Execute step** button in the HTTP Request node window.
2. The output will be a table view showing the results of the HTTP request with the following data structure:
   - `orderID`: The unique ID of each order.
   - `customerID`: The unique ID of each customer.
   - `employeeName`: The name of the colleague responsible for the customer.
   - `orderPrice`: The total price of the customer's order.
   - `orderStatus`: The customer's order status (`booked` or `processing`).

----------------------------------------

# Inserting Data into Airtable

## Core Concepts

To insert data into Airtable using n8n, an Airtable node is utilized in conjunction with the HTTP Request node.

## Node & Parameter Details

- **Airtable Node**
  - **Credential to connect with**
    - **Access token**: Follow the instructions from the Airtable credential page for token creation.
  - **Resource**: Record
  - **Operation**: Create
  - **Base**: Select from a list of available Airtable bases.
  - **Table**: Specify the target table (e.g., orders).
  - **Mapping Column Mode**: Map automatically (requires matching field names).

## Configuration Instructions

1. **Create an Airtable Account**: Sign up for an Airtable account.
2. **Set Up a New Base**: 
   - In your Airtable workspace, create a new base named (e.g., "beginner course").
3. **Prepare the Table**:
   - Rename the default table from "Table 1" to "orders."
   - Delete the default records.
   - Remove the `Notes`, `Assignee`, and `Status` fields.
   - Edit the primary field `Name` to `orderID` (Number type).
   - Add the following fields:

| Field Name     | Field Type       |
|----------------|------------------|
| `orderID`      | Number           |
| `customerID`   | Number           |
| `employeeName` | Single line text  |
| `orderPrice`   | Number           |
| `orderStatus`  | Single line text  |

## Workflow Pattern

1. Add an **Airtable Node** connected to the **HTTP Request Node**.
2. Configure the Airtable node with the appropriate parameters listed above.
3. Execute the Airtable node once the configuration is complete.

## Test the Airtable Node

Execute the Airtable node by selecting **Execute step** to insert the data. All data records from the HTTP Request node will populate the orders table in Airtable.

## Best Practices

- Ensure that the field names in Airtable match exactly with the incoming data from the HTTP Request node to enable automatic mapping.
- Test the integration with a small set of data to confirm proper configuration before scaling up.

----------------------------------------

# Filtering Orders

## Core Concepts

**Conditional Logic**: A method to control the flow of data based on defined conditions. In n8n, this is achieved using nodes like the If node and the Switch node.

## Node & Parameter Details

### If Node
- **Description**: Splits a workflow based on conditional logic.
- **Parameters**:
  - `value1`: Input from another node, e.g., `{{ $json.orderStatus }}`
  - `Operation`: Defines how to compare values, e.g., `String is equal to`
  - `value2`: The value to compare against, e.g., `processing`

### Switch Node
- **Description**: Similar to the If node but can handle multiple outputs.

## Configuration Instructions

### Adding the If Node
1. Hover over the arrow connection between the **HTTP Request** node and the **Airtable** node.
2. Select the **+** sign to add the If node.

### Configuring the If Node
1. Set `value1` to `{{ $json.orderStatus }}` using:
   - Hover over the `value1` field, select the **Expression** tab, and open the expression editor.
   - Drag **HTTP Request** > **orderStatus** into the **Expression** field.
2. Set **Operation** to `String is equal to`.
3. Set `value2` to `processing`.
4. Select the correct data type (boolean, date & time, number, string) for the operation.

### Inserting Data into Airtable
1. Connect the Airtable node to the If node's `true` connector.
2. Open the Airtable node window and select **Execute step** to verify data insertion based on `orderStatus`.

## Best Practices
- Only insert necessary fields to improve performance and reduce computational load. Retaining unneeded fields can slow down data processing and increase storage requirements.

----------------------------------------

# Setting Values for Processing Orders

In this step of the workflow, you will learn how to select and set data before transferring it to Airtable using the Edit Fields (Set) node.

## Edit Fields (Set) Node

The Edit Fields node can set completely new data as well as overwrite existing data. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values into spreadsheets or databases.

## Configure the Edit Fields Node

1. Ensure **Mode** is set to **Manual Mapping**.
2. Drag the fields from the **Input** into the **Fields to Set**:
   - Drag **If** \> **orderID** as the first field.
   - Drag **If** \> **employeeName** as the second field.
3. Ensure that **Include Other Input Fields** is set to false.

Select **Execute step**.

## Add Data to Airtable

1. Go to your Airtable base.
2. Add a new table called `processingOrders`.
3. Replace the existing columns with two new columns:
   - `orderID` (primary field): Number
   - `employeeName`: Single line text
4. Delete three empty rows in the new table.
5. Connect the Edit Fields node **connector to the** Airtable node.
6. Update the Airtable node configuration to point to the new `processingOrders` table instead of the `orders` table.
7. Test your Airtable node to ensure it inserts records into the new `processingOrders` table.

----------------------------------------

# Calculating Booked Orders

## Code Node Overview

The **Code node** in n8n allows you to write custom JavaScript code for processing data. It operates in two modes:
- **Run Once for All Items**: Processes all input items as a group.
- **Run Once for Each Item**: Executes code for each input item individually.

Data passed between nodes is structured as an array of objects in the following JSON format:

```json
[
    {
        "json": {
            "apple": "beets",
            "carrot": {
                "dill": 1
            }
        },
        "binary": {
            "apple-picture": {
                "data": "....",
                "mimeType": "image/png",
                "fileExtension": "png",
                "fileName": "example.png"
            }
        }
    },
    ...
]
```

## Configure the Code Node

To calculate total booked orders and their value, configure the Code node with the following settings:
- Connect the Code node to the `false` branch of the **If node**.
- **Mode**: Select **Run Once for All Items**.
- **Language**: Select **JavaScript**.

### JavaScript Code Example

Place the following code in the **Code** box:

```javascript
let items = $input.all();
let totalBooked = items.length;
let bookedSum = 0;
for (let i = 0; i < items.length; i++) {
    bookedSum += items[i].json.orderPrice;
}
return [{ json: { totalBooked, bookedSum } }];
```

### Return Format

Ensure to return the result in the following format:

```javascript
return [{ json: { totalBooked, bookedSum } }];
```

## Error Handling

If the data structure is incorrect, an error will be shown: `Error: Always an Array of items has to be returned!`

Execute the step to view the output of the Code node.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# Notifying the Team

## Overview
This section describes how to send messages to a Discord channel using the Discord node in n8n workflows.

## Discord Node Configuration

1. **Add a Discord node connected to the Code node.**
   
2. **Select Message Action:**
   - Choose **Send a message**.

3. **Configure the following parameters:**
   - **Connection Type**: Select **Webhook**.
   - **Credential for Discord Webhook**: 
     - Select **Create New Credential**. 
     - Copy the **Webhook URL** from the course sign-up email and paste it into the **Webhook URL** field.
     - Select **Save** and close the credentials dialog.
   - **Operation**: Select **Send a Message**.
   - **Message**:
     - Select the **Expression** tab on the right side of the Message field.
     - Use the following expression:

      ```json
      {
        "text": "This week we've {{$json[\"totalBooked\"]}} booked orders with a total value of {{$json[\"bookedSum\"]}}. My Unique ID: {{ $('HTTP Request').params[\"headerParameters\"][\"parameters\"][0][\"value\"] }}"
      }
      ```

4. **Execute the step** in the Discord node. If configured correctly, the message should appear in the specified Discord channel (`#course-level-1`).

----------------------------------------

# Scheduling the Workflow

## Schedule Trigger Node

To schedule your workflow to run automatically, use the **Schedule Trigger** node, which allows workflows to run periodically based on fixed dates, times, or intervals.

### Removing the Manual Trigger Node

1. Select the Manual Trigger node connected to your HTTP Request node.
2. Click the trash can icon to delete it.

### Adding the Schedule Trigger Node

1. Open the nodes panel and search for **Schedule Trigger**.
2. Select the Schedule Trigger from the search results.

#### Schedule Trigger Configuration Parameters

- **Trigger Interval**: Select **Weeks**.
- **Weeks Between Triggers**: Enter `1`.
- **Trigger on weekdays**: Select **Monday** (remove **Sunday** if added by default).
- **Trigger at Hour**: Select **9am**.
- **Trigger at Minute**: Enter `0`.

**Important Note**: Set the correct timezone for your [n8n instance](https://docs.n8n.io/manage-cloud/set-cloud-timezone/) or the [workflow's settings](https://docs.n8n.io/workflows/settings/). The Schedule Trigger node will use the workflow's timezone if set; otherwise, it will fall back to the n8n instance's timezone.

### Connecting the Schedule Trigger Node

Return to the canvas and connect your Schedule Trigger node to the HTTP Request node by dragging the arrow from it to the HTTP Request node.

----------------------------------------

# Activating and Examining the Workflow

## Activating a Workflow

To activate your workflow, set the **Inactive** toggle in the top navigation of the Editor UI to be **Activated**. A workflow will run automatically every time a trigger node receives input or meets a condition. 

## Workflow Executions

- An execution represents a completed run of a workflow, from the first to the last node.
- n8n logs workflow executions, allowing you to see if the workflow succeeded or failed.
- To view the executions for a specific workflow, switch to the **Executions** tab when the workflow is open.
- To access the execution log for the entire n8n instance:
  - Select **Overview**
  - Then select the **Executions** tab in the main panel.

### Executions Window Information

- **Name**: The name of the workflow
- **Started At**: The date and time when the workflow started
- **Status**: The workflow status (Waiting, Running, Succeeded, Cancelled, or Failed) and execution duration
- **Execution ID**: The ID of the workflow execution

You can filter displayed **Executions** by workflow and by status: **Any Status**, **Failed**, **Cancelled**, **Running**, **Success**, or **Waiting**.

## Workflow Settings

Access the **Workflow Settings** by selecting the three dots in the upper right corner of the Editor UI when the workflow is open, then select **Settings**. 

### Configurable Settings

- **Execution Order**: Choose the execution logic for multi-branch workflows (default is `v1`).
- **Error Workflow**: A workflow to run if the current workflow fails.
- **This workflow can be called by**: Workflows allowed to call this workflow using the **Execute Sub-workflow node**.
- **Timezone**: The timezone for the current workflow, important for the **Schedule Trigger node**.
- **Save failed production executions**: Set if execution data should be saved when it fails (default is to save).
- **Save successful production executions**: Set if execution data should be saved when it succeeds (default is to save).
- **Save manual executions**: Set if executions started from the Editor UI should be saved (default is to save).
- **Save execution progress**: Set if execution data of each node should be saved (default is to not save).
- **Timeout Workflow**: Whether to cancel a workflow execution after a specific period of time (default is to not timeout).

----------------------------------------

# Exporting and Importing Workflows

## Workflows as JSON Files
You can save n8n workflows locally as JSON files. This allows sharing workflows with others or importing workflows from them.

### Sharing Credentials
Exported workflow JSON files include credential names and IDs. While IDs aren't sensitive, names could be. HTTP Request nodes may include authentication headers when imported from cURL. Remove or anonymize this information before sharing.

## Export and Import Methods
You can export and import workflows in three ways:

### 1. From the Editor UI Menu
- **Export**: From the top navigation bar, select the three dots in the upper right, then select **Download** to download the current workflow as a JSON file.
- **Import**: From the top navigation bar, select the three dots in the upper right, then select **Import from URL** (to import a published workflow) or **Import from File** (to import from a JSON file).

### 2. From the Editor UI Canvas
- **Export**: Select all nodes on the canvas and use `Ctrl` + `C` to copy the workflow JSON, which can be pasted into a file or shared directly.
- **Import**: Paste copied workflow JSON directly into the canvas with `Ctrl` + `V`.

### 3. From the Command Line
- **Export**: Refer to the [full list of commands](https://docs.n8n.io/hosting/cli-commands/) for exporting workflows or credentials.
- **Import**: Refer to the [full list of commands](https://docs.n8n.io/hosting/cli-commands/#import-workflows-and-credentials) for importing workflows or credentials.

----------------------------------------

# Quiz Information

- Pass the quiz with a minimum of 80% correct answers in each part.
- The quiz can be taken multiple times.
- There is no time limit for answering the questions.

----------------------------------------

# Level Two Course Overview

## Course Objectives
- Automate complex business processes.
- Utilize n8n data structures.
- Process various data types: XML, HTML, date, time, and binary data.
- Merge data from different sources: database, spreadsheet, CRM.
- Employ functions and JavaScript in the [Code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/).
- Manage error workflows.

## Prerequisites
- **n8n setup**: Use the [self-hosted version](https://docs.n8n.io/hosting/installation/npm/) or [n8n Cloud](https://docs.n8n.io/manage-cloud/overview/).
- **User ID**: Obtain a unique ID for course credentials.
- **Basic n8n skills**: Recommended to complete the [Level 1 course](https://docs.n8n.io/courses/level-one/).
- **Basic JavaScript understanding**.

## Course Duration
- Estimated completion time: **two hours**.

## Course Completion
- Milestones to demonstrate acquisition of knowledge:
  - Build the [main workflow](https://docs.n8n.io/courses/level-two/chapter-5/chapter-5.0/).
  - Pass the course [quiz](https://n8n-community.typeform.com/to/r9hDbytg).

## Progress Tracking
- Track progress using a unique ID at [progress verification](https://internal.users.n8n.cloud/webhook/course-level-2/verify).

----------------------------------------

# Understanding the Data Structure

## Data structure of n8n

n8n nodes function as an Extract, Transform, Load (ETL) tool. Data between nodes must be in a format recognized by each node, specifically an array of objects.

### Array of Objects
- An **array** is a list of values, which can be empty or contain several elements, identified by index starting from 0.
- An **object** stores key-value pairs, where values can be accessed via key names.

**Example:**
```javascript
var turtles = [
	{
		name: 'Michelangelo',
		color: 'orange',
	},
	{
		name: 'Donatello',
		color: 'purple',
	},
	{
		name: 'Raphael',
		color: 'red',
	},
	{
		name: 'Leonardo',
		color: 'blue',
	}
];
```

Data sent from one node to another is structured as an array of JSON objects, termed as **items**.

## Creating Data Sets with the Code Node

Use the **Code node** to define your array of objects as follows:

**Example:**
```javascript
return [
	{
		json: {
			apple: 'beets',
		}
	}
];
```

To represent Ninja turtles:
```javascript
var turtles = [
	{ json: { name: 'Michelangelo', color: 'orange' } },
	{ json: { name: 'Donatello', color: 'purple' } },
	{ json: { name: 'Raphael', color: 'red' } },
	{ json: { name: 'Leonardo', color: 'blue' } }
];
```

### JSON Objects
Each object in the array must have a `json` key. If omitted, n8n (version 0.166.0 and above) will add it automatically.

### Nested Pairs
To define additional properties, wrap key-value pairs in `{}`.

## Exercise

In a Code node, create an array of objects named `myContacts`:
**Example:**
```javascript
var myContacts = [
	{
		json: {
			name: 'Alice',
			email: {
				personal: 'alice@home.com',
				work: 'alice@wonderland.org'
			},
		}
	},
	{
		json: {
			name: 'Bob',
			email: {
				personal: 'bob@mail.com',
				work: 'contact@thebuilder.com'
			},
		}
	},
];
return myContacts;
```

## Referencing Node Data with the Code Node

To reference data from previous nodes:
**Example:**
```javascript
let items = $input.all();
items[0].json.workEmail = items[0].json.email['work'];
return items;
```

## Transforming Data

To adapt incoming data to n8n's structure, consider:

### Operations for Data Transformation
- **Split Out Node:** Separate data items.
- **Aggregate Node:** Combine data items.

Use the **Code node** to modify structure with these functions:

- **Create Multiple Items from One Item:**
```javascript
return $input.first().json.data.map(item => {
	return {
		json: item
	}
});
```

- **Create a Single Item from Multiple Items:**
```javascript
return [
	{
		json: {
			data_object: $input.all().map(item => item.json)
		}
	}
];
```

## Exercise

1. Use the **HTTP Request node** to make a GET request to `https://pokeapi.co/api/v2/pokemon`.
2. Use the **Split Out node** to transform data in the `results` field.
3. Use the **Code node** with:
```javascript
let items = $input.all();
return items[0].json.results.map(item => {
	return {
		json: item
	}
});
```

----------------------------------------

# Processing Different Data Types

## HTML and XML Data

To process HTML or XML data in n8n workflows, use the **HTML node** or the **XML node**.

### HTML Node
- **Use Case**: Extract HTML content of a webpage using CSS selectors. Useful for web scraping.
  
Example:
1. **HTTP Request Node**:  
   - **Authentication**: None  
   - **Request Method**: GET  
   - **URL**: `https://blog.n8n.io/`

2. **HTML Node Configuration**:  
   - **Operation**: Extract HTML Content  
   - **Source Data**: JSON  
   - **JSON Property**: data  
   - **Extraction Values**:
     - **Key**: title  
     - **CSS Selector**: `.post .item-title a`  
     - **Return Value**: HTML  

### XML Node
- **Use Case**: Convert XML to JSON and vice versa.

Example:
1. **HTTP Request Node**:  
   - **URL**: `https://pokeapi.co/api/v2/pokemon`
   - **Authentication**: None  
   - **Request Method**: GET  

2. **XML Node Configuration**:  
   - **Mode**: JSON to XML  
   - **Property Name**: data  

## Date, Time, and Interval Data

### Data Types
- **DATE**: Formats include March 29 2022, 29-03-2022, 2022/03/29
- **TIME**: Formats include 08:30:00, 20:30
- **DATETIME**: Format 2022/03/29 08:30:00
- **TIMESTAMP**: Unix timestamp formats like 1616108400
- **YEAR**: Formats like 2022

### Nodes for Working with Dates
- **Date & Time Node**: Convert date and time data to different formats.
- **Schedule Trigger Node**: Schedule workflows to run at specific intervals.
- **Wait Node**: Pauses workflow execution.

Example:
1. **Customer Datastore Node**: Get All People action.
2. **Date & Time Node**: Round Up the created Date from the datastore to the End of Month.
   - Output Field Name: new-date.
   - Options: Include Input Fields.

## Binary Data

### Nodes for Binary Data Processing
- **HTTP Request Node**: To request and send files from/to web resources.
- **Read/Write Files from Disk Node**: To read and write files from/to the n8n machine.
- **Convert to File Node**: Convert input data to a file.
- **Extract From File Node**: Convert binary data to JSON.

### File Path Naming
- **npm**: `~/my_file.json`
- **n8n Cloud/Docker**: `/tmp/my_file.json`

### Binary Exercise 1 Example
1. Make an HTTP request to retrieve a PDF file:
   - URL: `https://media.kaspersky.com/pdf/Kaspersky_Lab_Whitepaper_Anti_blocker.pdf`.

2. Use the **Extract From File Node** to convert the PDF to JSON.

### Binary Exercise 2 Example
1. Make an HTTP request to the Poetry DB API:
   - URL: `https://poetrydb.org/random/1`.

2. Convert the returned data from JSON to binary:
   - Use **Convert to File Node** and then write to disk with **Read/Write Files From Disk Node**.

----------------------------------------

# Merging and Splitting Data

## Merging Data

Merging data involves creating one data set from multiple sources or synchronizing data between multiple systems (removing duplicates, updating data).

### One-way vs. Two-way Sync
- **One-way sync:** Data synchronized in one direction; changes in the main system reflect in the secondary system.
- **Two-way sync:** Data synchronized in both directions; changes in either system reflect in the other.

### Merge Node
In n8n, use the [Merge node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/) to merge data from two different nodes. The merging options include:
- [Append](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/#append)
- [Combine](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/#combine)
  - [Merge by Fields](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/#combine-by-matching-fields): requires input fields to match
  - [Merge by Position](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/#combine-by-position)
  - [Combine all possible combinations](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/#combine-by-all-possible-combinations)
- [Choose Branch](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/#choose-branch)

#### Property Input Fields
To reference nested values in the Merge node parameters `Input 1 Field` and `Input 2 Field`, use dot-notation format.

#### Example Workflow to Merge Data
1. Add a **Merge node** with `Input 1` from a **Customer Datastore node** and `Input 2` from a **Code node**.
2. In the **Customer Datastore node**, perform **Get All People** operation.
3. In the **Code node**, create an array with objects containing `name`, `language`, and `country` properties.
4. Experiment with different merge options in the **Merge node**.

### JSON Workflow Code Example for Merging
```json
{
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7"
  },
  "nodes": [
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "name",
              "field2": "name"
            }
          ]
        },
        "options": {}
      },
      "id": "578365f3-26dd-4fa6-9858-f0a5fdfc413b",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [720, 580]
    },
    {
      "parameters": {},
      "id": "71aa5aad-afdf-4f8a-bca0-34450eee8acc",
      "name": "When clicking \"Execute workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [260, 560]
    },
    {
      "parameters": {
        "operation": "getAllPeople"
      },
      "id": "497174fe-3cab-4160-8103-78b44efd038d",
      "name": "Customer Datastore (n8n training)",
      "type": "n8n-nodes-base.n8nTrainingCustomerDatastore",
      "typeVersion": 1,
      "position": [500, 460]
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    'name': 'Jay Gatsby',\n    'language': 'English',\n    'country': {\n      'code': 'US',\n      'name': 'United States'\n    }\n  }\n];"
      },
      "id": "387e8a1e-e796-4f05-8e75-7ce25c786c5f",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 720]
    }
  ],
  "connections": {
    "When clicking \"Execute workflow\"": {
      "main": [
        [
          {
            "node": "Customer Datastore (n8n training)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Customer Datastore (n8n training)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  }
}
```

## Looping
To iterate through each element of an array or each data item, use loops. n8n generally handles repetitive processing automatically. However, for some nodes, you may need to build loops.

### Creating a Loop in n8n
To create a loop, connect the output of one node back to an earlier node's input, using an **If node** to control the loop termination.

## Splitting Data in Batches
To process large volumes of incoming data efficiently, use the [**Loop Over Items node**](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/). 

### Example Workflow to Split Data
1. **Code node** returns URLs of RSS feeds.
2. **Loop Over Items node** with `Batch Size: 1` to iterate over the inputs.
3. **RSS Read node** to fetch data from the URLs.

### JSON Workflow Code Example for Splitting Data
```json
{
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7"
  },
  "nodes": [
    {
      "parameters": {},
      "id": "ed8dc090-ae8c-4db6-a93b-0fa873015c25",
      "name": "When clicking \"Execute workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [460, 460]
    },
    {
      "parameters": {
        "jsCode": "let urls = [\n  {\n    json: {\n      url: 'https://medium.com/feed/n8n-io'\n    }\n  },\n  {\n   json: {\n     url: 'https://dev.to/feed/n8n'\n   } \n  }\n]\n\nreturn urls;"
      },
      "id": "1df2a9bf-f970-4e04-b906-92dbbc9e8d3a",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 460]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3cce249a-0eab-42e2-90e3-dbdf3684e012",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [900, 460]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {}
      },
      "id": "50e1c1dc-9a5d-42d3-b7c0-accc31636aa6",
      "name": "RSS Read",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [1120, 460]
    }
  ],
  "connections": {
    "When clicking \"Execute workflow\"": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        null,
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

----------------------------------------

# Dealing with Errors in Workflows

## Checking Failed Workflows

n8n tracks executions of workflows. When a workflow fails, check the Executions log to investigate the failure. Open the Executions log by selecting **Executions** in the left-side panel. Select the respective execution to view it in read-only mode.

## Catching Erroring Workflows

To catch failed workflows:
1. Create an **Error Workflow** using the **Error Trigger node**.
2. Set the **Error Workflow** in the Workflow Settings.
3. Use additional nodes (e.g., Slack, Discord) to send notifications.

### Error Workflow Details
- Workflows using the Error Trigger node do not need to be activated.
- The Error Trigger node must be the last node in a workflow.
- You can set the same Error Workflow for multiple workflows.

### Exercise
1. Create a new Error Workflow.
2. Add the **Error Trigger node**.
3. Connect a notification node (e.g., Slack, Gmail).
4. Configure the monitored workflow to use the new Error Workflow.

### Example JSON Workflow Code
```json
{
	"nodes": [
		{
			"parameters": {},
			"name": "Error Trigger",
			"type": "n8n-nodes-base.errorTrigger",
			"typeVersion": 1,
			"position": [
				720,
				-380
			]
		},
		{
			"parameters": {
				"channel": "channelname",
				"text": "=This workflow {{$node[\"Error Trigger\"].json[\"workflow\"][\"name\"]}} failed.\nHave a look at it here: {{$node[\"Error Trigger\"].json[\"execution\"][\"url\"]}}",
				"attachments": [],
				"otherOptions": {}
			},
			"name": "Slack",
			"type": "n8n-nodes-base.slack",
			"position": [
				900,
				-380
			],
			"typeVersion": 1,
			"credentials": {
				"slackApi": {
					"id": "17",
					"name": "slack_credentials"
				}
			}
		}
	],
	"connections": {
		"Error Trigger": {
			"main": [
				[
					{
						"node": "Slack",
						"type": "main",
						"index": 0
					}
				]
			]
		}
	}
}
```

## Throwing Exceptions in Workflows

To throw errors for troubleshooting, include a **Stop and Error node**. Specify:
- **Error Message**: Custom message about the error.
- **Error Object**: Type of error.

The **Stop and Error node** must be the last node in the workflow. 

### When to Throw Errors
Use the **Stop and Error node** to validate input data or assumptions, catching potential issues early, such as:
- Wrongly formatted JSON.
- Incorrect data types.
- Missing values.

### Example Stop and Error Node Illustration
- This node will display custom error messages for invalid data or conditions.

----------------------------------------

# Automating a Business Workflow

## Workflow Design

Steps to achieve workflow automation:

1. Get and combine data from all necessary sources.
2. Sort the data and format the dates.
3. Write binary files.
4. Send notifications using email and Discord.

This use case consists of three separate workflows:

1. A workflow that merges the company data with external information.
2. A workflow that generates the reports.
3. A workflow that monitors errors in the second workflow.

## Workflow Prerequisites

To build the workflows, you will need the following:

- An [Airtable](https://airtable.com/) account and [credentials](https://docs.n8n.io/integrations/builtin/credentials/airtable/).
- A [Google](https://www.google.com/account/about/) account and [credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) to access Gmail.
- A [Discord](https://discord.com/) account and webhook URL.

----------------------------------------

# Workflow 1: Merging Data

### Overview
The goal is to merge customer data from Airtable with additional regional information from the REST Countries API.

### Steps to Build the Workflow

1. **Airtable Node**
   - Use the **Airtable node** to list the data in the Airtable table named `customers`.

2. **HTTP Request Node**
   - Use the **HTTP Request node** to fetch data from the REST Countries API:
     - URL: `https://restcountries.com/v3.1/all`
     - Query Parameter:
       - Name: `fields`
       - Value: `name,region,subregion`
   - This will return data about world countries, split into separate items.

3. **Merge Node**
   - Utilize the **Merge node** to combine data from Airtable and the Countries API based on country name.
     - Airtable Field: `customerCountry`
     - Countries API Field: `name.common`

4. **Update Airtable Node**
   - Use another **Airtable node** to update the fields `region` and `subregion` in Airtable with the data received from the Countries API.

### Workflow Representation
The workflow diagram illustrates how the nodes are connected to achieve the desired merging of data. 

### Nodes Overview
- **Airtable Node**: Access and manage Airtable data.
- **HTTP Request Node**: Make external HTTP calls to retrieve data from APIs.
- **Merge Node**: Combine data from different sources based on specified criteria. 

### Best Practices
- Ensure correct mappings between Airtable fields and API response fields during the merging process.
- Always validate the output from the API to handle cases where data may not match.

### Quiz Questions
- How many items does the **HTTP Request node** return?
- How many items does the **Merge node** return?
- How many unique regions are assigned in the customers table?
- What's the subregion assigned to customer ID 10?

----------------------------------------

# Workflow 2: Generating Reports

## Part 1: Getting Data from Different Sources

1. **HTTP Request Node**
   - **Method**: GET
   - **URL**: Dataset URL from sign-up email
   - **Authentication**: Generic Credential Type
     - **Generic Auth Type**: Header Auth
     - **Credentials for Header Auth**: Header Auth name and value from sign-up email
   - **Send Headers**: True
     - **Specify Headers**: Using Fields Below
       - **Name**: `unique_id`
       - **Value**: Unique ID from sign-up email

2. **Airtable Node**
   - **Operation**: List data from `customers` table where fields `region` and `subregion` are updated.

3. **Merge Node**
   - **Merge By**: Match input fields on `customerID`.

4. **Sort Node**
   - **Sort By**: `orderPrice` (Descending).

## Part 2: Generating File for Regional Sales

1. **If Node**
   - **Condition**: Display orders from `Americas` region.

2. **Convert to File Node**
   - **Input Format**: Transform incoming data from JSON to binary format.
   - **File Naming**: Based on `orderID`.

3. **Gmail Node**
   - **Parameters**: 
     - Send the files using email to a specified address with an attachment.

4. **Discord Node**
   - **Webhook URL**: Discord URL from sign-up email.
   - **Text**: "I sent the file using email with the label ID `{label ID}`. My ID: " followed by the unique ID from sign-up email.

## Part 3: Generating Files for Total Sales

1. **Loop Over Items Node**
   - **Batch Size**: 5

2. **Set Node**
   - **Values**: 
     - `customerEmail`, `customerRegion`, `customerSince`, `orderPrice` pulled from previous node.

3. **Date & Time Node**
   - **Change Format**: `customerSince` to MM/DD/YYYY format.
   - **Include Input Fields**: Yes.

4. **Convert to File Node**
   - **Output Format**: Create CSV spreadsheet.
   - **File Name**: Use expression `{{$runIndex > 0 ? 'file_low_orders':'file_high_orders'}}`.

5. **Discord Node**
   - **Webhook URL**: Discord URL from sign-up email.
   - **Text**: "I created the spreadsheet `{file name}`. My ID:" followed by unique ID from sign-up email.

## JSON Workflow Code

```json
{
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7"
  },
  "nodes": [
    {
      "parameters": {
        "sendTo": "bart@n8n.io",
        "subject": "Your TPS Reports",
        "emailType": "text",
        "message": "Please find your TPS report attached.",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [{}]
          }
        }
      },
      "id": "d889eb42-8b34-4718-b961-38c8e7839ea6",
      "name": "Gmail",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [2100, 500],
      "credentials": {
        "gmailOAuth2": {
          "id": "HFesCcFcn1NW81yu",
          "name": "Gmail account 7"
        }
      }
    },
    {
      "parameters": {},
      "id": "c0236456-40be-4f8f-a730-e56cb62b7b5c",
      "name": "When clicking \"Execute workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [780, 600]
    },
    {
      "parameters": {
        "url": "https://internal.users.n8n.cloud/webhook/level2-erp",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "unique_id",
              "value": "recFIcD6UlSyxaVMQ"
            }
          ]
        },
        "options": {}
      },
      "id": "cc106fa0-6630-4c84-aea4-a4c7a3c149e9",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1000, 500],
      "credentials": {
        "httpHeaderAuth": {
          "id": "qeHdJdqqqaTC69cm",
          "name": "Course L2 Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "apprtKkVasbQDbFa1",
          "mode": "list",
          "cachedResultName": "All your base",
          "cachedResultUrl": "https://airtable.com/apprtKkVasbQDbFa1"
        },
        "table": {
          "__rl": true,
          "value": "tblInZ7jeNdlUOvxZ",
          "mode": "list",
          "cachedResultName": "Course L2, Workflow 1",
          "cachedResultUrl": "https://airtable.com/apprtKkVasbQDbFa1/tblInZ7jeNdlUOvxZ"
        },
        "options": {}
      },
      "id": "e5ae1927-b531-401c-9cb2-ecf1f2836ba6",
      "name": "Airtable",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1000, 700],
      "credentials": {
        "airtableTokenApi": {
          "id": "MIplo6lY3AEsdf7L",
          "name": "Airtable Personal Access Token account 4"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "customerID",
              "field2": "customerID"
            }
          ]
        },
        "options": {}
      },
      "id": "1cddc984-7fca-45e0-83b8-0c502cb4c78c",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [1220, 600]
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "orderPrice",
              "order": "descending"
            }
          ]
        },
        "options": {}
      },
      "id": "2f55af2e-f69b-4f61-a9e5-c7eefaad93ba",
      "name": "Sort",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [1440, 600]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "d3afe65c-7c80-4caa-9d1c-33c62fbc2197",
              "leftValue": "={{ $json.region }}",
              "rightValue": "Americas",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2ed874a9-5bcf-4cc9-9b52-ea503a562892",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1660, 500]
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {
          "fileName": "=report_orderID_{{ $('If').item.json.orderID }}.json"
        }
      },
      "id": "d93b4429-2200-4a84-8505-16266fedfccd",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [1880, 500]
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "I sent the file using email with the label ID  and wrote the binary file {file name}. My ID: 123",
        "options": {}
      },
      "id": "26f43f2c-1422-40de-9f40-dd2d80926b1c",
      "name": "Discord",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [2320, 500],
      "credentials": {
        "discordWebhookApi": {
          "id": "WEBrtPdoLrhlDYKr",
          "name": "L2 Course Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "id": "0fa1fbf6-fe77-4044-a445-c49a1db37dec",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1660, 700]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ce839b80-c50d-48f5-9a24-bb2df6fdd2ff",
              "name": "customerEmail",
              "value": "={{ $json.customerEmail }}",
              "type": "string"
            },
            {
              "id": "0c613366-3808-45a2-89cc-b34c7b9f3fb7",
              "name": "region",
              "value": "={{ $json.region }}",
              "type": "string"
            },
            {
              "id": "0f19a88c-deb0-4119-8965-06ed62a840b2",
              "name": "customerSince",
              "value": "={{ $json.customerSince }}",
              "type": "string"
            },
            {
              "id": "a7e890d6-86af-4839-b5df-d2a4efe923f7",
              "name": "orderPrice",
              "value": "={{ $json.orderPrice }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "09b8584c-4ead-4007-a6cd-edaa4669a757",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1880, 700]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.customerSince }}",
        "options": {
          "includeInputFields": true
        }
      },
      "id": "c96fae90-e080-48dd-9bff-3e4506aafb86",
      "name": "Date & Time",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [2100, 700]
    },
    {
      "parameters": {
        "options": {
          "fileName": "={{$runIndex > 0 ? 'file_low_orders':'file_high_orders'}}"
        }
      },
      "id": "43dc8634-2f16-442b-a754-89f47c51c591",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [2320, 700]
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "I created the spreadsheet {file name}. My ID: 123",
        "options": {}
      },
      "id": "05da1c22-d1f6-4ea6-9102-f74f9ae2e9d3",
      "name": "Discord1",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [2540, 700],
      "credentials": {
        "discordWebhookApi": {
          "id": "WEBrtPdoLrhlDYKr",
          "name": "L2 Course Discord Webhook account"
        }
      }
    }
  ],
  "connections": {
    "Gmail": {
      "main": [
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \"Execute workflow\"": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        null,
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Discord1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
```

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# Workflow 3: Monitoring Workflow Errors

## Overview
Create an Error workflow to monitor the main workflow for errors.

## Steps to Create the Error Workflow
1. Create a new workflow.
2. Add an **Error Trigger node** (execute as a test).
3. Connect a **Discord node** to the **Error Trigger node** and configure the following parameters:
   - **Webhook URL**: Discord URL received via email at course signup.
   - **Text**: 
     ```
     The workflow `{workflow name}` failed, with the error message: `{execution error message}`. Last node executed: `{name of the last executed node}`. Check this workflow execution here: `{execution URL}` My Unique ID:   <Your Unique ID>
     ```
     Replace text in curly brackets `{}` with expressions to gather respective information from the Error Trigger node.
4. Execute the Discord node.
5. Set the newly created workflow as the **Error Workflow** for the main workflow.

## Diagram
The workflow structure should be visualized as follows: [Workflow Diagram](https://docs.n8n.io/_images/courses/level-two/chapter-five/workflow3.png) 

## Key Parameters of the Error Trigger Node
- The **Error Trigger node** returns specific fields relating to the error encountered during workflow execution. Make sure to reference the documentation to identify exact fields and their purposes.

----------------------------------------

# Test Your Knowledge

## Quiz Information
- Pass Requirement: At least 80% correct answers.
- Attempts: Unlimited.
- Time Limit: None.

## Next Steps
- Create new workflows for personal or work use.
- Explore workflows for ideas.

## Technical Content
No specific APIs, nodes, or parameters are mentioned in this document. Please refer to other sections of the n8n documentation for detailed technical information regarding integrations, workflow configurations, and API usage.

----------------------------------------

# Credentials

**Credentials** are private pieces of information issued by apps and services to authenticate users and allow connections and information sharing between the app or service and the n8n node.

## Accessing Credentials
- Open the left menu and select **Credentials**.
- **My credentials** tab shows credentials you created.
- **All credentials** tab displays all credentials you can use, including those shared with you by other users.

## Related Topics
- **Create and Edit Credentials**: Instructions for credential creation and modification.
- **Credential Sharing**: Learn about sharing capabilities.
- **Credentials Library**: Information on setting up credentials for services.

----------------------------------------

# Create and Edit Credentials

Credentials are securely stored authentication information used to connect n8n workflows to external services such as APIs or databases.

## Create a Credential

1. Select the **button** in the upper-left corner of the side menu. Select Credential.
2. Choose whether to create the credential inside your personal space or a specific project.
3. Select the app or service you wish to connect to.

Or:

1. Using the **Create** button in the upper-right corner from either the **Overview** page or a specific project, select Credential.
2. Determine the scope of the credential creation (personal space or project).
3. Choose the app or service you wish to connect to.

You can also create a new credential in the credential drop-down when editing a node in the workflow editor.

Enter the details required by your service in the credential modal. Refer to your service's page in the credentials library for guidance.

When you save a credential, n8n tests it to confirm it works.

### Credentials Naming

New credentials are named " _node name_ account" by default. Rename the credentials by clicking on the name. Use a naming convention that identifies the app or service, type, and purpose of the credential.

## Expressions in Credentials

You can use [expressions](https://docs.n8n.io/glossary/#expression-n8n) to set credentials dynamically as your workflow runs:

1. Find the data path containing the credential in your workflow.
2. Hover over the field where you want to use an expression.
3. Toggle **Expression** on.
4. Enter your expression.

### Example Workflow

#### Using the Example

To load the template into your n8n instance:

1. Download the workflow JSON file.
2. Open a new workflow in your n8n instance.
3. Copy in the JSON, or select **Workflow menu** > **Import from file...**.

----------------------------------------

# Credential Sharing

## Core Concepts

- **Credential Sharing**: Users can share credentials with other users for their workflows or within a project for all project members. Shared users cannot view or edit credential details. 
- **Ownership**: Users can share credentials they created. Project admins can share credentials created in projects. Instance owners and admins can view and share all instance credentials.

## Share a Credential

To share a credential:

1. From the left menu, select either **Overview** or a project.
2. Select **Credentials** to see a list of your credentials.
3. Select the credential you want to share.
4. Select **Sharing**.
5. In the **Share with projects or users** dropdown, browse or search for the user or project with which to share.
6. Select a user or project.
7. Select **Save** to apply the changes.

## Remove Access to a Credential

To unshare a credential:

1. From the left menu, select either **Overview** or a project.
2. Select **Credentials** to see a list of your credentials.
3. Select the credential you want to unshare.
4. Select **Sharing**.
5. Select the trash icon on the user or project to remove from the list of shared users and projects.
6. Select **Save** to apply the changes.

----------------------------------------

# Data in n8n

Data is the information that n8n nodes receive and process. Understanding data structures and manipulation is essential when:

- Creating your own node
- Writing custom expressions
- Using the Function or Function Item node

## Key Topics

- **Data Structure**
- **Data Flow within Nodes**
- **Transforming Data**
- **Process Data Using Code**
- **Pinning and Editing Data During Workflow Development**
- **Data Mapping and Item Linking**

## Data Transformation Nodes

n8n provides a collection of nodes to transform data:

- **Aggregate**: Group separate items into individual items.
- **Limit**: Remove items beyond a defined maximum number.
- **Remove Duplicates**: Identify and delete identical items across all fields or a subset of fields.
- **Sort**: Organize lists in a desired order or generate a random selection.
- **Split Out**: Separate a single data item containing a list into multiple items.
- **Summarize**: Aggregate items together, similar to Excel pivot tables.

----------------------------------------

# Binary Data in n8n

Binary data refers to any file-type data, such as image files or documents. This section details how to work with binary data within n8n.

## Working with Binary Data in Workflows

n8n provides dedicated nodes to manage binary data in workflows.

### Nodes for Handling Binary Data

1. **Read/Write Files from Disk**: 
   - Allows reading and writing files to/from the machine running n8n.
   - [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/)

2. **Convert to File**: 
   - Converts input data into file format.
   - [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.converttofile/)

3. **Extract From File**: 
   - Extracts data from a binary format and converts it to JSON.
   - [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/)

#### Other Nodes for Related Tasks

- **HTML**: [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)
- **XML**: [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.xml/)
- **Compression**: [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.compression/)
- **Edit Image**: [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage/)
- **FTP**: [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.ftp/)

To trigger a workflow based on file changes, utilize the **Local File trigger**: [Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger/).

For splitting or concatenating binary data items, leverage the data transformation nodes: [Documentation](https://docs.n8n.io/data/#data-transformation-nodes).

### Code for Manipulating Binary Data

You can use the **Code node** to manipulate binary data in workflows. For example, to get the binary data buffer, refer to the guide: [Get the binary data buffer](https://docs.n8n.io/code/cookbook/code-node/get-binary-data-buffer/).

## Configure Binary Data Mode When Self-Hosting

Configure how your self-hosted n8n instance manages binary data by adjusting the **Binary data environment variables**: [Documentation](https://docs.n8n.io/hosting/configuration/environment-variables/binary-data/). Key configurations include setting the storage path and binary data storage method.

Your configuration can impact n8n scaling: [Scaling | Binary data filesystem mode](https://docs.n8n.io/hosting/scaling/binary-data/).

For security, to disable reading and writing binary data, set the `NODES_EXCLUDE` environment variable. Additional information can be found at: [Environment variables | Nodes](https://docs.n8n.io/hosting/configuration/environment-variables/nodes/).

----------------------------------------

# Processing Data with Code

## Function

A function is a block of code designed to perform a certain task. In n8n, you can write custom JavaScript or Python code snippets to add, remove, and update the data you receive from a node.

The **Code** node gives you access to the incoming data and you can manipulate it. With this node, you can create any function you want using JavaScript code.

----------------------------------------

# Data Editing in n8n

n8n allows you to edit **pinned data** for testing workflows during development. Data editing isn't available for production workflow executions.

## Edit Output Data

To edit output data:

1. Run the node to load data.
2. In the **OUTPUT** view, select **JSON** to switch to JSON view.
3. Select **Edit**.
4. Edit your data.
5. Select **Save**. n8n saves your changes and pins your data.

## Use Data from Previous Executions

To copy data from nodes in previous workflow executions:

1. Open the left menu.
2. Select **Executions**.
3. Browse the workflow executions list to find the desired data.
4. Select **Open Past Execution**.
5. Double click the node whose data you want to copy.
6. Switch to JSON view if it's in table layout.
7. To copy the JSON:
   - Highlight the JSON and use `ctrl` + `c`, or
   - Hover over the JSON to display the **Copy** button and select:
     - **Copy Item Path** or **Copy Parameter Path** for expressions to access parts of the JSON.
     - **Copy Value** to copy the entire JSON.
8. Return to the workflow you're working on:
   - Open the left menu.
   - Select **Workflows**.
   - Select **Open** and choose the workflow.
9. Open the node where you want to use the copied data.
10. If there's no data, run the node to load data.
11. Switch to JSON view in the **OUTPUT**.
12. Select **Edit**.
13. Paste in the copied data.
14. Select **Save**. n8n saves your changes and pins your data.

----------------------------------------

# Data Flow within Nodes

Nodes can process multiple items. For example, configuring the Trello node to `Create-Card` and setting an expression for the `Name` parameter using the property `name-input-value` from incoming data creates a card for each item using the respective `name-input-value` of the current item.

## Example Input
This input will create two cards:
- One named `test1`
- One named `test2`

```json
[
    {
        "name-input-value": "test1"
    },
    {
        "name-input-value": "test2"
    }
]
```

----------------------------------------

# Data Filtering in n8n

## Core Concepts

- **Data Filtering**: A method to search and filter data within the **INPUT** and **OUTPUT** panels in n8n nodes. It is a visual filtering technique that does not alter or delete any data.

## Configuration Instructions

### Searching and Filtering Data

1. Open the desired node in n8n.
2. Select **Search** in the **INPUT** or **OUTPUT** panel.
3. Enter your search term; n8n filters the data as you type.
4. Note that the filtering is visual only—the filter resets when you close and reopen the node. 

## Best Practices

- Utilize data filtering to easily check the output of nodes without modifying the underlying data.

----------------------------------------

# Data Mapping

Data mapping refers to referencing data from previous nodes.

## Guidance on Data Mapping

- **General Mapping Scenarios**: 
  - [Data Mapping in the UI](https://docs.n8n.io/data/data-mapping/data-mapping-ui/)
  - [Data Mapping in Expressions](https://docs.n8n.io/data/data-mapping/data-mapping-expressions/)
  
- **Item Linking**: 
  - Handle [item linking](https://docs.n8n.io/data/data-mapping/data-item-linking/) when using the Code node or building your own nodes.

----------------------------------------

# Data Item Linking

## Core Concepts
- An item is a single piece of data.
- Nodes receive one or more items, operate on them, and output new items.
- Each item links back to previous items.

## Item Linking Concepts
- Understand the behavior of items for programmatic-style nodes.
- Use the Code node or expressions editor to access data from earlier items in the workflow.

## Working with the Data Path
- Retrieve item data from previous nodes.
- Link items when using the Code node.

## Troubleshooting
- Guidance on handling errors related to item linking.

## Configuration Instructions
- Implement complex behaviors with input and output data in programmatic nodes.
- Access previous item data in workflows using the Code node.

----------------------------------------

# Item Linking in the Code Node

## Core Concepts

n8n's item linking allows access to data from preceding items in a workflow. Each output item from a node is linked to an input item, creating a chain for accessing previous items.

### Scenarios Requiring Manual Item Linking

The Code node requires manual item linking information in the following cases (when more than one incoming item exists):
- Adding new items (not linked to any input).
- Returning new items.
- Manually controlling item linking.

Use `pairedItem` to control item linking when returning data.

## Node & Parameter Details

### `pairedItem`

To link to an input item, set `pairedItem` when returning data. Example for linking to the item at index 0:

```json
[
	{
		"json": {
			// The index of the input item that generated this output item
			"pairedItem": 0
		}
	}
]
```

### Usage Example

Input Data:
```json
[
  { "id": "23423532", "name": "Jay Gatsby" },
  { "id": "23423533", "name": "José Arcadio Buendía" },
  { "id": "23423534", "name": "Max Sendak" },
  { "id": "23423535", "name": "Zaphod Beeblebrox" },
  { "id": "23423536", "name": "Edmund Pevensie" }
]
```

Generating New Items:
```javascript
newItems = [];
for (let i = 0; i < items.length; i++) {
  newItems.push({
    "json": {
      "name": items[i].json.name,
      "aBrandNewField": "New data for item " + i
    }
  });
}
return newItems;
```
*Note: `newItems` will not have `pairedItem`, making it impossible to trace back to original items.*

To add `pairedItem`:
```javascript
newItems = [];
for (let i = 0; i < items.length; i++) {
  newItems.push({
    "json": {
      "name": items[i].json.name,
      "aBrandNewField": "New data for item " + i
    },
    "pairedItem": i
  });
}
return newItems;
```
*Each new item now links back to the corresponding original item.*

----------------------------------------

# Item Linking Concepts

Each output item created by a node includes metadata that links them to the input item(s) used to generate them. This creates a chain of items to access previous items, which can become complicated, especially with nodes that split or merge data.

## n8n's Automatic Item Linking

n8n attempts to automatically link items under the following conditions:

- **Single input, single output**: The output links to the input.
- **Single input, multiple outputs**: All outputs link to that input.
- **Multiple inputs and outputs**:
  - If input items are kept but their order is changed (or some are removed), n8n can automatically add the correct linked item information.
  - If the number of inputs and outputs is equal, n8n links items in order (output-1 links to input-1, output-2 to input-2, etc.).
  - If the counts aren't equal, or new items are created, n8n cannot automatically link items.

If linking fails, and the node does not handle item linking, n8n displays an error.

## Item Linking Example

Accessing linked items can vary based on the method used: UI, expressions, or the code node.

## Additional Resources
- **Item Linking for Node Creators**: Instructions on handling item linking when building nodes.
- **Item Linking in the Code Node**: Guidelines for managing item linking within the Code node.
- **Item Linking Errors**: Information on potential errors that may occur during item linking.

----------------------------------------

# Item Linking Errors

In n8n, you can reference data from any previous node using the expression syntax `$(node_name).item`.

### Item Reference Errors

`.item` fails under the following conditions:
- The thread is broken.
- The thread points to more than one item in the previous node.

To avoid these errors, you can use `.first()`, `.last()`, or `.all()[index]` instead. 

### Fix for 'Info for expressions missing from previous node'

Error Message:
```
ERROR: Info for expression missing from previous node
```
**Cause:** A node does not return pairing information.
- **Code nodes:** Ensure you return which input items were used to produce each output item.
- **Custom/community nodes:** Update the node to return which input items it uses for output.

### Fix for 'Multiple matching items for expression'

Error Message:
```
ERROR: Multiple matching items for expression
```
**Cause:** Multiple items used to create a single item (e.g., from Summarize, Aggregate, or Merge nodes).

**Solutions:**
- Use `.first()`, `.last()`, or `.all()[index]`.
- Reference a different node that contains the same information without multiple matches.

----------------------------------------

# Item Linking for Node Creators

## Overview
This guide applies only to programmatic-style nodes. For declarative style nodes, n8n manages paired items automatically.

n8n's item linking allows access to data from preceding items. Ensuring that output items from your node are correctly linked to their input items is crucial for the integrity of expressions in other nodes.

### Manual Item Linking
If manual item linking is necessary, set `pairedItem` on each returned item:

```javascript
// Use the pairedItem information of the incoming item
newItem = {
  "json": { /* your item JSON here */ },
  "pairedItem": {
    "item": item.pairedItem,
    // Optional: choose the input to use
    // Set this if your node combines multiple inputs
    "input": 0
  }
};

// Or set the index manually
newItem = {
  "json": { /* your item JSON here */ },
  "pairedItem": {
    "item": i,
    // Optional: choose the input to use
    // Set this if your node combines multiple inputs
    "input": 0
  }
};
```

Refer to additional resources for conceptual details on item linking and decision-making regarding node building styles.

----------------------------------------

# Data Mapping in the Expressions Editor

## Accessing Linked Items

### Access the Linked Item in a Previous Node's Output

When using this method, n8n retrieves the parent item from the item linking chain of the specified node.

**Expression:**
```javascript
{{$("<node-name>").item}}
```

**Output Example:**
```json
[
  {
    "id": "23423532",
    "name": "Jay Gatsby"
  },
  {
    "id": "23423533",
    "name": "José Arcadio Buendía"
  },
  {
    "id": "23423534",
    "name": "Max Sendak"
  },
  {
    "id": "23423535",
    "name": "Zaphod Beeblebrox"
  },
  {
    "id": "23423536",
    "name": "Edmund Pevensie"
  }
]
```

**To Extract Name:**
```javascript
{{$("<node-name>").item.json.name}}
```

### Access the Linked Item in the Current Node's Input

In this scenario, the item linking occurs within the node itself whereby the input item connects to an output item.

**Expression:**
```javascript
{{$input.item}}
```

**Input Data Example:**
```json
[
  {
    "id": "23423532",
    "name": "Jay Gatsby"
  },
  {
    "id": "23423533",
    "name": "José Arcadio Buendía"
  },
  {
    "id": "23423534",
    "name": "Max Sendak"
  },
  {
    "id": "23423535",
    "name": "Zaphod Beeblebrox"
  },
  {
    "id": "23423536",
    "name": "Edmund Pevensie"
  }
]
```

**To Extract Name:**
```javascript
{{$input.item.json.name}}
```

----------------------------------------

# Data Mapping in the UI

## Core Concept
Data mapping means referencing data from previous nodes without changing or transforming it.

## Mapping Methods
- **Expressions Editor**: Allows custom expressions for data mapping.
- **Drag and Drop**: Data can be dragged from the INPUT panel into parameters, generating the corresponding expression.

## Drag and Drop Data Mapping Procedure
1. Run your workflow to load data.
2. Open the node where you need to map data.
3. Mapping can be done in:
   - **Table View**: Click and hold a table heading to map top-level data or a specific field for nested data.
   - **JSON View**: Click and hold a key.
   - **Schema View**: Click and hold a key.
4. Drag the item into the desired field for usage.

### Example Expression Creation
Given data:
```
{
  "fruit": "apples",
  "color": "green"
}
```
To map the `fruit`, drag **fruit** from the **INPUT** into the field, creating the expression: `{{ $json.fruit }}`. This expression iterates over input items, where the field's value becomes the value of `fruit`.

### Understanding Nested Data
Nested data example:
```json
[
  {
    "name": "First item",
    "nested": {
      "example-number-field": 1,
      "example-string-field": "apples"
    }
  },
  {
    "name": "Second item",
    "nested": {
      "example-number-field": 2,
      "example-string-field": "oranges"
    }
  }
]
```
n8n displays nested data in table form, indicating nested structures visually.

## Notes
For errors related to mapping and linking items, refer to Item linking errors documentation.

----------------------------------------

# Data Mocking

Data mocking is simulating or faking data. It is useful for developing workflows to avoid repeated calls to data sources, work with a predictable dataset during development, and prevent overwriting live data.

## Mocking with Real Data Using Data Pinning

Using [data pinning](https://docs.n8n.io/data/data-pinning/), you can load real data into your workflow and pin it in the output panel of a node. This approach allows for realistic data with only one call to the data source.

### Steps to Pin Data in a Node:

1. Run the node to load data.
2. In the **OUTPUT** view, select **Pin data**. When data pinning is active, the button is disabled, and a "This data is pinned" banner is displayed.

**Note:** You cannot pin data if the output includes binary data.

## Generate Custom Data Using the Code or Edit Fields Nodes

You can create a custom dataset in your workflow using either the [Code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/) or the [Edit Fields (Set) node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/).

- In the **Code node**, create any dataset and return it as the node output.
- In the **Edit Fields node**, select **Add fields** to add custom data.

The Edit Fields node is suitable for small tests, while the Code node is preferred for complex datasets.

## Output a Sample Data Set from the Customer Datastore Node

The Customer Datastore node provides a fake dataset for testing. Add and execute the node to explore the data, particularly when you need test data without a real use-case.

----------------------------------------

# Data Pinning

Data pinning allows you to save the output data of a node during workflow development, which can be reused in future executions instead of fetching fresh data.

## Benefits of Data Pinning
- Avoids repeated requests to external systems during testing.
- Helps manage data or usage limits by reducing resource consumption.
- Ensures consistency of data across workflow tests.

**Note:** Data pinning is only available for nodes with a single main output. It is not available for production workflow executions.

## Pin Data

To pin data in a node:
1. Run the node to load data.
2. In the **OUTPUT** view, select **Pin data**. When active, the button is disabled and a "This data is pinned" banner is displayed in the **OUTPUT** view.

**Restriction:** You cannot pin data if the output includes binary data.

## Unpin Data

To unpin data and fetch fresh data on the next execution:
- Select the **Unpin** link in the banner that appears when data pinning is active.

----------------------------------------

# Data Structure in n8n

In n8n, all data passed between nodes is an array of objects with the following structure:

```json
[
    {
        "json": {
            "apple": "beets",
            "carrot": {
                "dill": 1
            }
        },
        "binary": {
            "apple-picture": {
                "data": "....", // Base64 encoded binary data (required)
                "mimeType": "image/png", // Best practice to set if possible (optional)
                "fileExtension": "png", // Best practice to set if possible (optional)
                "fileName": "example.png" // Best practice to set if possible (optional)
            }
        }
    }
]
```

### Automatic Key Addition

From version 0.166.0 onward, when using the Function or Code nodes, n8n automatically adds the `json` key if it's missing and wraps items in an array (`[]`) if needed. This is applicable only to the Function or Code nodes. Custom nodes must ensure that the data is returned with the `json` key.

## Data Item Processing

Nodes can process multiple items. 

For example, the following input to the Trello node set to `Create-Card` will create cards named according to the `name-input-value` property of each item:

```json
[
    {
        "name-input-value": "test1"
    },
    {
        "name-input-value": "test2"
    }
]
```

This input will create two cards: one named `test1` and the other named `test2`.

----------------------------------------

# Schema Preview

Schema Preview exposes expected schema data from the previous node in the Node Editor, enabling workflow construction without credential provision. It provides visibility of expected fields without mock data.

## Using the Preview

1. Include a node with Schema Preview in your workflow.
2. Access the next node's details in the sequence to display Schema Preview data in the Node Editor.
3. Drag and drop fields from Schema Preview as input into node parameters and settings.

----------------------------------------

# Transforming Data

n8n uses a predefined data structure for processing incoming data. If your incoming data does not match this structure, it must be transformed.

## Data Transformation Nodes

To transform data structures into compatible formats, use the following transformation nodes:

- **[Aggregate](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.aggregate/)**: Groups separate items or portions of them into individual items.
- **[Limit](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.limit/)**: Removes items that exceed a defined maximum number.
- **[Remove Duplicates](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/)**: Identifies and deletes items that are identical across all fields or a subset of fields.
- **[Sort](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.sort/)**: Organizes lists in a desired order or generates a random selection.
- **[Split Out](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitout/)**: Separates a single data item containing a list into multiple items.
- **[Summarize](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.summarize/)**: Aggregates items in a manner similar to Excel pivot tables.

----------------------------------------

# n8n Embed

## Overview
n8n Embed allows users to white label n8n or incorporate it into their software as part of a commercial product.

## Support
- Community forum available for assistance.
- Current Embed customers can contact n8n support using the email provided with their license purchase.

## Availability
n8n Embed is not available in Russia and Belarus. 

## API Documentation
No specific API endpoints or methods were provided in the original documentation. For more details, consult n8n's API documentation.

## Best Practices
To ensure optimal usage of n8n Embed, refer to the embedded guidelines available on the n8n website. For detailed configurations, please visit the official documentation page relevant to Embed features. 

## Workflow Patterns
No specific workflow patterns were detailed. Users are encouraged to explore the various workflow examples and integrate them according to their specific use cases.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# Configuration

## Authentication

n8n supports user management and can secure n8n with built-in authentication features. It supports LDAP and SAML.

### Credential Overwrites

To offer OAuth login to users, credential data can be overwritten on a global basis. This data is not visible to users but is automatically used by the backend.

#### Using Environment Variables

Set credential overwrites using environment variable `CREDENTIALS_OVERWRITE_DATA` to `{ CREDENTIAL_NAME: { PARAMETER: VALUE }}`. Note: This method is not recommended as environment variables aren't protected.

#### Using REST APIs

Set `CREDENTIALS_OVERWRITE_ENDPOINT` to the path for the endpoint. It is recommended to load credential data via a custom REST endpoint.

1. Activate the endpoint with:
   ```shell
   export CREDENTIALS_OVERWRITE_ENDPOINT=send-credentials
   ```

2. Example JSON file for credentials (`oauth-credentials.json`):
   ```json
   {
       "asanaOAuth2Api": {
           "clientId": "<id>",
           "clientSecret": "<secret>"
       },
       "githubOAuth2Api": {
           "clientId": "<id>",
           "clientSecret": "<secret>"
       }
   }
   ```

3. Apply it with curl:
   ```shell
   curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials
   ```

## Environment Variables

Relevant environment variables:
| Variable                       | Type     | Default | Description                                                                                             |
|--------------------------------|----------|---------|---------------------------------------------------------------------------------------------------------|
| `EXECUTIONS_TIMEOUT`           | Number   | `-1`    | Default timeout for workflows, `-1` to disable.                                                        |
| `EXECUTIONS_DATA_PRUNE`       | Boolean  | `true`  | Deletes data of past executions on a rolling basis.                                                    |
| `EXECUTIONS_DATA_MAX_AGE`     | Number   | `336`   | Age in hours before execution data is deleted.                                                          |
| `EXECUTIONS_DATA_PRUNE_MAX_COUNT` | Number | `10000` | Maximum number of executions to keep, `0` = no limit.                                                  |
| `NODES_EXCLUDE`               | Array    | -       | Nodes not to load (e.g., security risks).                                                              |
| `NODES_INCLUDE`               | Array    | -       | Nodes to load.                                                                                          |
| `N8N_TEMPLATES_ENABLED`       | Boolean  | `true`  | Enable or disable workflow templates.                                                                    |
| `N8N_TEMPLATES_HOST`          | String   | `https://api.n8n.io` | Custom workflow template library endpoint.                                               |

## Backend Hooks

Define external hooks that n8n executes for specific operations.

### Available Hooks
| Hook                  | Arguments                         | Description                                             |
|-----------------------|-----------------------------------|---------------------------------------------------------|
| `credentials.create`  | `[credentialData: ICredentialsDb]` | Before new credentials are created.                     |
| `credentials.delete`  | `[id: credentialId]`              | Before credentials are deleted.                         |
| `credentials.update`  | `[credentialData: ICredentialsDb]` | Before existing credentials are saved.                  |
| `frontend.settings`   | `[frontendSettings: IN8nUISettings]` | Called on n8n startup for modifying frontend data.     |
| `n8n.ready`          | `[app: App]`                     | Once n8n is ready, for custom API registration.        |
| `n8n.stop`           |                                   | When n8n process is stopped.                           |
| `oauth1.authenticate` | `[oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}]` | Before OAuth1 authentication.                           |
| `oauth2.callback`     | `[oAuth2Parameters: {...}]`       | In an OAuth2 callback, to overwrite callback URL.       |
| `workflow.activate`    | `[workflowData: IWorkflowDb]`     | Before a workflow gets activated.                       |
| `workflow.create`      | `[workflowData: IWorkflowBase]`   | Before a new workflow gets created.                     |

### Registering Hooks

Set hooks by registering a hook file with the environment variable `EXTERNAL_HOOK_FILES`.
Example:
```shell
EXTERNAL_HOOK_FILES=/data/hook.js
```

### Backend Hook Files

Format of hook files:
```javascript
module.exports = {
    "frontend": {
        "settings": [
            async function (settings) {
                settings.oauthCallbackUrls.oauth1 = 'https://n8n.example.com/oauth1/callback';
            }
        ]
    },
    "workflow": {
        "activate": [
            async function (workflowData) {
                const activeWorkflows = await this.dbCollections.Workflow.count({ active: true });
                if (activeWorkflows > 1) {
                    throw new Error('Active workflow limit reached.');
                }
            }
        ]
    }
};
```

## Frontend External Hooks

Define hooks in the frontend code that n8n executes for specific operations.

### Available Hooks

| Hook                                  | Description                                               |
|---------------------------------------|-----------------------------------------------------------|
| `credentials.create`                  | Called when a new credential is created.                  |
| `credentialsEdit.credentialTypeChanged` | Called when an existing credential's type changes.       |
| `workflow.afterUpdate`                | When an existing workflow is updated.                     |

### Registering Frontend Hooks

Add a script tag in `editor-ui/public/index.html`:
```html
<script src="frontend-hooks.js"></script>
```

### Frontend Hook Files

Format for frontend external hook files:
```javascript
window.n8nExternalHooks = {
    nodeView: {
        mount: [
            function (store, meta) {
                // do something
            },
        ]
    }
};
```

### Frontend Hook Functions

Each hook function can be invoked with arguments such as `store` (the Vuex store object) and `metadata` (hook data).

----------------------------------------

# Deployment

## User Data
n8n recommends storing user data using [Rook](https://rook.io/). In case of server downtime, a new instance should start on another machine using the same data, negating the need for backups except in catastrophic failure or user account reactivation within the retention period (two weeks for n8n Cloud).

## Backups
Create nightly backups by attaching another container and copying all data to this second container to minimize RAM usage and server load.

## Restarting
If your instance is down or restarting, missed executions (e.g., Cron or Webhook nodes) are not recoverable. For 100% uptime, build a proxy in front caching the data.

----------------------------------------

# Workflow Management in Embed

## Overview
When managing an embedded n8n deployment across multiple users, you have two options for running similar workflows:

- **Create a workflow for each user**: 
  - Pros: No limitations on workflow triggers.
  - Cons: Requires managing multiple workflows.
  
- **Create a single workflow that takes user credentials**: 
  - Pros: Simplified management (only one workflow to change). 
  - Cons: Your product must call the workflow to run it.

**Warning**: The APIs referenced are subject to change. Check for functionality with each version upgrade.

## Workflow per User

### Steps to Follow
1. **Obtain user credentials**: Capture all credentials for any required node/service.
2. **Create user credentials**: Set up credentials in n8n.
3. **Create the workflow**: Best practice is to duplicate a base workflow for new users.

### 1. Obtain User Credentials
Credentials needed depend on the specific workflow.

### 2. Create User Credentials

#### Using the Editor UI
1. Select **Credentials** > **New**.
2. Choose the **Credential type** (e.g., Airtable).
3. Enter corresponding credential details and select associated nodes.
4. Click **Create** to save.

#### Using the API
Endpoint to create credentials: 
```
POST https://<n8n-domain>/rest/credentials
```
Request body example:
```json
{
   "name":"MyAirtable",
   "type":"airtableApi",
   "nodesAccess":[
      {
         "nodeType":"n8n-nodes-base.airtable"
      }
   ],
   "data":{
      "apiKey":"q12we34r5t67yu"
   }
}
```
Response includes the ID of the new credentials.

### 3. Create the Workflow
1. Duplicate the base workflow using the Editor UI or API.
2. Update nodes to use the respective user’s credentials.

#### Using the Editor UI
1. Open the template workflow.
2. Select **Workflows** > **Duplicate** and name the new workflow.
3. Update the nodes to use user-specific credentials and activate the workflow.

#### Using the API
1. Fetch JSON of the template workflow:
   ```
   GET https://<n8n-domain>/rest/workflows/<workflow_id>
   ```
2. Create a new workflow using the updated JSON:
   ```
   POST https://<n8n-domain>/rest/workflows
   ```
3. Activate the new workflow using:
   ```
   PATCH https://<n8n-domain>/rest/workflows/<workflow_id>
   ```
   Include `{"active": true}` in the JSON payload.

## Single Workflow

### Steps to Implement
1. **Obtain credentials**: Same as above.
2. **Create user credentials**: Same as above.
3. **Create the workflow**:
   - This needs to be triggered by a **Webhook** node.
   - Incoming webhook must contain user credentials.

### Call the Workflow
To execute the workflow for any user, call the webhook providing necessary credentials and parameters.

### Important Notes
- Ensure the production URL is used for the Webhook node. 
- Use [Webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/) for configuring webhook.

----------------------------------------

# Prerequisites

## Feature Availability
Embed requires an embed license.

## Component Requirements
| Component | Sizing | Supported |
| --- | --- | --- |
| CPU/vCPU | Minimum 10 CPU cycles, scaling as needed | Any public or private cloud |
| Database | 512 MB - 4 GB SSD | SQLite or PostgreSQL |
| Memory | 320 MB - 2 GB |  |

## CPU Considerations
n8n isn't CPU intensive; smaller instances from providers such as AWS and GCP are generally sufficient. Prioritize memory requirements when planning your infrastructure.

## Database Considerations
n8n uses its database to store credentials, past executions, and workflows. The default is SQLite if no database exists. 

- Recommend dedicated database instances to avoid dependencies and performance issues.
- For PostgreSQL: The database must exist, and the user must have full permissions on all tables.

### Best Practices
- Use SSD storage.
- Ensure database volumes are persisted in containerized cloud environments.
- Avoid using the `tablePrefix` configuration option in Postgres.
- Monitor changelogs and revert migrations if downgrading.
- Implement basic database security measures like IP allow lists and backups.

## Memory Considerations
An n8n instance typically requires minimal memory (~100MB at idle). Memory requirements vary based on workflows and data processed. The Code node can create data copies that may consume additional resources when handling large files.

----------------------------------------

# White Labelling

## Feature Availability
- Embed requires an embed license.

## Prerequisites
- Required tools on the development machine:
  - Git
  - Node.js and npm (minimum version Node 18.17.0)

### Repository Setup
1. Create a fork of [n8n's repository](https://github.com/n8n-io/n8n) and clone your new repository.
   ```bash
   git clone https://github.com/<your-organization>/n8n.git n8n
   cd n8n
   ```
2. Install dependencies, build, and start n8n.
   ```bash
   npm install
   npm run build
   npm run start
   ```

## Development Process
- Use `npm run dev` for automatic rebuilding and restarting while developing.

## Theme Colors
- Customize theme colors in:
  - [packages/design-system/src/css/_tokens.scss](https://github.com/n8n-io/n8n/blob/master/packages/design-system/src/css/_tokens.scss)
  - [packages/design-system/src/css/_tokens.dark.scss](https://github.com/n8n-io/n8n/blob/master/packages/design-system/src/css/_tokens.dark.scss)

Example of changing primary color:
```scss
@mixin theme {
	--color-primary-h: 204;
	--color-primary-s: 100%;
	--color-primary-l: 50%;
}
```

## Theme Logos
- Change logo assets in:
  - [packages/editor-ui/public](https://github.com/n8n-io/n8n/tree/master/packages/editor-ui/public)
    - Files to replace:
      - favicon-16x16.png
      - favicon-32x32.png
      - favicon.ico
      - n8n-logo.svg
      - n8n-logo-collapsed.svg
      - n8n-logo-expanded.svg

### SCSS Customization
Customize SCSS styles in:
- [MainSidebar.vue](https://github.com/n8n-io/n8n/blob/master/packages/editor-ui/src/components/MainSidebar.vue)
```scss
.logoItem {
	display: flex;
	justify-content: space-between;
	height: $header-height;
	line-height: $header-height;
	margin: 0 !important;
	border-radius: 0 !important;
	border-bottom: var(--border-width-base) var(--border-style-base) var(--color-background-xlight);
	cursor: default;
	&:hover, &:global(.is-active):hover {
		background-color: initial !important;
	}
	* { vertical-align: middle; }
	.icon {
		height: 18px;
		position: relative;
		left: 6px;
	}
}
```

## Text Localization
- Modify text occurrences in:
  - [packages/editor-ui/src/plugins/i18n/locales/en.json](https://github.com/n8n-io/n8n/blob/master/packages/editor-ui/src/plugins/i18n/locales/en.json)

Example of adding a brand name in localization file:
```json
{
	"_brand.name": "My Brand",
	"about.aboutN8n": "About @:_brand.name",
	"about.n8nVersion": "@:_brand.name Version"
}
```

## Window Title Customization
- Edit window title in:
  - [packages/editor-ui/index.html](https://github.com/n8n-io/n8n/blob/master/packages/editor-ui/index.html)
  - [packages/editor-ui/src/components/mixins/titleChange.ts](https://github.com/n8n-io/n8n/blob/master/packages/editor-ui/src/components/mixins/titleChange.ts)

Example for changing the title in `index.html`:
```html
<!DOCTYPE html>
<html lang="en">
<head>
	<title>My Brand - Workflow Automation</title>
</head>
```

Example for changing the title in `titleChange.ts`:
```javascript
$titleSet(workflow: string, status: WorkflowTitleStatus) {
	// replace n8n prefix
	window.document.title = `My Brand - ${icon} ${workflow}`;
},
$titleReset() {
	// replace n8n prefix
	document.title = `My Brand - Workflow Automation`;
},
```

----------------------------------------

# Workflow Templates

## Feature Availability
Embed requires an embed license. 

n8n provides a library of workflow templates. When embedding n8n, you can:
- Continue to use n8n's workflow templates library (default behavior)
- Disable workflow templates
- Create your own workflow templates library

## Disable Workflow Templates
Set the following environment variable:
```bash
N8N_TEMPLATES_ENABLED=false
```

## Use Your Own Workflow Templates Library
Set the following environment variable:
```bash
N8N_TEMPLATES_HOST=<base_url_of_your_API>
```

## Endpoints
Your API must provide the same endpoints and data structure as n8n's. The endpoints are:
| Method | Path |
| --- | --- |
| GET | /templates/workflows/ `<id>` |
| GET | /templates/search |
| GET | /templates/collections/ `<id>` |
| GET | /templates/collections |
| GET | /templates/categories |
| GET | /health |

## Query Parameters
The `/templates/search` endpoint accepts the following query parameters:
| Parameter | Type | Description |
| --- | --- | --- |
| `page` | integer | The page of results to return |
| `rows` | integer | The maximum number of results to return per page |
| `category` | comma-separated list of strings | The categories to search within |
| `search` | string | The search query |

The `/templates/collections` endpoint accepts the following query parameters:
| Parameter | Type | Description |
| --- | --- | --- |
| `category` | comma-separated list of strings | The categories to search within |
| `search` | string | The search query |

## Data Schema
### Workflow Item Data Schema
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Generated schema for Root",
  "type": "object",
  "properties": {
    "id": {
      "type": "number"
    },
    "name": {
      "type": "string"
    },
    "totalViews": {
      "type": "number"
    },
    "price": {},
    "purchaseUrl": {},
    "recentViews": {
      "type": "number"
    },
    "createdAt": {
      "type": "string"
    },
    "user": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      },
      "required": [
        "username",
        "verified"
      ]
    },
    "nodes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "codex": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "details": {
                    "type": "string"
                  },
                  "resources": {
                    "type": "object",
                    "properties": {
                      "generic": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string"
                            },
                            "icon": {
                              "type": "string"
                            },
                            "label": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "url",
                            "label"
                          ]
                        }
                      },
                      "primaryDocumentation": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "url"
                          ]
                        }
                      }
                    },
                    "required": [
                      "primaryDocumentation"
                    ]
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nodeVersion": {
                    "type": "string"
                  },
                  "codexVersion": {
                    "type": "string"
                  }
                },
                "required": [
                  "categories"
                ]
              }
            }
          },
          "group": {
            "type": "string"
          },
          "defaults": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "iconData": {
            "type": "object",
            "properties": {
              "icon": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "fileBuffer": {
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "typeVersion": {
            "type": "number"
          },
          "nodeCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "required": [
          "id",
          "icon",
          "name",
          "codex",
          "group",
          "defaults",
          "iconData",
          "displayName",
          "typeVersion"
        ]
      }
    }
  },
  "required": [
    "id",
    "name",
    "totalViews",
    "price",
    "purchaseUrl",
    "recentViews",
    "createdAt",
    "user",
    "nodes"
  ]
}
```

### Category Item Data Schema
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "id": {
      "type": "number"
    },
    "name": {
      "type": "string"
    }
  },
  "required": [
    "id",
    "name"
  ]
}
```

### Collection Item Data Schema
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "id": {
      "type": "number"
    },
    "rank": {
      "type": "number"
    },
    "name": {
      "type": "string"
    },
    "totalViews": {},
    "createdAt": {
      "type": "string"
    },
    "workflows": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      }
    },
    "nodes": {
      "type": "array",
      "items": {}
    }
  },
  "required": [
    "id",
    "rank",
    "name",
    "totalViews",
    "createdAt",
    "workflows",
    "nodes"
  ]
}
```

----------------------------------------

# External Secrets

## Feature Availability
- External secrets are available on Enterprise Self-hosted and Enterprise Cloud plans.
- Supports: AWS Secrets Manager, Azure Key Vault, GCP Secrets Manager, Infisical, HashiCorp Vault.
- Not supported: HashiCorp Vault Secrets.

## Connect n8n to Your Secrets Store

### Secret Naming Conventions
- Only supports alphanumeric characters (`a-z`, `A-Z`, `0-9`) and underscores.
- Only plaintext values for secrets are supported.

### Setup Steps
1. Go to **Settings** > **External Secrets** in n8n.
2. Select **Set Up** for your provider.
3. Enter credentials depending on the provider:
   - **Azure Key Vault**: Vault Name, Tenant ID, Client ID, Client Secret.
   - **AWS Secrets Manager**: Access Key ID, Secret Access Key, Region.
     - IAM Policy for access to all secrets:
     ```json
     {
       "Version": "2012-10-17",
       "Statement": [
         {
           "Sid": "AccessAllSecrets",
           "Effect": "Allow",
           "Action": [
             "secretsmanager:ListSecrets",
             "secretsmanager:BatchGetSecretValue",
             "secretsmanager:GetResourcePolicy",
             "secretsmanager:GetSecretValue",
             "secretsmanager:DescribeSecret",
             "secretsmanager:ListSecretVersionIds"
           ],
           "Resource": "*"
         }
       ]
     }
     ```
     - Policy for specific secrets:
     ```json
     {
       "Version": "2012-10-17",
       "Statement": [
         {
           "Sid": "ListingSecrets",
           "Effect": "Allow",
           "Action": [
             "secretsmanager:ListSecrets",
             "secretsmanager:BatchGetSecretValue"
           ],
           "Resource": "*"
         },
         {
           "Sid": "RetrievingSecrets",
           "Effect": "Allow",
           "Action": [
             "secretsmanager:GetSecretValue",
             "secretsmanager:DescribeSecret"
           ],
           "Resource": [
             "arn:aws:secretsmanager:us-west-2:123456789000:secret:n8n*"
           ]
         }
       ]
     }
     ```
   - **HashiCorp Vault**: Vault URL, Authentication Method, Namespace (optional). Refer to the relevant authentication method documentation.
   - **Infisical**: Service Token. Ensure to select the correct environment when creating your token.
   - **Google Cloud Platform**: Service Account Key (JSON) for a service account with roles: `Secret Manager Secret Accessor`, `Secret Manager Secret Viewer`.

4. **Save** configuration.
5. Enable the provider.

## Use Secrets in n8n Credentials
To access a secret:
1. Create a new or edit existing credential.
2. Hover on the desired field, select **Expression**.
3. Enter the expression for the secret:
   ```plaintext
   {{ $secrets.<vault-name>.<secret-name> }}
   ```

## Using External Secrets with n8n Environments
Different environments can be connected to different vaults/projects using external secrets for credential management.

## Using External Secrets in Projects
You must be an instance owner or admin to use external secrets in an RBAC project.

## Troubleshooting
- Infisical version changes may affect connectivity. Report issues as needed.
- Only set external secrets on credentials owned by instance owners or admins to ensure proper resolution in production.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

## Flow Logic in n8n

n8n allows representation of complex logic in workflows, including:

- **Splitting with Conditionals**
- **Merging Data**
- **Looping**
- **Waiting**
- **Sub-Workflows**
- **Error Handling**
- **Execution Order in Multi-Branch Workflows**

### Core Nodes

When building logic in n8n, use the following core nodes:

- **Splitting:** 
  - [IF](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/)
  - [Switch](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.switch/)
  
- **Merging:** 
  - [Merge](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/)
  - [Compare Datasets](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.comparedatasets/)
  - [Code](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)
  
- **Looping:** 
  - [IF](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/)
  - [Loop Over Items](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/)
  
- **Waiting:** 
  - [Wait](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.wait/)
  
- **Sub-Workflows:** 
  - [Execute Workflow](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/)
  - [Execute Workflow Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger/)
  
- **Error Handling:** 
  - [Stop And Error](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.stopanderror/)
  - [Error Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.errortrigger/)

----------------------------------------

# Error Handling in n8n

## Core Concepts
Error handling is a vital part of designing flow logic in n8n. An error workflow allows controlling responses to workflow execution failures effectively.

## Investigating Errors
To investigate failed executions, consider the following options:
- Review your Executions:
  - Single Workflow: [Single Workflow Executions](https://docs.n8n.io/workflows/executions/single-workflow-executions/)
  - All Workflows: [All Executions](https://docs.n8n.io/workflows/executions/all-executions/)
  - Load Data from Previous Execution: [Debug](https://docs.n8n.io/workflows/executions/debug/)
- Enable [Log Streaming](https://docs.n8n.io/log-streaming/).

## Create and Set an Error Workflow
To set an error workflow:
1. Create a new workflow, starting with the [Error Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.errortrigger/).
2. Name the workflow, e.g., `Error Handler`.
3. Save the workflow.
4. In the workflow where you want to invoke this error workflow:
   - Navigate to **Options** > **Settings**.
   - In **Error workflow**, select the created workflow (Error Handler).
   - Save the settings.
   
This error workflow will run when the associated workflow encounters an error.

## Error Data
The default error data received by the Error Trigger includes:

```json
{
  "execution": {
    "id": "231",
    "url": "https://n8n.example.com/execution/231",
    "retryOf": "34",
    "error": {
      "message": "Example Error Message",
      "stack": "Stacktrace"
    },
    "lastNodeExecuted": "Node With Error",
    "mode": "manual"
  },
  "workflow": {
    "id": "1",
    "name": "Example Workflow"
  }
}
```

The following details may vary based on the context of the error:
- `execution.id` and `execution.url` are absent if the error is in the trigger node of the main workflow.
- `execution.retryOf` is only present when the execution is a retry of a failed execution.

In cases where errors arise from the trigger node:

```json
{
  "trigger": {
    "error": {
      "context": {},
      "name": "WorkflowActivationError",
      "cause": {
        "message": "",
        "stack": ""
      },
      "timestamp": 1654609328787,
      "message": "",
      "node": {}
    },
    "mode": "trigger"
  },
  "workflow": {
    "id": "",
    "name": ""
  }
}
```

## Cause a Workflow Execution Failure using Stop And Error
To enforce failure conditions and trigger the error workflow, you can use the [Stop And Error](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.stopanderror/) node in your workflow. This is useful for scenarios such as erroneous node settings or memory overflow.

---

This document provides comprehensive coverage on error handling in n8n workflows, focusing on key elements like error workflow setup, error data structure, and failure handling mechanisms.

----------------------------------------

# Execution Order in Multi-Branch Workflows

n8n's node execution order is determined based on the version of n8n used:

- **Workflows before version 1.0:** Executes the first node of each branch, then the second node of each branch, and so on.
- **Workflows in version 1.0 and above:** Executes each branch in turn, completing one branch before starting another. The order of branches is determined by their position on the canvas, from topmost to bottommost. If branches are at the same height, the leftmost branch executes first.

## Configuration Instructions

You can change the execution order in your workflow settings.

----------------------------------------

# Looping in n8n

Looping allows the processing of multiple items or repeated actions within n8n workflows. Nodes process inputs as individual items and produce output without requiring explicit loops.

## Executing nodes once

To prevent a node from processing all incoming items, toggle the **Execute Once** parameter in the **Settings** tab. This is useful for handling multiple items but only needing to act on the first.

## Creating loops

While n8n usually automatically handles iteration for incoming items, there are cases where manual loops are necessary. Refer to the “Node exceptions” section for nodes requiring explicit loops.

### Loop until a condition is met

Connect the output of one node to the input of a previous node. Add an [IF](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/) node to control when to stop looping.

### Loop until all items are processed

Use the [Loop Over Items](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/) node to process each item individually. Set **Batch Size** to `1` for single item processing. This node batches data for processing and avoids API rate limits.

## Node exceptions

Certain nodes and operations require manual loops:

- **CrateDB**: Executes once for `insert` and `update`.
- **Code**: In **Run Once for All Items** mode processes all items based on code snippet.
- **Execute Workflow**: In **Run Once for All Items** mode.
- **HTTP Request**: Requires manual pagination handling.
- **Microsoft SQL**: Executes once for `insert`, `update`, and `delete`.
- **MongoDB**: Executes once for `insert` and `update`.
- **QuestDB**: Executes once for `insert`.
- **Redis**: Executes only once for incoming data.
- **RSS Read**: Executes once for the requested URL.
- **TimescaleDB**: Executes once for `insert` and `update`.

----------------------------------------

# Merging Data in n8n

Merging brings multiple data streams together using various nodes based on workflow requirements.

## Node Types for Merging Data

- **Merge Node**: Combine data from different sources into one.
- **Code Node**: Merge data from multiple executions of a node or multiple nodes for complex scenarios.
- **Compare Datasets Node**: Compare, merge, and output data streams based on the comparison.

## Merge Data from Different Data Streams

If your workflow splits, use the Merge node to combine the separate streams back into one. The Merge node documentation provides details on each of the merge operations.

## Merge Data from Different Nodes

You can use the Merge node to combine data generated by multiple nodes even if the workflow hasn't split into separate streams.

## Merge Data from Multiple Node Executions

Use the Code node to merge data from multiple node executions, useful in Looping scenarios. This applies when a node executes multiple times during a single workflow execution.

## Compare, Merge, and Split Again

The Compare Datasets node compares data streams before merging them and outputs up to four different data streams.

----------------------------------------

# Splitting Workflows with Conditional Nodes

Splitting uses the **IF** or **Switch** nodes. It transforms a single-branch workflow into a multi-branch workflow, which is essential for representing complex logic in n8n.

## Nodes

1. **IF Node**: A node used to evaluate a condition and execute different branches based on whether the condition is true or false. 
2. **Switch Node**: Allows for multiple condition checks, branching the workflow based on the evaluated condition.

## Workflow Example

- A user submits a bug which begins a workflow.
  - If the issue is marked as urgent, the workflow branches accordingly.
  - Additional branching can occur based on the user's support plan. 

Refer to the specific documentation for detailed usage:
- [IF Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/)
- [Switch Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.switch/)

----------------------------------------

# Sub-workflows

You can call one workflow from another workflow, allowing you to build modular workflows. Creating sub-workflows uses the **Execute Workflow** and **Execute Sub-workflow Trigger** nodes.

## Set up and use a sub-workflow

### Create the sub-workflow

1. Create a new workflow.
2. Optionally create a sub-workflow from an existing parent workflow using the **Execute Sub-workflow** node, select **Database** and **From list** options, then select **Create a sub-workflow**.
3. Configure calls to the sub-workflow:
   1. Select the **Options** menu > **Settings**, and change the **This workflow can be called by** setting.
   2. Add the **Execute Sub-workflow** trigger node.
   3. Set the **Input data mode**:
      - **Define using fields below**.
      - **Define using JSON example**.
      - **Accept all data**.
4. Add other nodes as needed and save the sub-workflow.

**Note:** Sub-workflow must not contain errors; load data into the sub-workflow before building. 

1. Create the sub-workflow and add the **Execute Sub-workflow Trigger**.
2. Set the node's **Input data mode**.
3. In the sub-workflow settings, set **Save successful production executions** to **Save**.
4. Run the parent workflow and follow steps to load data from previous executions.
5. Adjust the **Input data mode** as necessary.

### Call the sub-workflow

1. Open the workflow where the sub-workflow will be called.
2. Add the **Execute Sub-workflow** node.
3. Set the sub-workflow you want to call by ID, local file, JSON parameter, or URL.
4. Fill in the required input items.
5. Save the workflow.

When executed, data will be sent to the sub-workflow. You can follow the execution flow between parent and sub-workflows.

## How data passes between workflows

1. The **Execute Sub-workflow** node passes data to the **Execute Sub-workflow Trigger** node.
2. The last node of the sub-workflow sends data back to the parent workflow's **Execute Sub-workflow** node.

## Sub-workflow conversion

Refer to sub-workflow conversion for how to divide existing workflows into sub-workflows.

----------------------------------------

# Waiting Node in n8n

**Core Concept**  
The Waiting feature allows pausing a workflow during execution. The workflow can resume from the same point using the same data, which is beneficial for rate limiting or waiting for external events. It can wait for a specified duration or until a webhook triggers.

**Node Details**  
- **Node Name**: Wait  
- **Functionality**: Used to pause a workflow mid-execution.  
- **Reference**: For more usage details, refer to the [Wait Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.wait/).

**Usage Example**  
n8n provides a workflow template showcasing [Rate limiting and waiting for external events](https://n8n.io/workflows/1749-rate-limiting-and-waiting-for-external-events/).

----------------------------------------

# n8n Glossary

## AI agent
AI agents are systems capable of responding to requests, making decisions, and performing tasks for users using large language models (LLMs).

## AI chain
AI chains interact with LLMs in sequences of calls without persistent memory, making them unsuitable for referencing previous context.

## AI embedding
Embeddings are numerical representations of data using vectors, allowing AI to interpret complex data and relationships.

## AI groundedness
Groundedness measures how accurately an AI model's responses reflect source information, with grounded responses based on source documents.

## AI reranking
Reranking refines the order of documents to improve search relevance, used in RAG and other applications.

## AI memory
Memory in AI allows tools to persist message context across interactions, facilitating continuous conversations without re-sending context.

## AI retrieval-augmented generation (RAG)
RAG provides LLMs access to external information, retrieving documents to enhance responses with up-to-date knowledge.

## AI tool
In AI, a tool is an additional resource the AI can use for specific functionality when responding to requests.

## AI vector store
Vector stores are databases for storing numerical representations of information called embeddings.

## API
APIs (Application Programming Interfaces) provide programmatic access to data and functionality, simplifying software interactions with external systems.

## Canvas (n8n)
The canvas is the main interface in n8n for building workflows by adding and connecting nodes.

## Cluster node (n8n)
Cluster nodes in n8n are groups of nodes that work together, consisting of a root node and sub nodes to extend functionality.

## Credential (n8n)
Credentials store authentication information (username, password, API key, OAuth secrets) for connecting with apps and services.

## Data pinning (n8n)
Data pinning freezes the output data of a node temporarily during workflow development to ensure predictable data without repeated requests.

## Editor (n8n)
The n8n editor UI allows creating and managing workflows, with a canvas for composing and panels for accessing UI features.

## Entitlement (n8n)
Entitlements grant access to plan-restricted features for n8n instances. Floating entitlements can be reassigned among instances.

## Evaluation (n8n)
Evaluation tags and organizes execution history for workflow performance comparison over time, particularly for AI-centered workflows.

## Expression (n8n)
Expressions enable dynamic population of node parameters using JavaScript code, allowing values from previous nodes or workflows.

## LangChain
LangChain is an AI-development framework for working with LLMs, providing a system for linking components to build applications.

## Large language model (LLM)
LLMs are AI models designed for natural language processing, trained on large data sets to develop probabilistic language models.

## Node (n8n)
Nodes are components in n8n that define workflow execution, allow data manipulation, and connect with external services.

## Project (n8n)
Projects organize workflows, variables, and credentials into groups for easier management and collaboration.

## Root node (n8n)
A root node defines the main functionality of a cluster node, with sub nodes extending its capabilities.

## Sub node (n8n)
Sub nodes in cluster nodes extend the root node's functionality, providing access to specific services or processing capabilities.

## Template (n8n)
Templates are pre-built workflows available for import, requiring credential input and configuration adjustments.

## Trigger node (n8n)
A trigger node executes the workflow based on specific conditions, essential for all production workflows.

## Workflow (n8n)
A workflow in n8n is a collection of nodes that automate a process, executing sequentially upon trigger conditions.

----------------------------------------

# Contribution Guidelines for n8n

## Share Workflows
When sharing workflows in the community forum for debugging, use code blocks:
```
```json
// your JSON workflow here
```
```

## Contribute a Workflow Template
You can submit your workflows to n8n's template library. Refer to the [n8n Creator hub](https://www.notion.so/n8n/n8n-Creator-hub-7bd2cbe0fce0449198ecb23ff4a2f76f) for information on how to submit templates.

## Build a Node
Create an integration for a third-party service. Refer to the documentation on [node creation](https://docs.n8n.io/integrations/creating-nodes/overview/) for guidance on creating and publishing a community node.

## Code Contribution 
To contribute to n8n's codebase:
- Fix reported [issues](https://github.com/n8n-io/n8n/issues) on GitHub. 
- Follow the [CONTRIBUTING guide](https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md) to set up your development environment.
- Add functionality to existing third-party integrations or new features to n8n.

## Documentation Contribution
Contribute to n8n documentation by documenting nodes or fixing issues. 
- The documentation repository is [here](https://github.com/n8n-io/n8n-docs).
- Contribution guidelines can be found [here](https://github.com/n8n-io/n8n-docs/blob/master/CONTRIBUTING.md).

## Blogging Contribution
You can submit articles for the n8n blog:
1. Email your idea to [marketing@n8n.io](mailto:marketing@n8n.io) with the subject "Blog contribution: [Your Topic]."
2. Submit a draft in Google Docs following the [style guide](https://www.notion.so/97dc73436a624933b75ddc941a361b70?pvs=21). Include any example workflows at the end.
3. Provide a second Google Doc for author credit.

## Referral Program
Refer a candidate for open positions:
1. Review job descriptions and requirements.
2. Email [Jobs at n8n](mailto:jobs@n8n.io) with the subject "Employee referral - [job title]" and details about the candidate.
3. The referral must apply through the [careers page](https://n8n.io/careers).

## Important Notes
- Consider participating in community forums to support other members.
- Contributions in various forms—code, documentation, workflows, and blog posts—are valuable and appreciated.

----------------------------------------

# Help with n8n

## Support Options
- **Forum**: Ask for support in the n8n community forum for answers from both the n8n support team and community members.
- **Email Support**: For Cloud instance issues or enterprise customer support, contact [help@n8n.io](mailto:help@n8n.io).

## About n8n Debug Tool
To provide debugging information while seeking help:
1. Open the left-side panel.
2. Select **Help**.
3. Select **About n8n**.
4. The **About n8n** modal opens with current instance information.
5. Select **Copy debug information** to copy and paste into your forum post or support email.

### Manual Information for Earlier Versions
If you do not see the **Copy debug** option (available from version 1.49.0), manually provide the following information in your support request:
- n8n version
- Database type
- n8n EXECUTIONS_PROCESS setting
- How n8n is running (Docker, npm, n8n cloud)
- Operating system

----------------------------------------

# Self-hosting n8n

## Installation and Server Setup
- Install n8n on any platform using **npm** or **Docker**.

## Configuration
- Configure n8n using **environment variables**.

## Users and Authentication
- Set up **user authentication** for your n8n instance.

## Scaling
- Manage data, modes, and processes for **scaling n8n**.

## Securing n8n
- Set up **SSL**, **SSO**, or **2FA** to secure your n8n instance.

## Self-hosting Knowledge Prerequisites
- Requires technical knowledge in:
  - Setting up and configuring servers and containers
  - Managing application resources and scaling
  - Securing servers and applications
  - Configuring n8n

## Best Practices
- Recommended for expert users to avoid data loss, security issues, and downtime. If inexperienced, consider using n8n Cloud.

----------------------------------------

# Database Structure

## Database and Query Technology
n8n uses SQLite as the default database. The structure is similar across other databases but data types may differ. n8n uses TypeORM for queries and migrations. DBeaver can be used to inspect the n8n database.

## Tables
The following tables are created during setup in n8n:

### auth_identity
Stores details of external authentication providers for SAML.

### auth_provider_sync_history
Stores the history of a SAML connection.

### credentials_entity
Stores credentials used for authentication with integrations.

### event_destinations
Contains configurations for log streaming destinations.

### execution_data
Contains the workflow at runtime and execution data.

### execution_entity
Stores saved workflow executions.

### execution_metadata
Stores custom execution data.

### installed_nodes
Lists community nodes installed in the n8n instance.

### installed_packages
Details npm community node packages installed in the n8n instance.

### migrations
Logs all database migrations.

### project
Lists projects in the n8n instance.

### project_relation
Describes the relationship between users and projects, including user role types.

### role
Not currently used; for future work on custom roles.

### settings
Records custom instance settings which cannot be controlled via environment variables. Includes instance owner setup, user management setup, and license key.

### shared_credentials
Maps credentials to users.

### shared_workflow
Maps workflows to users.

### tag_entity
Lists all workflow tags created in the n8n instance.

### user
Contains user data.

### variables
Stores variables.

### webhook_entity
Records active webhooks in the n8n instance workflows.

### workflow_entity
Contains saved workflows in the n8n instance.

### workflow_history
Stores previous versions of workflows.

### workflow_statistics
Counts workflow IDs and their status.

### workflows_tags
Maps tags to workflows.

----------------------------------------

# Architecture

n8n's underlying architecture is essential for:
- Embedding n8n
- Customizing n8n's default databases

### Core Concepts

n8n is a workflow automation tool that allows users to integrate various services and automate tasks. Understanding its architecture is crucial for effective customization and embedding.

### Configuration Instructions

- **Custom Databases:** You can configure n8n to use a database of your choice. This allows for greater control over data management and storage options.
  
### Best Practices

- Familiarize yourself with n8n's architecture to optimize embedding and customization processes. Engaging with the community can also provide insights and clarifications regarding specific use cases.

----------------------------------------

# CLI Commands for n8n

n8n includes a CLI (command line interface) for performing actions such as starting workflows, exporting, and importing workflows and credentials.

## Running CLI Commands

### npm
Use the `n8n` command directly.

### Docker
Execute within your Docker container:
```bash
docker exec -u node -it <n8n-container-name> <n8n-cli-command>
```

## Start a Workflow

Execute a saved workflow by its ID:
```bash
n8n execute --id <ID>
```

## Change the Active Status of a Workflow

Change the active status of a workflow by its ID:
```bash
n8n update:workflow --id=<ID> --active=false
n8n update:workflow --id=<ID> --active=true
```
Set the active status for all workflows:
```bash
n8n update:workflow --all --active=false
n8n update:workflow --all --active=true
```

## Export Workflows and Credentials

### Command Flags
- `--help`: Help prompt.
- `--all`: Exports all workflows/credentials.
- `--backup`: Sets `--all --pretty --separate` for backups (optionally set `--output`).
- `--id`: The ID of the workflow to export.
- `--output`: Outputs file name or directory if using separate files.
- `--pretty`: Formats the output for readability.
- `--separate`: Exports one file per workflow (requires directory with `--output`).
- `--decrypted`: Exports credentials in plain text.

### Workflows
Export all workflows to standard output:
```bash
n8n export:workflow --all
```
Export a workflow by its ID:
```bash
n8n export:workflow --id=<ID> --output=file.json
```
Export all workflows to a directory:
```bash
n8n export:workflow --all --output=backups/latest/file.json
```
Use the backup flag:
```bash
n8n export:workflow --backup --output=backups/latest/
```

### Credentials
Export all credentials to standard output:
```bash
n8n export:credentials --all
```
Export credentials by their ID:
```bash
n8n export:credentials --id=<ID> --output=file.json
```
Export all credentials to a directory:
```bash
n8n export:credentials --all --output=backups/latest/file.json
```
Use the backup flag:
```bash
n8n export:credentials --backup --output=backups/latest/
```
Export all credentials in plain text:
```bash
n8n export:credentials --all --decrypted --output=backups/decrypted.json
```

## Import Workflows and Credentials

### Available Flags
- `--help`: Help prompt.
- `--input`: Input file name or directory for `--separate`.
- `--projectId`: Import to a specific project (not used with `--userId`).
- `--separate`: Imports `*.json` files from directory provided by `--input`.
- `--userId`: Import to a specific user (not used with `--projectId`).

### Workflows
Import a workflow from a specific file:
```bash
n8n import:workflow --input=file.json
```
Import all workflow files from a directory:
```bash
n8n import:workflow --separate --input=backups/latest/
```

### Credentials
Import credentials from a specific file:
```bash
n8n import:credentials --input=file.json
```
Import all credentials files from a directory:
```bash
n8n import:credentials --separate --input=backups/latest/
```

## License Management

### Clear License
Reset n8n to default features:
```bash
n8n license:clear
```

### Display License Info
Show existing license information:
```bash
n8n license:info
```

## User Management
Reset user management:
```bash
n8n user-management:reset
```

### Disable MFA for a User
Disable MFA for users:
```bash
n8n mfa:disable --email=johndoe@example.com
```

### Disable LDAP
Reset LDAP settings:
```bash
n8n ldap:reset
```

## Uninstall Community Nodes and Credentials

### Command Flags
- `--help`: Show CLI help.
- `--credential`: The credential type.
- `--package`: Package name of the community node.
- `--uninstall`: Uninstalls the node.
- `--userId`: User ID of the credential owner.

### Nodes
Uninstall a community node:
```bash
n8n community-node --uninstall --package <COMMUNITY_NODE_NAME>
```

### Example
Uninstall a specific community node:
```bash
n8n community-node --uninstall --package n8n-nodes-evolution-api
```

### Credentials
Uninstall a community node credential:
```bash
n8n community-node --uninstall --credential <CREDENTIAL_TYPE> --userId <ID>
```

## Security Audit
Run a security audit on your n8n instance:
```bash
n8n audit
```

----------------------------------------

# Community Edition Features

The community edition includes almost the complete feature set of n8n, except for the following features:

### Excluded Features
- Custom Variables
- Environments
- External secrets
- External storage for binary data
- Log streaming (Logging is included)
- Multi-main mode (Queue mode is included)
- Projects
- SSO (SAML, LDAP)
- Sharing (workflows, credentials)
- Version control using Git
- Workflow history (One day available with registration)

### Registered Community Edition
You can unlock extra features by registering your n8n community edition with your email to receive a license key. 

#### Features Unlocked by Registration
- Folders: Organize workflows into folders
- Debug in editor: Copy and pin execution data when working on a workflow
- One day of workflow history: 24 hours of workflow history to revert to previous workflow versions
- Custom execution data: Save, find, and annotate execution metadata

#### Registration Process
To register a new community edition instance, select the option during initial account creation. To register an existing instance:
1. Select the three dots icon in the lower-left corner.
2. Select Settings and then Usage and plan.
3. Select Unlock to enter your email and then select Send me a free license key.
4. Check your email for the account you entered.

Once you have a license key, activate it via the link in the license email or through Options > Settings > Usage and plan by selecting Enter activation key. The license will not expire after activation, though unlocked features may change in the future.

----------------------------------------

# Configuration Examples

This section contains examples for how to configure n8n to solve particular use cases.

## Isolate n8n
Instructions for isolating n8n from other applications.

## Configure the Base URL
Instructions for setting a base URL for n8n.

## Configure Custom SSL Certificate Authorities
Instructions for configuring custom SSL certificate authorities.

## Set a Custom Encryption Key
Instructions for setting a custom encryption key for n8n.

## Configure Workflow Timeouts
Instructions for configuring workflow timeouts.

## Specify Custom Nodes Location
Instructions for specifying a custom location for nodes.

## Enable Modules in Code Node
Instructions for enabling modules in the Code node.

## Set the Timezone
Instructions for setting the timezone for n8n.

## Specify User Folder Path
Instructions for specifying the path to user folders.

## Configure Webhook URLs with Reverse Proxy
Instructions for configuring webhook URLs with reverse proxy.

## Enable Prometheus Metrics
Instructions for enabling Prometheus metrics in n8n.

----------------------------------------

# Configure the Base URL for n8n's Front End Access

To configure the Base URL for n8n's front end to connect to the back end's REST API, set the `VUE_APP_URL_BASE_API` environmental variable. This configuration is necessary when hosting n8n's front end and back end separately.

## Steps

1. Requires a manual UI build. It cannot be used with the default n8n Docker image, which has the default setting for this variable as `/` (root domain).
   
2. Set the `VUE_APP_URL_BASE_API` variable as follows:

```bash
export VUE_APP_URL_BASE_API=https://n8n.example.com/
```

## Reference

Refer to the [Environment variables reference](https://docs.n8n.io/hosting/configuration/environment-variables/deployment/) for additional information on this variable.

----------------------------------------

# Specify location for your custom nodes

Every user can add custom nodes that get loaded by n8n on startup. The default location is in the subfolder `.n8n/custom` of the user who started n8n.

You can define more folders with an environment variable:

```
export N8N_CUSTOM_EXTENSIONS="/home/jim/n8n/custom-nodes;/data/n8n/nodes"
```

Refer to Environment variables reference for more information on this variable.

----------------------------------------

# Configure n8n to use your own certificate authority or self-signed certificate

You can add your own certificate authority (CA) or self-signed certificate to n8n. This means you are able to trust a certain SSL certificate instead of trusting all invalid certificates, which is a potential security risk.

**Available in version:** 1.42.0 and above.

To use this feature, place your certificates in a folder and mount the folder to `/opt/custom-certificates` in the container.

## Docker

The examples assume you have a folder called `pki` that contains your certificates.

### Docker CLI

When using the CLI, use the `-v` flag:

```bash
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -v ./pki:/opt/custom-certificates \
 docker.n8n.io/n8nio/n8n
```

### Docker Compose

```yaml
name: n8n
services:
    n8n:
        volumes:
            - ./pki:/opt/custom-certificates
        container_name: n8n
        ports:
            - 5678:5678
        image: docker.n8n.io/n8nio/n8n
```

Set the correct permissions for the imported certificates after the container is running (assuming `n8n` as the container name):

```bash
docker exec --user 0 n8n chown -R 1000:1000 /opt/custom-certificates
```

----------------------------------------

# Set a custom encryption key

n8n creates a random encryption key automatically on the first launch and saves it in the `~/.n8n` folder. This key is used to encrypt the credentials before saving them to the database. If the key isn't present in the settings file, it can be set using an environment variable for a custom key.

In queue mode, the encryption key environment variable must be specified for all workers.

## Environment Variable

- **Name**: `N8N_ENCRYPTION_KEY`
- **Usage**:
  ```bash
  export N8N_ENCRYPTION_KEY=<SOME RANDOM STRING>
  ```

Refer to the [Environment variables reference](https://docs.n8n.io/hosting/configuration/environment-variables/deployment/) for more information on this variable.

----------------------------------------

# Configure Workflow Timeout Settings

A workflow times out and gets canceled after a specified time (in seconds). If the workflow runs in the main process, a soft timeout happens after the current node finishes. If it runs in its own process, n8n attempts a soft timeout first, then kills the process after waiting for a fifth of the given timeout duration.

## Environment Variables

- `EXECUTIONS_TIMEOUT`: Default is `-1`. To set the timeout to one hour:
    ```bash
    export EXECUTIONS_TIMEOUT=3600
    ```

- `EXECUTIONS_TIMEOUT_MAX`: Set maximum execution time (in seconds) for each workflow individually. To set maximum execution time to two hours:
    ```bash
    export EXECUTIONS_TIMEOUT_MAX=7200
    ```

For more information on these variables, refer to the [Environment variables reference](https://docs.n8n.io/hosting/configuration/environment-variables/executions/).

----------------------------------------

# Isolate n8n

To prevent your n8n instance from connecting to n8n's servers, set the following environment variables to false:

```plaintext
N8N_DIAGNOSTICS_ENABLED=false
N8N_VERSION_NOTIFICATIONS_ENABLED=false
N8N_TEMPLATES_ENABLED=false
```

Unset n8n's diagnostics configuration:

```plaintext
EXTERNAL_FRONTEND_HOOKS_URLS=
N8N_DIAGNOSTICS_CONFIG_FRONTEND=
N8N_DIAGNOSTICS_CONFIG_BACKEND=
```

Refer to the [Environment variables reference](https://docs.n8n.io/hosting/configuration/environment-variables/deployment/) for more information on these variables.

----------------------------------------

# Enable Modules in Code Node

The Code node restricts importing modules for security reasons. To lift this restriction for built-in and external modules, set the following environment variables:

- `NODE_FUNCTION_ALLOW_BUILTIN`: Allow built-in modules
- `NODE_FUNCTION_ALLOW_EXTERNAL`: Allow external modules sourced from the n8n/node_modules directory. External module support is disabled if this variable is not set.

## Environment Variable Examples

```bash
# Allows usage of all builtin modules
export NODE_FUNCTION_ALLOW_BUILTIN=*
# Allows usage of only crypto
export NODE_FUNCTION_ALLOW_BUILTIN=crypto
# Allows usage of only crypto and fs
export NODE_FUNCTION_ALLOW_BUILTIN=crypto,fs
# Allow usage of external npm modules
export NODE_FUNCTION_ALLOW_EXTERNAL=moment,lodash
```

Refer to the [Environment Variables Reference](https://docs.n8n.io/hosting/configuration/environment-variables/nodes/) for more details.

----------------------------------------

# Enable Prometheus Metrics

To collect and expose metrics, n8n uses the `prom-client` library. 

The `/metrics` endpoint is disabled by default but can be enabled using the `N8N_METRICS` environment variable.

## Configuration

```bash
export N8N_METRICS=true
```

Refer to the respective Environment Variables (`N8N_METRICS_INCLUDE_*`) for configuring which metrics and labels should be exposed.

Both `main` and `worker` instances can expose metrics.

## Queue Metrics

To enable queue metrics, set the `N8N_METRICS_INCLUDE_QUEUE_METRICS` environment variable to `true`. You can adjust the refresh rate with `N8N_METRICS_QUEUE_METRICS_INTERVAL`.

Queue metrics are only available for the `main` instance in single-main mode.

### Metrics Overview

```plaintext
# HELP n8n_scaling_mode_queue_jobs_active Current number of jobs being processed across all workers in scaling mode.
# TYPE n8n_scaling_mode_queue_jobs_active gauge
n8n_scaling_mode_queue_jobs_active 0

# HELP n8n_scaling_mode_queue_jobs_completed Total number of jobs completed across all workers in scaling mode since instance start.
# TYPE n8n_scaling_mode_queue_jobs_completed counter
n8n_scaling_mode_queue_jobs_completed 0

# HELP n8n_scaling_mode_queue_jobs_failed Total number of jobs failed across all workers in scaling mode since instance start.
# TYPE n8n_scaling_mode_queue_jobs_failed counter
n8n_scaling_mode_queue_jobs_failed 0

# HELP n8n_scaling_mode_queue_jobs_waiting Current number of enqueued jobs waiting for pickup in scaling mode.
# TYPE n8n_scaling_mode_queue_jobs_waiting gauge
n8n_scaling_mode_queue_jobs_waiting 0
```

----------------------------------------

# Set the self-hosted instance timezone

The default timezone is `America/New_York`. To set a different default timezone, set `GENERIC_TIMEZONE` to the desired value. For example, to set the timezone to Berlin (Germany):

```bash
export GENERIC_TIMEZONE=Europe/Berlin
```

Refer to the [Environment variables reference](https://docs.n8n.io/hosting/configuration/environment-variables/timezone-localization/) for more information on this variable.

----------------------------------------

# Specify User Folder Path

n8n saves user-specific data such as the encryption key, SQLite database file, and the tunnel ID (if used) in the subfolder `.n8n` of the user who started n8n. You can overwrite the user folder using an environment variable.

## Environment Variable

To specify a custom user folder path, set the `N8N_USER_FOLDER` environment variable as follows:

```bash
export N8N_USER_FOLDER=/home/jim/n8n
```

Refer to the Environment variables reference for more information on this variable.

----------------------------------------

# Configure n8n Webhooks with Reverse Proxy

n8n creates the webhook URL by combining `N8N_PROTOCOL`, `N8N_HOST`, and `N8N_PORT`. If n8n runs behind a reverse proxy, it is necessary to set the webhook URL manually to ensure correct registration with external services.

## Configuration Example

```bash
export WEBHOOK_URL=https://n8n.example.com/
```

Refer to [Environment Variables Reference](https://docs.n8n.io/hosting/configuration/environment-variables/endpoints/) for more information on this variable.

----------------------------------------

# Configuration Methods

You can change n8n's settings using environment variables. For a full list of available configurations, see [Environment Variables](https://docs.n8n.io/hosting/configuration/environment-variables/).

## Set Environment Variables by Command Line

### npm

Set your desired environment variables in the terminal using the `export` command:

```bash
export <variable>=<value>
```

### Docker

In Docker, use the `-e` flag from the command line:

```bash
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e N8N_TEMPLATES_ENABLED="false" \
 docker.n8n.io/n8nio/n8n
```

## Set Environment Variables Using a File

You can also configure n8n using a configuration file. Only define the values that need to be different from the default in your configuration file. You can use multiple files.

### npm

Set the path to the JSON configuration file using the environment variable `N8N_CONFIG_FILES`:

```bash
# Bash - Single file
export N8N_CONFIG_FILES=/<path-to-config>/my-config.json
# Bash - Multiple files are comma-separated
export N8N_CONFIG_FILES=/<path-to-config>/my-config.json,/<path-to-config>/production.json
# PowerShell - Single file, persist for current user
[Environment]::SetEnvironmentVariable('N8N_CONFIG_FILES', '<path-to-config>\config.json', 'User')
```

Example file:

```json
{
 "executions": {
  "saveDataOnSuccess": "none"
 },
 "generic": {
  "timezone": "Europe/Berlin"
 },
 "nodes": {
  "exclude": "[\"n8n-nodes-base.executeCommand\",\"n8n-nodes-base.writeBinaryFile\"]"
 }
}
```

### Docker

In Docker, set your environment variables in the `n8n: environment:` element of your `docker-compose.yaml` file:

```yaml
n8n:
    environment:
      - N8N_TEMPLATES_ENABLED=false
```

### Keeping Sensitive Data in Separate Files

You can append `_FILE` to individual environment variables to provide their configuration in a separate file, enabling you to avoid passing sensitive details using environment variables. Examples include:

```bash
CREDENTIALS_OVERWRITE_DATA_FILE=/path/to/credentials_data
DB_TYPE_FILE=/path/to/db_type
DB_POSTGRESDB_DATABASE_FILE=/path/to/database_name
DB_POSTGRESDB_HOST_FILE=/path/to/database_host
DB_POSTGRESDB_PORT_FILE=/path/to/database_port
DB_POSTGRESDB_USER_FILE=/path/to/database_user
DB_POSTGRESDB_PASSWORD_FILE=/path/to/database_password
DB_POSTGRESDB_SCHEMA_FILE=/path/to/database_schema
DB_POSTGRESDB_SSL_CA_FILE=/path/to/ssl_ca
DB_POSTGRESDB_SSL_CERT_FILE=/path/to/ssl_cert
DB_POSTGRESDB_SSL_KEY_FILE=/path/to/ssl_key
DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED_FILE=/path/to/ssl_reject_unauth
```

Refer to [Environment Variables](https://docs.n8n.io/hosting/configuration/environment-variables/) for details on each variable.

----------------------------------------

# Environment Variables Overview

This section lists the environment variables that can be used to change n8n's configuration settings when self-hosting n8n.

## File-based Configuration

You can provide a configuration file for n8n. You can also append `_FILE` to certain variables to provide their configuration in a separate file.

### Environment Variables

- **BINARY_DATA**
- **CREDENTIALS**
- **DATABASE**
- **DEPLOYMENT**
- **ENDPOINTS**
- **EXECUTIONS**
- **EXTERNAL_DATA_STORAGE**
- **EXTERNAL_HOOKS**
- **EXTERNAL_SECRETS**
- **INSIGHTS**
- **LOGS**
- **LICENSE**
- **NODES**
- **QUEUE_MODE**
- **SECURITY**
- **SOURCE_CONTROL**
- **TASK_RUNNERS**
- **TIMEZONE_AND_LOCALIZATION**
- **USER_MANAGEMENT_AND_2FA**
- **WORKFLOWS**

----------------------------------------

# Binary Data Environment Variables

## File-based configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file. By default, n8n uses memory to store binary data. Enterprise users can choose to use an external service instead.

## Environment Variables

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `N8N_AVAILABLE_BINARY_DATA_MODES` | String | `filesystem` | A comma-separated list of available binary data modes. |
| `N8N_BINARY_DATA_STORAGE_PATH` | String | `N8N_USER_FOLDER/binaryData` | The path where n8n stores binary data. |
| `N8N_DEFAULT_BINARY_DATA_MODE` | String | `default` | The default binary data mode. `default` keeps binary data in memory. Set to `filesystem` to use the filesystem, or `s3` to AWS S3. Note that binary data pruning operates on the active binary data mode. If your instance stored data in S3 and you later switched to filesystem mode, n8n only prunes binary data in the filesystem. This may change in the future. |

----------------------------------------

# Credentials Environment Variables

## File-Based Configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file.

## Environment Variables for Credential Overwrites

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `CREDENTIALS_OVERWRITE_DATA`<br>`_FILE` | \* | - | Overwrites for credentials. |
| `CREDENTIALS_OVERWRITE_ENDPOINT` | String | - | The API endpoint to fetch credentials. |
| `CREDENTIALS_DEFAULT_NAME` | String | `My credentials` | The default name for credentials. |

----------------------------------------

# Database Environment Variables

## File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file.

## Default Database
By default, n8n uses SQLite. It also supports PostgreSQL. Support for MySQL and MariaDB was removed in v1.0.

## Environment Variables

### Common Variables
| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `DB_TYPE`<br>/ `_FILE` | Enum string:<br>`sqlite`, `postgresdb` | `sqlite` | The database to use. |
| `DB_TABLE_PREFIX` | \* | - | Prefix for table names. |
| `DB_PING_INTERVAL_SECONDS` | Number | `2` | Interval between pings to the database to check connection. |

### PostgreSQL-Specific Variables
| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `DB_POSTGRESDB_DATABASE`<br>/ `_FILE` | String | `n8n` | Name of PostgreSQL database. |
| `DB_POSTGRESDB_HOST`<br>/ `_FILE` | String | `localhost` | PostgreSQL host. |
| `DB_POSTGRESDB_PORT`<br>/ `_FILE` | Number | `5432` | PostgreSQL port. |
| `DB_POSTGRESDB_USER`<br>/ `_FILE` | String | `postgres` | PostgreSQL user. |
| `DB_POSTGRESDB_PASSWORD`<br>/ `_FILE` | String | - | PostgreSQL password. |
| `DB_POSTGRESDB_POOL_SIZE`<br>/ `_FILE` | Number | `2` | Number of parallel open Postgres connections. |
| `DB_POSTGRESDB_CONNECTION_TIMEOUT`<br>/ `_FILE` | Number | `20000` | Postgres connection timeout (ms). |
| `DB_POSTGRESDB_IDLE_CONNECTION_TIMEOUT`<br>/ `_FILE` | Number | `30000` | Time before an idle connection is evicted. |
| `DB_POSTGRESDB_SCHEMA`<br>/ `_FILE` | String | `public` | PostgreSQL schema. |
| `DB_POSTGRESDB_SSL_ENABLED`<br>/ `_FILE` | Boolean | `false` | Enable SSL if CA, CERT or KEY is defined. |
| `DB_POSTGRESDB_SSL_CA`<br>/ `_FILE` | String | - | PostgreSQL SSL certificate authority. |
| `DB_POSTGRESDB_SSL_CERT`<br>/ `_FILE` | String | - | PostgreSQL SSL certificate. |
| `DB_POSTGRESDB_SSL_KEY`<br>/ `_FILE` | String | - | PostgreSQL SSL key. |
| `DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED`<br>/ `_FILE` | Boolean | `true` | Reject unauthorized SSL connections. |

### SQLite-Specific Variables
| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `DB_SQLITE_POOL_SIZE` | Number | `0` | Opens SQLite file in WAL or rollback journal mode. |
| `DB_SQLITE_VACUUM_ON_STARTUP` | Boolean | `false` | Runs VACUUM operation on startup to optimize the database. |

----------------------------------------

# Deployment Environment Variables

## File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file.

## Deployment Configuration Options

| Variable                                    | Type                                | Default                              | Description                                                                                                                                                                                                                                                                  |
|---------------------------------------------|-------------------------------------|--------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `N8N_EDITOR_BASE_URL`                       | String                              | -                                    | Public URL for the editor; used for emails and SAML authentication redirect.                                                                                                                                                                                                  |
| `N8N_CONFIG_FILES`                          | String                              | -                                    | Path to JSON configuration file.                                                                                                                                                                                                                                            |
| `N8N_DISABLE_UI`                            | Boolean                             | `false`                              | Set to `true` to disable the UI.                                                                                                                                                                                                                                            |
| `N8N_PREVIEW_MODE`                          | Boolean                             | `false`                              | Set to `true` to run in preview mode.                                                                                                                                                                                                                                       |
| `N8N_TEMPLATES_ENABLED`                     | Boolean                             | `false`                              | Enables workflow templates (true) or disable (false).                                                                                                                                                                                                                        |
| `N8N_TEMPLATES_HOST`                        | String                              | `https://api.n8n.io`                | Change for custom workflow template library; your API must match n8n's endpoint structure.                                                                                                                                                                                  |
| `N8N_ENCRYPTION_KEY`                        | String                              | Random key generated by n8n        | Provide a custom key for encrypting credentials in the database.                                                                                                                                                                                                             |
| `N8N_USER_FOLDER`                           | String                              | `user-folder`                        | Path where n8n creates the `.n8n` folder for user-specific data.                                                                                                                                                                                                          |
| `N8N_PATH`                                  | String                              | `/`                                  | The path n8n deploys to.                                                                                                                                                                                                                                                    |
| `N8N_HOST`                                  | String                              | `localhost`                          | Host name n8n runs on.                                                                                                                                                                                                                                                      |
| `N8N_PORT`                                  | Number                              | `5678`                               | The HTTP port n8n runs on.                                                                                                                                                                                                                                                  |
| `N8N_LISTEN_ADDRESS`                        | String                              | `0.0.0.0`                            | IP address n8n should listen on.                                                                                                                                                                                                                                            |
| `N8N_PROTOCOL`                              | Enum string: `http`, `https`       | `http`                               | Protocol used to reach n8n.                                                                                                                                                                                                                                                |
| `N8N_SSL_KEY`                               | String                              | -                                    | SSL key for HTTPS protocol.                                                                                                                                                                                                                                                  |
| `N8N_SSL_CERT`                              | String                              | -                                    | SSL certificate for HTTPS protocol.                                                                                                                                                                                                                                          |
| `N8N_PERSONALIZATION_ENABLED`               | Boolean                             | `true`                               | Whether to ask users personalization questions.                                                                                                                                                                                                                              |
| `N8N_VERSION_NOTIFICATIONS_ENABLED`         | Boolean                             | `true`                               | Sends notifications of new versions and security updates when enabled.                                                                                                                                                                                                       |
| `N8N_VERSION_NOTIFICATIONS_ENDPOINT`        | String                              | `https://api.n8n.io/versions/`     | Endpoint to retrieve version information.                                                                                                                                                                                                                                     |
| `N8N_VERSION_NOTIFICATIONS_INFO_URL`       | String                              | `https://docs.n8n.io/getting-started/installation/updating.html` | URL for more information displayed in New Versions panel.                                                                                                                                                                                                                     |
| `N8N_DIAGNOSTICS_ENABLED`                   | Boolean                             | `true`                               | Shares selected, anonymous telemetry with n8n; disabling this prevents enabling Ask AI in the Code node.                                                                                                                                                                     |
| `N8N_DIAGNOSTICS_CONFIG_FRONTEND`          | String                              | `1zPn9bgWPzlQc0p8Gj1uiK6DOTn;https://telemetry.n8n.io`  | Telemetry configuration for the frontend.                                                                                                                                                                                                                                   |
| `N8N_DIAGNOSTICS_CONFIG_BACKEND`           | String                              | `1zPn7YoGC3ZXE9zLeTKLuQCB4F6;https://telemetry.n8n.io/v1/batch` | Telemetry configuration for the backend.                                                                                                                                                                                                                                    |
| `N8N_PUSH_BACKEND`                          | String                              | `websocket`                          | Choose between server-sent events (`sse`) or WebSockets (`websocket`) to send changes to the UI.                                                                                                                                                                            |
| `VUE_APP_URL_BASE_API`                      | String                              | `http://localhost:5678/`            | Used when building the `n8n-editor-ui` package to set how the frontend reaches the backend API.                                                                                                                                                                             |
| `N8N_HIRING_BANNER_ENABLED`                 | Boolean                             | `true`                               | Whether to show the n8n hiring banner in the console.                                                                                                                                                                                                                        |
| `N8N_PUBLIC_API_SWAGGERUI_DISABLED`        | Boolean                             | `false`                              | Whether the Swagger UI (API playground) is disabled.                                                                                                                                                                                                                         |
| `N8N_PUBLIC_API_DISABLED`                   | Boolean                             | `false`                              | Whether to disable the public API.                                                                                                                                                                                                                                           |
| `N8N_PUBLIC_API_ENDPOINT`                   | String                              | `api`                                | Path for public API endpoints.                                                                                                                                                                                                                                               |
| `N8N_GRACEFUL_SHUTDOWN_TIMEOUT`             | Number                              | `30`                                 | Time in seconds for n8n process to wait for components to shut down before exiting.                                                                                                                                                                                          |
| `N8N_DEV_RELOAD`                            | Boolean                             | `false`                              | Set to `true` for automatic reload or restart when changes occur in source code files during development.                                                                                                                                                                   |
| `N8N_REINSTALL_MISSING_PACKAGES`            | Boolean                             | `false`                              | If `true`, n8n automatically attempts to reinstall missing packages.                                                                                                                                                                                                         |
| `N8N_TUNNEL_SUBDOMAIN`                      | String                              | -                                    | Specifies the subdomain for the n8n tunnel; generates a random subdomain if not set.                                                                                                                                                                                         |
| `N8N_PROXY_HOPS`                            | Number                              | `0`                                  | Number of reverse proxies n8n is running behind.                                                                                                                                                                                                                             |

----------------------------------------

# Endpoints Environment Variables

## File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file.

## Environment Variables for Customizing Endpoints in n8n

| Variable                                            | Type    | Default                    | Description                                                                                                       |
|-----------------------------------------------------|---------|----------------------------|-------------------------------------------------------------------------------------------------------------------|
| `N8N_PAYLOAD_SIZE_MAX`                             | Number  | `16`                       | The maximum payload size in MiB.                                                                                 |
| `N8N_FORMDATA_FILE_SIZE_MAX`                       | Number  | `200`                      | Max payload size for files in form-data webhook payloads in MiB.                                                |
| `N8N_METRICS`                                      | Boolean | `false`                   | Whether to enable the `/metrics` endpoint.                                                                       |
| `N8N_METRICS_PREFIX`                               | String  | `n8n_`                     | Optional prefix for n8n specific metrics names.                                                                  |
| `N8N_METRICS_INCLUDE_DEFAULT_METRICS`             | Boolean | `true`                    | Whether to expose default system and node.js metrics.                                                            |
| `N8N_METRICS_INCLUDE_CACHE_METRICS`                | Boolean | `false`                   | Whether to include metrics for cache hits and misses.                                                            |
| `N8N_METRICS_INCLUDE_MESSAGE_EVENT_BUS_METRICS`   | Boolean | `false`                   | Whether to include metrics for events.                                                                             |
| `N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL`            | Boolean | `false`                   | Whether to include a label for the workflow ID on workflow metrics.                                               |
| `N8N_METRICS_INCLUDE_NODE_TYPE_LABEL`              | Boolean | `false`                   | Whether to include a label for the node type on node metrics.                                                    |
| `N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL`        | Boolean | `false`                   | Whether to include a label for the credential type on credential metrics.                                        |
| `N8N_METRICS_INCLUDE_API_ENDPOINTS`                | Boolean | `false`                   | Whether to expose metrics for API endpoints.                                                                      |
| `N8N_METRICS_INCLUDE_API_PATH_LABEL`               | Boolean | `false`                   | Whether to include a label for the path of API invocations.                                                      |
| `N8N_METRICS_INCLUDE_API_METHOD_LABEL`             | Boolean | `false`                   | Whether to include a label for the HTTP method of API invocations.                                               |
| `N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL`        | Boolean | `false`                   | Whether to include a label for the HTTP status code of API invocations.                                          |
| `N8N_METRICS_INCLUDE_QUEUE_METRICS`                | Boolean | `false`                   | Whether to include metrics for jobs in scaling mode. Not supported in multi-main setup.                          |
| `N8N_METRICS_QUEUE_METRICS_INTERVAL`               | Integer | `20`                      | How often (in seconds) to update queue metrics.                                                                  |
| `N8N_ENDPOINT_REST`                                | String  | `rest`                     | The path used for REST endpoint.                                                                                  |
| `N8N_ENDPOINT_WEBHOOK`                             | String  | `webhook`                  | The path used for webhook endpoint.                                                                                |
| `N8N_ENDPOINT_WEBHOOK_TEST`                        | String  | `webhook-test`             | The path used for test-webhook endpoint.                                                                          |
| `N8N_ENDPOINT_WEBHOOK_WAIT`                        | String  | `webhook-waiting`          | The path used for waiting-webhook endpoint.                                                                       |
| `WEBHOOK_URL`                                      | String  | -                          | Used to manually provide the Webhook URL when running n8n behind a reverse proxy.                                |
| `N8N_DISABLE_PRODUCTION_MAIN_PROCESS`              | Boolean | `false`                   | Disable production webhooks from main process.                                                                    |

----------------------------------------

# Executions Environment Variables

## File-based Configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file. 

## Environment Variables for Workflow Execution Settings

| Variable                                   | Type                                            | Default | Description                                                                                                                                                   |
|--------------------------------------------|-------------------------------------------------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `EXECUTIONS_MODE`                          | Enum string: `regular`, `queue`                  | `regular` | Whether executions should run directly or using queue.                                                                                                      |
| `EXECUTIONS_TIMEOUT`                       | Number                                          | `-1`    | Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows.              |
| `EXECUTIONS_TIMEOUT_MAX`                   | Number                                          | `3600`  | The maximum execution time (in seconds) that users can set for an individual workflow.                                                                     |
| `EXECUTIONS_DATA_SAVE_ON_ERROR`           | Enum string: `all`, `none`                     | `all`   | Whether n8n saves execution data on error.                                                                                                                |
| `EXECUTIONS_DATA_SAVE_ON_SUCCESS`         | Enum string: `all`, `none`                     | `all`   | Whether n8n saves execution data on success.                                                                                                              |
| `EXECUTIONS_DATA_SAVE_ON_PROGRESS`        | Boolean                                         | `false` | Whether to save progress for each node executed (true) or not (false).                                                                                    |
| `EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS`  | Boolean                                         | `true`  | Whether to save data of executions when started manually.                                                                                                 |
| `EXECUTIONS_DATA_PRUNE`                    | Boolean                                         | `true`  | Whether to delete data of past executions on a rolling basis.                                                                                             |
| `EXECUTIONS_DATA_MAX_AGE`                  | Number                                          | `336`   | The execution age (in hours) before it's deleted.                                                                                                        |
| `EXECUTIONS_DATA_PRUNE_MAX_COUNT`          | Number                                          | `10000` | Maximum number of executions to keep in the database. 0 = no limit.                                                                                       |
| `EXECUTIONS_DATA_HARD_DELETE_BUFFER`       | Number                                          | `1`     | How old (hours) the finished execution data has to be to get hard-deleted.                                                                                 |
| `EXECUTIONS_DATA_PRUNE_HARD_DELETE_INTERVAL` | Number                                        | `15`    | How often (minutes) execution data should be hard-deleted.                                                                                                |
| `EXECUTIONS_DATA_PRUNE_SOFT_DELETE_INTERVAL` | Number                                        | `60`    | How often (minutes) execution data should be soft-deleted.                                                                                               |
| `N8N_CONCURRENCY_PRODUCTION_LIMIT`         | Number                                          | `-1`    | Max production executions allowed to run concurrently, in both regular and scaling modes. `-1` to disable in regular mode.                                 |

----------------------------------------

# External Data Storage Environment Variables

## File-based Configuration

Add `_FILE` to individual variables for configuration in a separate file.

## Environment Variables

| Variable                                      | Type    | Default | Description                                                                                      |
|-----------------------------------------------|---------|---------|--------------------------------------------------------------------------------------------------|
| `N8N_EXTERNAL_STORAGE_S3_HOST`               | String  | -       | Host of the n8n bucket in S3-compatible external storage. For example, `s3.us-east-1.amazonaws.com` |
| `N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME`        | String  | -       | Name of the n8n bucket in S3-compatible external storage.                                       |
| `N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION`      | String  | -       | Region of the n8n bucket in S3-compatible external storage. For example, `us-east-1`           |
| `N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY`         | String  | -       | Access key in S3-compatible external storage.                                                  |
| `N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET`      | String  | -       | Access secret in S3-compatible external storage.                                               |
| `N8N_EXTERNAL_STORAGE_S3_AUTH_AUTO_DETECT`   | Boolean | -       | Use automatic credential detection to authenticate S3 calls, ignoring access key and secret.   |

----------------------------------------

# External Hooks Environment Variables

## File-based Configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file. Refer to the section on keeping sensitive data in separate files for more details.

## External Hooks Definition
You can define external hooks that n8n executes whenever a specific operation runs. Refer to the Backend Hooks section for examples of available hooks and Hook Files for information on file formatting.

## Environment Variables Table

| Variable                          | Type   | Description                                                                                          |
|-----------------------------------|--------|------------------------------------------------------------------------------------------------------|
| `EXTERNAL_HOOK_FILES`             | String | Files containing backend external hooks. Provide multiple files as a colon-separated list (" `:`").  |
| `EXTERNAL_FRONTEND_HOOKS_URLS`    | String | URLs to files containing frontend external hooks. Provide multiple URLs as a colon-separated list (" `:`"). |

----------------------------------------

# External Secrets Environment Variables

## File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file. 

## External Secrets Store
Use an external secrets store to manage credentials for n8n.

## Environment Variables

| Variable                               | Type   | Default        | Description                                          |
|----------------------------------------|--------|----------------|------------------------------------------------------|
| `N8N_EXTERNAL_SECRETS_UPDATE_INTERVAL` | Number | `300` (5 minutes) | How often (in seconds) to check for secret updates.   |

----------------------------------------

# Insights Environment Variables

## File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file.

## Variable Definitions

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `N8N_DISABLED_MODULES` | String | - | Set to `insights` to disable the feature and metrics collection for an instance. |
| `N8N_INSIGHTS_COMPACTION_BATCH_SIZE` | Number | 500 | The number of raw insights data to compact in a single batch. |
| `N8N_INSIGHTS_COMPACTION_DAILY_TO_WEEKLY_THRESHOLD_DAYS` | Number | 180 | The maximum age (in days) of daily insights data to compact. |
| `N8N_INSIGHTS_COMPACTION_HOURLY_TO_DAILY_THRESHOLD_DAYS` | Number | 90 | The maximum age (in days) of hourly insights data to compact. |
| `N8N_INSIGHTS_COMPACTION_INTERVAL_MINUTES` | Number | 60 | Interval (in minutes) at which compaction should run. |
| `N8N_INSIGHTS_FLUSH_BATCH_SIZE` | Number | 1000 | The maximum number of insights data to keep in the buffer before flushing. |
| `N8N_INSIGHTS_FLUSH_INTERVAL_SECONDS` | Number | 30 | The interval (in seconds) at which the insights data should be flushed to the database. |

----------------------------------------

# License Environment Variables

## File-Based Configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file. 

## Required Environment Variables

To enable certain licensed features, you must activate your license. This can be done through the UI or by setting the following environment variables:

| Variable                                  | Type    | Default                         | Description                                                                                                                                                                                                                                                                                     |
|-------------------------------------------|---------|---------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `N8N_HIDE_USAGE_PAGE`                    | boolean | `false`                         | Hide the usage and plans page in the app.                                                                                                                                                                                                                                                      |
| `N8N_LICENSE_ACTIVATION_KEY`             | String  | `''`                            | Activation key to initialize license. Not applicable if the n8n instance was already activated.                                                                                                                                                                                              |
| `N8N_LICENSE_AUTO_RENEW_ENABLED`         | Boolean | `true`                          | Enables (true) or disables (false) autorenewal for licenses. If disabled, you must manually renew the license every 10 days by navigating to **Settings** > **Usage and plan**, and pressing `F5`. Failure to renew the license will disable all licensed features.                         |
| `N8N_LICENSE_DETACH_FLOATING_ON_SHUTDOWN`| Boolean | `true`                          | Controls whether the instance releases floating entitlements back to the pool upon shutdown. Set to `true` to allow other instances to reuse the entitlements, or `false` to retain them. For production instances that must always keep their licensed features, set this to `false`.          |
| `N8N_LICENSE_SERVER_URL`                  | String  | `https://license.n8n.io/v1`   | Server URL to retrieve license.                                                                                                                                                                                                                                                                |
| `N8N_LICENSE_TENANT_ID`                   | Number  | `1`                             | Tenant ID associated with the license. Only set this variable if explicitly instructed by n8n.                                                                                                                                                                                              |
| `https_proxy_license_server`              | String  | `https://user:pass@proxy:port`| Proxy server URL for HTTPS requests to retrieve license. This variable name needs to be lowercase.                                                                                                                                                                                            |

----------------------------------------

# Logs environment variables

## File-based configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file.

## n8n logs

| Variable                          | Type                                    | Default | Description                                                                                                                                              |
|-----------------------------------|-----------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------|
| `N8N_LOG_LEVEL`                   | Enum string: `info`, `warn`, `error`, `debug` | `info`  | Log output level.                                                                                                                                      |
| `N8N_LOG_OUTPUT`                  | Enum string: `console`, `file`         | `console` | Where to output logs. Provide multiple values as a comma-separated list.                                                                                |
| `N8N_LOG_FORMAT`                  | Enum string: `text`, `json`            | `text`  | The log format used: `text` for human-readable messages, `json` for structured logging.                                                                |
| `N8N_LOG_FILE_COUNT_MAX`          | Number                                  | `100`   | Max number of log files to keep.                                                                                                                       |
| `N8N_LOG_FILE_SIZE_MAX`           | Number                                  | `16`    | Max size of each log file in MB.                                                                                                                      |
| `N8N_LOG_FILE_LOCATION`            | String                                  | `<n8n-directory-path>/logs/n8n.log` | Log file location, requires `N8N_LOG_OUTPUT` set to `file`.                                                                                           |
| `DB_LOGGING_ENABLED`               | Boolean                                 | `false` | Whether to enable database-specific logging.                                                                                                           |
| `DB_LOGGING_OPTIONS`               | Enum string: `query`, `error`, `schema`, `warn`, `info`, `log` | `error` | Database log output level. To enable all logging, specify `all`.                                                                                      |
| `DB_LOGGING_MAX_EXECUTION_TIME`    | Number                                  | `1000`  | Maximum execution time (in milliseconds) before n8n logs a warning. Set to `0` to disable long-running query warning.                                |
| `CODE_ENABLE_STDOUT`               | Boolean                                 | `false` | Set to `true` to send Code node logs to process's stdout for debugging, monitoring, or logging purposes.                                               |
| `NO_COLOR`                         | any                                     | `undefined` | Set to any value to output logs without ANSI colors.                                                                                                   |

## Log streaming

| Variable                                   | Type    | Default | Description                                                                              |
|--------------------------------------------|---------|---------|------------------------------------------------------------------------------------------|
| `N8N_EVENTBUS_CHECKUNSENTINTERVAL`        | Number  | `0`     | How often (in milliseconds) to check for unsent event messages. Set to `0` to disable it. |
| `N8N_EVENTBUS_LOGWRITER_SYNCFILEACCESS`   | Boolean | `false` | Whether all file access happens synchronously within the thread (true) or not (false).  |
| `N8N_EVENTBUS_LOGWRITER_KEEPLOGCOUNT`      | Number  | `3`     | Number of event log files to keep.                                                      |
| `N8N_EVENTBUS_LOGWRITER_MAXFILESIZEINKB`  | Number  | `10240` | Maximum size (in kilo-bytes) of an event log file before a new one starts.            |
| `N8N_EVENTBUS_LOGWRITER_LOGBASENAME`       | String  | `n8nEventLog` | Basename of the event log file.                                                      |

----------------------------------------

# Nodes Environment Variables

This document lists the environment variables configuration options for managing nodes in n8n, including specifying which nodes to load or exclude, importing built-in or external modules in the Code node, and enabling community nodes.

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `NODES_INCLUDE` | Array of strings | - | Specify which nodes to load. |
| `NODES_EXCLUDE` | Array of strings | - | Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: `NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]"` |
| `NODE_FUNCTION_ALLOW_BUILTIN` | String | - | Permit users to import specific built-in modules in the Code node. Use `*` to allow all. n8n disables importing modules by default. |
| `NODE_FUNCTION_ALLOW_EXTERNAL` | String | - | Permit users to import specific external modules (from `n8n/node_modules`) in the Code node. n8n disables importing modules by default. |
| `NODES_ERROR_TRIGGER_TYPE` | String | `n8n-nodes-base.errorTrigger` | Specify which node type to use as Error Trigger. |
| `N8N_CUSTOM_EXTENSIONS` | String | - | Specify the path to directories containing your custom nodes. |
| `N8N_COMMUNITY_PACKAGES_ENABLED` | Boolean | `true` | Enables (true) or disables (false) the functionality to install and load community nodes. |
| `N8N_COMMUNITY_PACKAGES_REGISTRY` | String | `https://registry.npmjs.org` | NPM registry URL to pull community packages from (license required). |
| `N8N_VERIFIED_PACKAGES_ENABLED` | Boolean | `true` | Controls whether to show verified community nodes in the nodes panel for installation and use. |
| `N8N_UNVERIFIED_PACKAGES_ENABLED` | Boolean | `true` | Controls whether to enable the installation and use of unverified community nodes from an NPM registry. |
| `N8N_COMMUNITY_PACKAGES_PREVENT_LOADING` | Boolean | `false` | Prevents (true) or allows (false) loading installed community nodes on instance startup. | 

### File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file.

----------------------------------------

# Queue Mode Environment Variables

## File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file.

## Queue Mode Variables

| Variable                             | Type    | Default | Description                                                                                          |
|--------------------------------------|---------|---------|------------------------------------------------------------------------------------------------------|
| `QUEUE_BULL_PREFIX`                  | String  | -       | Prefix to use for all queue keys.                                                                    |
| `QUEUE_BULL_REDIS_DB`                | Number  | `0`     | The Redis database used.                                                                              |
| `QUEUE_BULL_REDIS_HOST`              | String  | `localhost` | The Redis host.                                                                                     |
| `QUEUE_BULL_REDIS_PORT`              | Number  | `6379`  | The Redis port used.                                                                                 |
| `QUEUE_BULL_REDIS_USERNAME`          | String  | -       | The Redis username (requires Redis version 6 or above).                                             |
| `QUEUE_BULL_REDIS_PASSWORD`          | String  | -       | The Redis password.                                                                                  |
| `QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD`  | Number  | `10000` | The Redis timeout threshold (in ms).                                                                  |
| `QUEUE_BULL_REDIS_CLUSTER_NODES`     | String  | -       | Comma-separated list of Redis Cluster nodes in `host:port` format. Uses cluster client in queue mode. |
| `QUEUE_BULL_REDIS_TLS`               | Boolean | `false` | Enable TLS on Redis connections.                                                                      |
| `QUEUE_BULL_REDIS_DUALSTACK`         | Boolean | `false` | Enable dual-stack support (IPv4 and IPv6) on Redis connections.                                      |
| `QUEUE_WORKER_TIMEOUT` (deprecated)  | Number  | `30`    | Use `N8N_GRACEFUL_SHUTDOWN_TIMEOUT` instead. Time to wait for running executions before shutdown.   |
| `QUEUE_HEALTH_CHECK_ACTIVE`          | Boolean | `false` | Whether to enable (true) or disable (false) health checks.                                          |
| `QUEUE_HEALTH_CHECK_PORT`            | Number  | -       | The port to serve health checks on.                                                                   |
| `QUEUE_WORKER_LOCK_DURATION`         | Number  | `30000` | Lease period for a worker on a message (in ms).                                                     |
| `QUEUE_WORKER_LOCK_RENEW_TIME`       | Number  | `15000` | Frequency of lease renewal (in ms).                                                                    |
| `QUEUE_WORKER_STALLED_INTERVAL`       | Number  | `30000` | Frequency for checking stalled jobs (0 for never).                                                  |
| `QUEUE_WORKER_MAX_STALLED_COUNT`     | Number  | `1`     | Maximum number of times a stalled job will be re-processed.                                         |

## Multi-main Setup Variables

| Variable                                     | Type    | Default | Description                                                                               |
|----------------------------------------------|---------|---------|-------------------------------------------------------------------------------------------|
| `N8N_MULTI_MAIN_SETUP_ENABLED`               | Boolean | `false` | Whether to enable multi-main setup for queue mode (license required).                    |
| `N8N_MULTI_MAIN_SETUP_KEY_TTL`              | Number  | `10`    | Time to live (in seconds) for leader key in multi-main setup.                           |
| `N8N_MULTI_MAIN_SETUP_CHECK_INTERVAL`        | Number  | `3`     | Interval (in seconds) for leader check in multi-main setup.                             |

----------------------------------------

# Security Environment Variables

## File-based Configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file. 

## Environment Variables

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `N8N_BLOCK_ENV_ACCESS_IN_NODE` | Boolean | `false` | Controls access to environment variables in expressions and the Code node. |
| `N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES` | Boolean | `true` | Blocks access to all files in the `.n8n` directory and user-defined configuration files. |
| `N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS` | Boolean | `false` | Attempts to set 0600 permissions for the settings file, restricting access to the owner. |
| `N8N_RESTRICT_FILE_ACCESS_TO` | String |  | Limits access to specified directories, using a colon-separated list. |
| `N8N_SECURITY_AUDIT_DAYS_ABANDONED_WORKFLOW` | Number | 90 | Sets the number of days to consider a workflow abandoned if not executed. |
| `N8N_SECURE_COOKIE` | Boolean | `true` | Ensures cookies are only sent over HTTPS. |
| `N8N_SAMESITE_COOKIE` | Enum string: `strict`, `lax`, `none` | `lax` | Controls cross-site cookie behavior: <br>- `strict`: First-party requests only.<br>- `lax`: Top-level navigation requests.<br>- `none`: Sent in all contexts (requires HTTPS). |

----------------------------------------

# Source Control Environment Variables

## File-based Configuration
Add `_FILE` to individual variables for configuration in a separate file. For details, refer to the documentation on keeping sensitive data in separate files.

n8n uses Git-based source control to manage environments. Refer to the guides on linking a Git repository to an n8n instance and configuring your source control.

## Environment Variables

| Variable                                         | Type   | Default   | Description                                                                                                 |
|--------------------------------------------------|--------|-----------|-------------------------------------------------------------------------------------------------------------|
| `N8N_SOURCECONTROL_DEFAULT_SSH_KEY_TYPE`       | String | `ed25519` | Set to `rsa` to make RSA the default SSH key type for source control setup.                               |

----------------------------------------

# Task Runner Environment Variables

## File-based Configuration

Add `_FILE` to individual variables for file-based configuration. 

## n8n Instance Environment Variables

| Variable                                   | Type                                     | Default                  | Description                                                                                           |
|--------------------------------------------|------------------------------------------|--------------------------|-------------------------------------------------------------------------------------------------------|
| `N8N_RUNNERS_ENABLED`                      | Boolean                                  | `false`                 | Are task runners enabled.                                                                             |
| `N8N_RUNNERS_MODE`                         | Enum string: `internal`, `external`     | `internal`               | Mode for launching and running the task runner.                                                     |
| `N8N_RUNNERS_AUTH_TOKEN`                   | String                                   | Random string            | Shared secret for task runner authentication, required in `external` mode.                         |
| `N8N_RUNNERS_BROKER_PORT`                  | Number                                   | `5679`                   | Port the task broker listens on for connections.                                                    |
| `N8N_RUNNERS_BROKER_LISTEN_ADDRESS`        | String                                   | `127.0.0.1`              | Address the task broker listens on.                                                                  |
| `N8N_RUNNERS_MAX_PAYLOAD`                  | Number                                   | `1,073,741,824`          | Max payload size in bytes for communication between broker and runner.                               |
| `N8N_RUNNERS_MAX_OLD_SPACE_SIZE`           | String                                   |                          | `--max-old-space-size` option for the task runner (in MB).                                         |
| `N8N_RUNNERS_MAX_CONCURRENCY`              | Number                                   | `5`                      | Number of concurrent tasks a task runner can execute.                                               |
| `N8N_RUNNERS_TASK_TIMEOUT`                 | Number                                   | `60`                     | How long (in seconds) a task can take before it aborts. Must be greater than 0.                     |
| `N8N_RUNNERS_HEARTBEAT_INTERVAL`           | Number                                   | `30`                     | Frequency (in seconds) for sending heartbeats to the broker.                                        |

## Task Runner Launcher Environment Variables

| Variable                                   | Type                                     | Default                  | Description                                                                                           |
|--------------------------------------------|------------------------------------------|--------------------------|-------------------------------------------------------------------------------------------------------|
| `N8N_RUNNERS_LAUNCHER_LOG_LEVEL`          | Enum string: `debug`, `info`, `warn`, `error` | `info`               | Log message verbosity.                                                                                |
| `N8N_RUNNERS_AUTH_TOKEN`                   | String                                   | -                        | Shared secret for authentication.                                                                     |
| `N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT`       | Number                                   | `15`                     | Seconds to wait before shutting down an idle runner.                                                |
| `N8N_RUNNERS_TASK_BROKER_URI`             | String                                   | `http://127.0.0.1:5679` | URI of the task broker server (n8n instance).                                                        |
| `N8N_RUNNERS_LAUNCHER_HEALTH_CHECK_PORT`  | Number                                   | `5680`                   | Port for the launcher's health check server.                                                         |
| `N8N_RUNNERS_MAX_PAYLOAD`                  | Number                                   | `1,073,741,824`          | Max payload size in bytes for communication.                                                         |
| `N8N_RUNNERS_MAX_CONCURRENCY`              | Number                                   | `5`                      | Number of concurrent tasks a task runner can execute.                                               |
| `NODE_OPTIONS`                             | String                                   | -                        | [Node.js options](https://nodejs.org/api/cli.html#node_optionsoptions).                            |

## Task Runner Environment Variables

| Variable                                   | Type                                     | Default                  | Description                                                                                           |
|--------------------------------------------|------------------------------------------|--------------------------|-------------------------------------------------------------------------------------------------------|
| `N8N_RUNNERS_GRANT_TOKEN`                  | String                                   | Random string            | Token for the runner to authenticate with the task broker.                                           |
| `N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT`       | Number                                   | `15`                     | Seconds to wait before shutting down an idle runner.                                                |
| `N8N_RUNNERS_TASK_BROKER_URI`             | String                                   | `http://127.0.0.1:5679` | URI of the task broker server (n8n instance).                                                        |
| `N8N_RUNNERS_LAUNCHER_HEALTH_CHECK_PORT`  | Number                                   | `5680`                   | Port for the launcher's health check server.                                                         |
| `N8N_RUNNERS_MAX_PAYLOAD`                  | Number                                   | `1,073,741,824`          | Max payload size in bytes for communication.                                                         |
| `N8N_RUNNERS_MAX_CONCURRENCY`              | Number                                   | `5`                      | Number of concurrent tasks a task runner can execute.                                               |
| `NODE_FUNCTION_ALLOW_BUILTIN`              | String                                   | -                        | Permit importing specific built-in modules in the Code node. Use `*` to allow all.                  |
| `NODE_FUNCTION_ALLOW_EXTERNAL`              | String                                   | -                        | Permit importing specific external modules in the Code node.                                        |
| `N8N_RUNNERS_ALLOW_PROTOTYPE_MUTATION`     | Boolean                                  | `false`                 | Allow prototype mutation for external libraries.                                                     |
| `GENERIC_TIMEZONE`                         | *                                        | `America/New_York`      | Default timezone for the n8n instance.                                                               |

----------------------------------------

# Timezone and Localization Environment Variables

## File-Based Configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file. Refer to the configuration methods documentation for more details.

## Environment Variables

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `GENERIC_TIMEZONE` | \* | `America/New_York` | The n8n instance timezone. Important for schedule nodes (such as Cron). |
| `N8N_DEFAULT_LOCALE` | String | `en` | A locale identifier compatible with the Accept-Language header. n8n doesn't support regional identifiers, such as `de-AT`. When running in a locale other than the default, n8n displays UI strings in the selected locale and falls back to `en` for any untranslated strings. |

----------------------------------------

# User Management SMTP and Two-Factor Authentication Environment Variables

## File-based Configuration
Add `_FILE` to individual variables to provide their configuration in a separate file.

## Environment Variables

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `N8N_EMAIL_MODE` | String | `smtp` | Enable emails. |
| `N8N_SMTP_HOST` | String | - | Your SMTP server name. |
| `N8N_SMTP_PORT` | Number | - | Your SMTP server port. |
| `N8N_SMTP_USER` | String | - | Your SMTP username. |
| `N8N_SMTP_PASS` | String | - | Your SMTP password. |
| `N8N_SMTP_OAUTH_SERVICE_CLIENT` | String | - | Client ID for 2LO with a service account. |
| `N8N_SMTP_OAUTH_PRIVATE_KEY` | String | - | Private key for 2LO with a service account. |
| `N8N_SMTP_SENDER` | String | - | Sender email address, can include sender name (e.g., _N8N `<contact@n8n.com>`_). |
| `N8N_SMTP_SSL` | Boolean | `true` | Use SSL for SMTP (true) or not (false). |
| `N8N_SMTP_STARTTLS` | Boolean | `true` | Use STARTTLS for SMTP (true) or not (false). |
| `N8N_UM_EMAIL_TEMPLATES_INVITE` | String | - | Path to your HTML email template for invite emails. |
| `N8N_UM_EMAIL_TEMPLATES_PWRESET` | String | - | Path to your HTML email template for password reset emails. |
| `N8N_UM_EMAIL_TEMPLATES_WORKFLOW_SHARED` | String | - | Path to template for workflow sharing notifications. |
| `N8N_UM_EMAIL_TEMPLATES_CREDENTIALS_SHARED` | String | - | Path to template for credential sharing notifications. |
| `N8N_USER_MANAGEMENT_JWT_SECRET` | String | - | Specific JWT secret; n8n generates one on start by default. |
| `N8N_USER_MANAGEMENT_JWT_DURATION_HOURS` | Number | 168 | Expiration date for the JWTs in hours. |
| `N8N_USER_MANAGEMENT_JWT_REFRESH_TIMEOUT_HOURS` | Number | 0 | Hours before the JWT expires to automatically refresh it. |
| `N8N_MFA_ENABLED` | Boolean | `true` | Enable (true) or disable (false) two-factor authentication. |

----------------------------------------

# Workflows Environment Variables

## File-based Configuration
You can add `_FILE` to individual variables to provide their configuration in a separate file. 

## Environment Variables

| Variable | Type | Default | Description |
| --- | --- | --- | --- |
| `N8N_ONBOARDING_FLOW_DISABLED` | Boolean | `false` | Whether to disable onboarding tips when creating a new workflow (true) or not (false). |
| `N8N_WORKFLOW_ACTIVATION_BATCH_SIZE` | Number | `1` | How many workflows to activate simultaneously during startup. |
| `N8N_WORKFLOW_CALLER_POLICY_DEFAULT_OPTION` | String | `workflowsFromSameOwner` | Which workflows can call a workflow. Options are: `any`, `none`, `workflowsFromAList`, `workflowsFromSameOwner`. This feature requires Workflow sharing. |
| `N8N_WORKFLOW_TAGS_DISABLED` | Boolean | `false` | Whether to disable workflow tags (true) or enable tags (false). |
| `WORKFLOWS_DEFAULT_NAME` | String | `My workflow` | The default name used for new workflows. |

----------------------------------------

# Supported Databases

## Default Database
- **SQLite**: Used by default to save credentials, past executions, and workflows.
- **PostgresDB**: Supported as an alternative database.

## Shared Settings
- **DB_TABLE_PREFIX**: Prefix for table names (default: -).

## PostgresDB Configuration
To use PostgresDB, set the following environment variables:

- `DB_TYPE=postgresdb`
- `DB_POSTGRESDB_DATABASE` (default: 'n8n')
- `DB_POSTGRESDB_HOST` (default: 'localhost')
- `DB_POSTGRESDB_PORT` (default: 5432)
- `DB_POSTGRESDB_USER` (default: 'postgres')
- `DB_POSTGRESDB_PASSWORD` (default: empty)
- `DB_POSTGRESDB_SCHEMA` (default: 'public')
- `DB_POSTGRESDB_SSL_CA` (default: undefined): Path to the server's CA certificate for connection validation.
- `DB_POSTGRESDB_SSL_CERT` (default: undefined): Path to the client's TLS certificate.
- `DB_POSTGRESDB_SSL_KEY` (default: undefined): Path to the client's private key.
- `DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED` (default: true): Specifies if TLS connections failing validation should be rejected.

### Example Configuration
```bash
export DB_TYPE=postgresdb
export DB_POSTGRESDB_DATABASE=n8n
export DB_POSTGRESDB_HOST=postgresdb
export DB_POSTGRESDB_PORT=5432
export DB_POSTGRESDB_USER=n8n
export DB_POSTGRESDB_PASSWORD=n8n
export DB_POSTGRESDB_SCHEMA=n8n
# optional:
export DB_POSTGRESDB_SSL_CA=$(pwd)/ca.crt
export DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false
n8n start
```

## Required Permissions
n8n needs to create and modify the schemas of the tables it uses. Recommended permissions include:

```sql
CREATE DATABASE n8n-db;
CREATE USER n8n-user WITH PASSWORD 'random-password';
GRANT ALL PRIVILEGES ON DATABASE n8n-db TO n8n-user;
```

## TLS Configuration
Configurations include:
- Not declaring (default): Connect with `SSL=off`.
- Declaring only the CA and unauthorized flag: Connect with `SSL=on` and verify the server's signature.
- Declaring `_{CERT,KEY}` along with the above: Use certificate and key for client TLS authentication.

## SQLite Configuration
- **Default Database Location**: The database file is located at `~/.n8n/database.sqlite`.

----------------------------------------

# Task Runners

Task runners are a mechanism to execute tasks securely and performantly, executing user-provided JavaScript code in the Code node.

## How It Works

The task runner feature includes:
- **Task Runner**: Executes requested tasks.
- **Task Broker**: Coordinates communication between task runners and requesters.
- **Task Requester**: Submits task requests.

An n8n instance acts as the broker, with the Code node serving as the task requester.

## Task Runner Modes

### Internal Mode

In internal mode, the n8n instance launches the task runner as a child process, sharing the same `uid` and `gid` as n8n.

### External Mode

In external mode, an external orchestrator (e.g., Kubernetes) launches the task runner. Typically configured to run as a side-car container alongside n8n. Each n8n container requires its own task runner when using Queue mode.

## Setting Up External Mode

### Configuring n8n Instance in External Mode

Set the following environment variables:
| Environment Variables | Description |
| --- | --- |
| `N8N_RUNNERS_ENABLED=true` | Enables task runners. |
| `N8N_RUNNERS_MODE=external` | Use task runners in external mode. |
| `N8N_RUNNERS_AUTH_TOKEN=<random secure shared secret>` | A shared secret task runners use to connect to the broker. |
| `N8N_RUNNERS_BROKER_LISTEN_ADDRESS=0.0.0.0` | Allows task broker to accept external connections. |

### Configuring Task Runners in External Mode

Run a task runner container from the n8n Docker image with the following properties:
| Configuration | Description |
| --- | --- |
| `command` | `["/usr/local/bin/task-runner-launcher", "javascript"]` |
| `livenessProbe` | `GET /healthz`, port `5680` |

Set these environment variables for the container:
| Environment Variables | Description |
| --- | --- |
| `N8N_RUNNERS_AUTH_TOKEN=<random secure shared secret>` | Shared secret for task runner connection to the broker. |
| `N8N_RUNNERS_MAX_CONCURRENCY=5` | Number of concurrent tasks the runner can execute. |
| `N8N_RUNNERS_TASK_BROKER_URI=localhost:5679` | Address of the task broker server. |
| `N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT=15` | Seconds of inactivity before shutting down the task runner process. |
| `NODE_OPTIONS=--max-old-space-size=<limit>` | Memory limit for the task runner Node.js process. Should be lower than the container's limit. |
| `GENERIC_TIMEZONE` | Same default timezone as configured for the n8n instance. |

For more detailed information, see task runner environment variables documentation.

----------------------------------------

## User Management Configuration for Self-Hosted n8n

User management in n8n allows inviting users to your instance. This section outlines the steps to configure your n8n instance for user management.

### Setup Stages

1. **Configure SMTP server for user invites and password resets**.
2. **Start n8n and complete the in-app setup**.
3. **Invite users**.

### Step 1: SMTP Configuration

1. Obtain the following from your SMTP provider:
   - Server name
   - SMTP username
   - SMTP password
   - SMTP sender name

2. Set the following SMTP environment variables in your n8n instance:

| Variable                                      | Type     | Description                                                                                     | Required? |
|-----------------------------------------------|----------|-------------------------------------------------------------------------------------------------|-----------|
| `N8N_EMAIL_MODE`                             | string   | `smtp`                                                                                        | Required  |
| `N8N_SMTP_HOST`                              | string   | Your SMTP server name                                                                          | Required  |
| `N8N_SMTP_PORT`                              | number   | Your SMTP server port. Default is `465`.                                                      | Optional  |
| `N8N_SMTP_USER`                              | string   | Your SMTP username                                                                              | Optional  |
| `N8N_SMTP_PASS`                              | string   | Your SMTP password                                                                              | Optional  |
| `N8N_SMTP_OAUTH_SERVICE_CLIENT`              | string   | Your OAuth service client                                                                       | Optional  |
| `N8N_SMTP_OAUTH_PRIVATE_KEY`                 | string   | Your OAuth private key                                                                          | Optional  |
| `N8N_SMTP_SENDER`                            | string   | Sender email address (can include sender name, e.g., _N8N `<contact@n8n.com>`_)               | Required  |
| `N8N_SMTP_SSL`                               | boolean  | Whether to use SSL for SMTP (`true` or `false`). Defaults to `true`.                          | Optional  |
| `N8N_UM_EMAIL_TEMPLATES_INVITE`              | string   | Path to your HTML email template for invites.                                                 | Optional  |
| `N8N_UM_EMAIL_TEMPLATES_PWRESET`             | string   | Path to your HTML email template for password resets.                                         | Optional  |
| `N8N_UM_EMAIL_TEMPLATES_WORKFLOW_SHARED`     | string   | Path to the HTML template for notifying users about shared credentials.                        | Optional  |
| `N8N_UM_EMAIL_TEMPLATES_CREDENTIALS_SHARED`  | string   | Path to the HTML template for notifying users about shared workflows.                          | Optional  |

3. Restart your n8n instance to apply the SMTP configurations.

### Step 2: In-App Setup

1. Open n8n; you will see a signup screen.
2. Enter your details; password must be at least eight characters with one number and one capital letter.
3. Click **Next** to log in with your new owner account.

### Step 3: Invite Users

1. Sign into your workspace with your owner account.
2. Access your **Personal Settings** by clicking on your user icon and selecting **Settings**.
3. Go to the **Users** page.
4. Click **Invite**.
5. Enter the new user's email address.
6. Click **Invite user**. An email will be sent with a link for the new user to join.

----------------------------------------

# Docker Installation

## Prerequisites

- Install [Docker Desktop](https://docs.docker.com/get-docker/).
- Linux users must install [Docker Engine](https://docs.docker.com/engine/install/) and [Docker Compose](https://docs.docker.com/compose/install/) individually.

### Latest and Next Versions

- Current `latest`: 1.98.2
- Current `next`: 1.99.1 (beta)

## Starting n8n

Run the following commands in your terminal:

```bash
docker volume create n8n_data
docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n
```

Once running, access n8n at: [http://localhost:5678](http://localhost:5678/)

## Using with PostgreSQL

To use PostgreSQL with n8n, execute the following commands, replacing placeholders with your actual values:

```bash
docker volume create n8n_data
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e DB_TYPE=postgresdb \
 -e DB_POSTGRESDB_DATABASE=<POSTGRES_DATABASE> \
 -e DB_POSTGRESDB_HOST=<POSTGRES_HOST> \
 -e DB_POSTGRESDB_PORT=<POSTGRES_PORT> \
 -e DB_POSTGRESDB_USER=<POSTGRES_USER> \
 -e DB_POSTGRESDB_SCHEMA=<POSTGRES_SCHEMA> \
 -e DB_POSTGRESDB_PASSWORD=<POSTGRES_PASSWORD> \
 -v n8n_data:/home/node/.n8n \
 docker.n8n.io/n8nio/n8n
```

## Setting Timezone

To set the timezone for n8n, use the following example:

```bash
docker volume create n8n_data
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e GENERIC_TIMEZONE="Europe/Berlin" \
 -e TZ="Europe/Berlin" \
 -v n8n_data:/home/node/.n8n \
 docker.n8n.io/n8nio/n8n
```

## Updating n8n

To update n8n, pull the latest image:

```bash
# Pull latest (stable) version
docker pull docker.n8n.io/n8nio/n8n
# Pull specific version
docker pull docker.n8n.io/n8nio/n8n:1.81.0
# Pull next (unstable) version
docker pull docker.n8n.io/n8nio/n8n:next
```

Stop and start your n8n container:

```bash
# Find your container ID
docker ps -a
# Stop the container
docker stop <container_id>
# Remove the container
docker rm <container_id>
# Start the container
docker run --name=<container_name> [options] -d docker.n8n.io/n8nio/n8n
```

### Updating Docker Compose

If you run n8n using Docker Compose, follow these steps:

```bash
# Navigate to the directory containing your docker compose file
cd </path/to/your/compose/file/directory>
# Pull latest version
docker compose pull
# Stop and remove older version
docker compose down
# Start the container
docker compose up -d
```

## n8n with Tunnel

For local development and testing, start n8n with the tunnel service as follows:

```bash
docker volume create n8n_data
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -v n8n_data:/home/node/.n8n \
 docker.n8n.io/n8nio/n8n \
 start --tunnel
```

----------------------------------------

# npm Installation for n8n

## Core Concepts
- **Node.js Requirement**: n8n requires Node.js version 18 or above.

- **Versioning**:
  - `latest`: For production use (Current: 1.98.2).
  - `next`: Most recent (Current: 1.99.1), treated as a beta.

## Try n8n with npx
To try n8n without installation:
```bash
npx n8n
```
Access n8n at [http://localhost:5678](http://localhost:5678).

## Install Globally with npm
To install n8n globally:
```bash
npm install n8n -g
```
To install or update to a specific version:
```bash
npm install -g n8n@0.126.1
```
To install the `next` version:
```bash
npm install -g n8n@next
```
To start n8n, run:
```bash
n8n
# or
n8n start
```

## Updating n8n
To update to the latest version:
```bash
npm update -g n8n
```
To install the `next` version:
```bash
npm install -g n8n@next
```

## n8n with Tunnel
For local development and testing:
To use webhooks for external services like GitHub, run:
```bash
n8n start --tunnel
```

## Reverting an Upgrade
To revert an upgrade:
1. Install the desired older version.
2. If the upgrade involved a database migration, check documentation for manual changes.
3. Run:
```bash
n8n db:revert
```
Repeat the process for multiple migrations.

## Windows Troubleshooting
Ensure Node.js is correctly set up according to Microsoft's guide to [Install NodeJS on Windows](https://learn.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-windows).

----------------------------------------

# Server Setups

## Self-host with Docker Compose
- Digital Ocean
- Heroku
- Hetzner Cloud

## Starting Points for Kubernetes Setup
- AWS
- Azure
- Google Cloud Platform

## Configuration Guides
- Docker Compose

----------------------------------------

# Hosting n8n on Amazon Web Services

## Hosting options
- AWS provides hosting options including EC2 (virtual machines) and EKS (containers with Kubernetes).
- This guide uses EKS as it is suitable for scaling.

## Prerequisites
1. Install the AWS CLI tool and configure authentication.
2. Self-hosting requires expertise in:
   - Server and container setup
   - Application resource management
   - Security configuration

## Create a cluster
To create a cluster using eksctl:
```bash
eksctl create cluster --name n8n --region <your-aws-region>
```

## Clone configuration repository
Clone the n8n Kubernetes configuration:
```bash
git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b aws
cd n8n-kubernetes-hosting
```

## Configure Postgres
### Configure volume for persistent storage
Define a persistent volume in `postgres-claim0-persistentvolumeclaim.yaml`:
```yaml
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
```

### Postgres environment variables
Set up environment variables in `postgres-secret.yaml` for database connection.

## Configure n8n
### Create a volume for file storage
Define a volume in `n8n-claim0-persistentvolumeclaim.yaml`:
```yaml
volumes:
  - name: n8n-claim0
    persistentVolumeClaim:
      claimName: n8n-claim0
```

### Pod resources
Define resource requests and limits in `n8n-deployment.yaml`:
```yaml
resources:
  requests:
    memory: "250Mi"
  limits:
    memory: "500Mi"
```

### Optional: Environment variables
Create an `n8n-secret.yaml` for n8n configuration.

## Deployments
The deployment manifests ( `n8n-deployment.yaml`, `postgres-deployment.yaml`) define:
- Environment variables for pods
- Container image to use
- Resource consumption limits
- Volume mounts

## Services
The service manifests (`postgres-service.yaml`, `n8n-service.yaml`) expose services via Kubernetes load balancer on ports 5432 (Postgres) and 5678 (n8n).

## Send to Kubernetes cluster
Deploy all manifests:
```bash
kubectl apply -f .
```
If namespace error occurs, create namespace:
```bash
kubectl apply -f namespace.yaml
```

## Set up DNS
Create a DNS record for your subdomain pointing to the load balancer URL of the n8n service. Access the service over HTTP.

## Delete resources
To remove all resources created:
```bash
kubectl delete -f .
```

----------------------------------------

# Hosting n8n on Azure

This guide provides instructions for self-hosting n8n on Azure using Azure Kubernetes Service (AKS) with Postgres as the database backend.

## Prerequisites
- Azure command-line tool installation.
- Technical knowledge in server and container setup, resource management, security, and n8n configuration.

## Hosting options
- Azure Container Instances
- Linux Virtual Machines
- Azure Kubernetes Service (recommended for scalability)

## Open the Azure Kubernetes Service
1. Navigate to the Azure portal and select **Kubernetes services**.

## Create a cluster
1. Select **Create** > **Create a Kubernetes cluster** and follow configuration options.

## Set Kubectl context
1. Find connection details on the cluster instance page and run commands in the terminal to set the local Kubernetes context.

## Clone configuration repository
Clone the necessary configuration files with:
```bash
git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b azure
cd azure
```

## Configure Postgres
### Configure volume for persistent storage
- Utilize the `postgres-claim0-persistentvolumeclaim.yaml` manifest file for persistent storage.

### Postgres environment variables
Edit the `postgres-secret.yaml` with necessary environment variables required for Postgres.

## Configure n8n
### Create a volume for file storage
1. Modify the `n8n-claim0-persistentvolumeclaim.yaml` to create a volume for n8n.
2. Reference the volume in the `n8n-deployment.yaml` manifest:
```yaml
volumes:
  - name: n8n-claim0
    persistentVolumeClaim:
      claimName: n8n-claim0
```

### Pod resources
Specify resource limits in the `n8n-deployment.yaml`:
```yaml
resources:
  requests:
    memory: "250Mi"
  limits:
    memory: "500Mi"
```

### Optional: Environment variables
Create an `n8n-secret.yaml` file to configure n8n settings.

## Deployments
Use the following manifests to define the n8n and Postgres deployments:
- `n8n-deployment.yaml`
- `postgres-deployment.yaml`

## Services
Expose services using manifests:
- `postgres-service.yaml`: uses port 5432
- `n8n-service.yaml`: uses port 5678

## Send to Kubernetes cluster
Deploy all manifests with:
```bash
kubectl apply -f .
```
For namespace issues, apply the namespace manifest:
```bash
kubectl apply -f namespace.yaml
```

## Set up DNS
Create a DNS record for your subdomain pointing to the n8n service external IP (port 5678).

## Delete resources
Remove all resources created by the manifests with:
```bash
kubectl delete -f .
```

----------------------------------------

# Hosting n8n on DigitalOcean

## Prerequisites
Self-hosting n8n requires:
- Server and container setup knowledge
- Application resource management
- Security management
- n8n configuration

## Latest and Next Versions
- Current `latest`: 1.98.2
- Current `next`: 1.99.1 (beta, may be unstable)

## Create a Droplet
1. Log in to DigitalOcean.
2. Select or create a project.
3. Select **Droplets** from the **Manage** menu.
4. Create a new Droplet using the Docker image from the Marketplace.

### Droplet Resources
- Choose a basic shared CPU plan.
- Opt for SSH key authentication (more secure than password).

## Log in to Your Droplet and Create New User
1. Log in as root.
2. Create a new user:
   ```bash
   adduser <username>
   ```
3. Grant administrative privileges:
   ```bash
   usermod -aG sudo <username>
   ```
4. Set up SSH for the new user.
5. Log out and log in via SSH as the new user.

## Clone Configuration Repository
Clone the configuration repository:
```bash
git clone https://github.com/n8n-io/n8n-docker-caddy.git
```
Change directory:
```bash
cd n8n-docker-caddy
```

## Default Folders and Files
- `caddy_config`: Caddy configuration files.
- `local_files`: Folder for n8n uploads.

## Create Docker Volumes
Persist Caddy cache and n8n data:
```bash
sudo docker volume create caddy_data
sudo docker volume create n8n_data
```

## Set Up DNS
Create a DNS record for the subdomain pointing to the Droplet's IP address.

## Open Ports
Allow incoming traffic on ports 80 and 443:
```bash
sudo ufw allow 80
sudo ufw allow 443
```

## Configure n8n
Set environment variables in the `.env` file:
```bash
nano .env
```
Refer to n8n [environment variables documentation](https://docs.n8n.io/hosting/configuration/environment-variables/) for details.

## Docker Compose File
The `docker-compose.yml` defines services for Caddy and n8n. Inspect it:
```bash
nano docker-compose.yml
```

## Configure Caddy
Edit the `Caddyfile` in the `caddy_config` folder:
```bash
nano caddy_config/Caddyfile
```
Example configuration:
```plaintext
n8n.<domain>.<suffix> {
    reverse_proxy n8n:5678 {
        flush_interval -1
    }
}
```

## Start Docker Compose
Start n8n and Caddy:
```bash
sudo docker compose up -d
```

## Test Your Setup
Open the URL with your subdomain in a browser and verify access with your credentials.

## Stop n8n and Caddy
Stop the services:
```bash
sudo docker compose stop
```

## Updating n8n
To update n8n, follow these steps:
```bash
# Navigate to the directory containing your docker-compose file
cd /path/to/your/compose/file/directory
# Pull latest version
docker compose pull
# Stop and remove older version
docker compose down
# Start the container
docker compose up -d
```

----------------------------------------

# Docker Compose Installation for n8n

## Core Concepts

- **Self-hosting Requirements**: 
  - Setup and configure servers and containers
  - Manage application resources and scaling
  - Secure servers and applications
  - Configure n8n

- **Versions**:
  - `latest`: 1.98.2 (for production use)
  - `next`: 1.99.1 (beta, may be unstable)

## Configuration Instructions

### 1. Install Docker and Docker Compose

**Ubuntu Installation Example**:
```bash
# Remove incompatible or out-of-date Docker implementations
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
# Install prerequisite packages
sudo apt-get update
sudo apt-get install ca-certificates curl
# Download the repo signing key
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
# Configure the repository
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
# Update and install Docker and Docker Compose
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

**Verify Installation**:
```bash
docker --version
docker compose version
```

### 2. Optional: Non-root User Access

**Grant Access**:
```bash
sudo usermod -aG docker ${USER}
# Register the `docker` group membership with current session
exec sg docker newgrp
```

**For a Different User**:
```bash
sudo usermod -aG docker <USER_TO_RUN_DOCKER>
```

**Verify Group**:
```bash
groups
```

### 3. DNS Setup

Create a dedicated subdomain pointed at your server:
- **Type**: A
- **Name**: `n8n`
- **IP address**: (your server's IP address)

### 4. Create an `.env` File

Create a project directory:
```bash
mkdir n8n-compose
cd n8n-compose
```

Create an `.env` file:
```plaintext
# DOMAIN_NAME and SUBDOMAIN determine where n8n will be reachable
DOMAIN_NAME=example.com
SUBDOMAIN=n8n
GENERIC_TIMEZONE=Europe/Berlin
SSL_EMAIL=user@example.com
```

### 5. Create Local Files Directory

Create a directory for sharing files:
```bash
mkdir local-files
```

### 6. Create Docker Compose File

Create a `compose.yaml` file:

```yaml
services:
  traefik:
    image: "traefik"
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./local-files:/files
volumes:
  n8n_data:
  traefik_data:
```

### 7. Start Docker Compose

To start n8n:
```bash
sudo docker compose up -d
```

To stop the container:
```bash
sudo docker compose stop
```

### 8. Access n8n

Access n8n using the subdomain + domain combination from your `.env` configuration (e.g., `https://n8n.example.com`). Access is only available over secure HTTPS. 

## Best Practices

- Ensure proper security configurations are applied.
- Regularly update n8n to maintain stability and security.

----------------------------------------

# Hosting n8n on Google Cloud

This guide shows how to self-host n8n on Google Cloud (GCP) with Postgres as the database backend using Kubernetes to manage resources and reverse proxy.

## Prerequisites

- gcloud command line tool
- gke-gcloud-auth-plugin (install gcloud CLI first)

Self-hosting knowledge prerequisites:
- Setting up and configuring servers and containers
- Managing application resources and scaling
- Securing servers and applications
- Configuring n8n

Current versions:
- Latest: 1.98.2
- Next: 1.99.1 (beta, may be unstable)

## Hosting Options

Google Cloud offers options suited for hosting n8n:
- Cloud Run (for containers)
- Compute Engine (VMs)
- Kubernetes Engine (containers managed with Kubernetes)

This guide uses Google Kubernetes Engine (GKE).

## Create Project

Create a new project from the Google Cloud Console: select the project dropdown menu and click **NEW PROJECT**.

## Enable the Kubernetes Engine API

Enable the Kubernetes Engine API for this project by searching for "Kubernetes" in the top search bar and selecting "Kubernetes Engine", then click **ENABLE**.

## Create a Cluster

From the GKE service page, select **Clusters** > **CREATE**. Choose the "Standard" cluster option (n8n does not work with "Autopilot" clusters). Leave configuration on defaults unless changes are needed.

## Set Kubectl Context

Set the GCP instance as the Kubectl context using the connection string from the cluster details page. Run the displayed code snippet in the gcloud CLI.

## Clone Configuration Repository

Clone the configuration files from this repository:
```bash
git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b gcp
cd n8n-kubernetes-hosting
```

## Configure Postgres

### Create Volume for Persistent Storage

Create a persistent volume for the Postgres deployment, using the `storage.yaml` manifest. Modify regions in `allowedTopologies > matchedLabelExpressions > values` if needed.

### Postgres Environment Variables

Set environment variables in the `postgres-secret.yaml` file (replace placeholders with your values) for database creation, used in `postgres-deployment.yaml`.

## Configure n8n

### Create Volume for File Storage

Use persistent volumes to support nodes that interact with files and to persist encryption keys. The `n8n-claim0-persistentvolumeclaim.yaml` manifest is used for this purpose.

```yaml
volumes:
  - name: n8n-claim0
    persistentVolumeClaim:
      claimName: n8n-claim0
```

### Pod Resources

Specify resource requests and limits in the `n8n-deployment.yaml` and `postgres-deployment.yaml`.

```yaml
resources:
  requests:
    memory: "250Mi"
  limits:
    memory: "500Mi"
```

### Optional: Environment Variables

Configure n8n using environment variables by creating an `n8n-secret.yaml` file.

## Deployments

The `n8n-deployment.yaml` and `postgres-deployment.yaml` define the applications to Kubernetes, including environment variables, container images, resource limits, and scaling policies.

## Services

The service manifests (`postgres-service.yaml` and `n8n-service.yaml`) expose the services using the Kubernetes load balancer on ports 5432 and 5678.

## Send to Kubernetes Cluster

Send all manifests to the cluster with:
```bash
kubectl apply -f .
```

### Namespace Error

To resolve namespace errors, apply the namespace manifest with:
```bash
kubectl apply -f namespace.yaml
```

## Set Up DNS

Create a DNS record for the subdomain pointing to the IP address of the n8n service, found in the **Services & Ingress** menu.

## Delete Resources

Remove resources with:
```bash
kubectl delete -f .
```

----------------------------------------

## Hosting n8n on Heroku

This hosting guide demonstrates self-hosting n8n on Heroku using:

- Docker Compose for application component management
- Heroku's PostgreSQL service for data storage

### Prerequisites

- Knowledge of server and container setup
- Application resource management and scaling
- Server and application security
- n8n configuration

**n8n Version Information:**
- Current `latest`: 1.98.2
- Current `next`: 1.99.1 (beta version)

## Use the Deployment Template to Create a Heroku Project

Use the **Deploy to Heroku** button to initiate deployment:

```html
<a href="https://dashboard.heroku.com/new?template=https://github.com/n8n-io/n8n-heroku/tree/main">
  Deploy to Heroku
</a>
```

### Configure Environment Variables

Heroku pre-fills configuration from the `env` section of the `app.json` file. Important variables to configure:

- **N8N_ENCRYPTION_KEY**: Used to encrypt user account details before saving to the database.
- **WEBHOOK_URL**: Should match the application name for correct webhook URL.

### Deploy n8n

1. Select **Deploy app**.
2. After the build completes, links to **Manage App** or **View** the application are provided.

### Changing the Deployment Template

Fork the [repository](https://github.com/n8n-io/n8n-heroku) to modify the deployment template.

### The Dockerfile

The Dockerfile by default pulls the latest n8n image. To specify a version, update the image tag at the top of the `Dockerfile`.

### Heroku and Exposing Ports

Heroku doesn't allow `EXPOSE` command in Docker. Use the `PORT` environment variable provided by Heroku at runtime. Access n8n on port 80 via a web browser.

### Configuring Heroku

The `heroku.yml` file contains:

- `setup > addons`: Defines Heroku addons (PostgreSQL database addon).
- `build`: Specifies how Heroku builds the application using the Docker buildpack.

## Next Steps

- Explore more about [configuring](https://docs.n8n.io/hosting/configuration/environment-variables/) and [scaling](https://docs.n8n.io/hosting/scaling/overview/) n8n.

----------------------------------------

# Hosting n8n on Hetzner Cloud

## Prerequisites
Self-hosting n8n requires technical knowledge in:
- Setting up and configuring servers and containers
- Managing application resources and scaling
- Securing servers and applications
- Configuring n8n

## Current Versions
- Latest: `1.98.2`
- Next: `1.99.1` (beta)

## Create a Server
1. Log in to the Hetzner Cloud Console.
2. Select or create a project for the server.
3. Click **+ CREATE SERVER**.
   - Choose "Docker CE" under the **Image** section.
   - For most usage levels, select the CPX11 plan.
   - Use SSH for authentication.

## Log in to Your Server
Use SSH to log in. Refer to the [Access with SSH/rsync/BorgBackup](https://docs.hetzner.com/robot/storage-box/access/access-ssh-rsync-borg) guide for details.

## Install Docker Compose
Run the following commands to install Docker Compose:
```bash
apt update && apt -y upgrade
apt install docker-compose-plugin
```

## Clone Configuration Repository
Clone the necessary configuration files:
```bash
git clone https://github.com/n8n-io/n8n-docker-caddy.git
cd n8n-docker-caddy
```

## Default Folders and Files
- `caddy_config`: Holds Caddy configuration files.
- `local_files`: For files uploaded to n8n.

## Create Docker Volumes
To persist Caddy cache and n8n data, run:
```bash
docker volume create caddy_data
sudo docker volume create n8n_data
```

## Set up DNS
Create an "A" record for the n8n subdomain pointing to the server's IP.

## Open Ports
Allow incoming traffic on ports 80 and 443:
```bash
sudo ufw allow 80
sudo ufw allow 443
```

## Configure n8n
Edit the environment variables in the `.env` file:
```bash
nano .env
```
Refer to [Environment variables](https://docs.n8n.io/hosting/configuration/environment-variables/) for details.

## Docker Compose File
The Docker Compose file defines services for Caddy and n8n. To view it, run:
```bash
nano docker-compose.yml
```

## Configure Caddy
Edit the `Caddyfile` in the `caddy_config` folder:
```bash
nano caddy_config/Caddyfile
```
Update the subdomain to match your configuration:
```caddy
n8n.<domain>.<suffix> {
    reverse_proxy n8n:5678 {
        flush_interval -1
    }
}
```

## Start Docker Compose
Start n8n and Caddy:
```bash
docker compose up -d
```

## Test Your Setup
Access n8n at the subdomain you configured.

## Stop n8n and Caddy
To stop the services:
```bash
sudo docker compose stop
```

## Updating n8n
To update n8n, follow these steps:
```bash
# Navigate to compose file directory
cd /path/to/your/compose/file/directory
# Pull latest version
docker compose pull
# Stop and remove the older version
docker compose down
# Start the container
docker compose up -d
```

----------------------------------------

# Update Self-Hosted n8n

## Best Practices for Updating
- **Update frequently:** Avoid having to jump multiple versions at once; aim for at least once a month.
- **Check Release notes** for breaking changes.
- **Use Environments** to test updates before applying them to your main instance.

## Updating Instructions
Refer to the documentation for your installation method:

- **Installed with npm:** [Documentation](https://docs.n8n.io/hosting/installation/npm/)
- **Installed with Docker:** [Documentation](https://docs.n8n.io/hosting/installation/docker/)

----------------------------------------

# Logging in n8n

n8n uses the [winston](https://www.npmjs.com/package/winston) logging library for logging purposes.

## Setup

To set up logging in n8n, configure the following environment variables:

| Configuration Parameter           | Environment Variable           | Description                                                                                                                                              |
|-----------------------------------|--------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|
| n8n.log.level                     | N8N_LOG_LEVEL                  | The log output level. Available options: `error`, `warn`, `info`, `debug`. Default is `info`.                                                            |
| n8n.log.output                    | N8N_LOG_OUTPUT                 | Where to output logs. Options: `console`, `file`. Default is `console`.                                                                                  |
| n8n.log.file.location             | N8N_LOG_FILE_LOCATION          | The log file location, used if output is set to file. Default: `<n8nFolderPath>/logs/n8n.log`.                                                          |
| n8n.log.file.maxsize              | N8N_LOG_FILE_SIZE_MAX         | Maximum size (in MB) for each log file. Default is 16 MB.                                                                                              |
| n8n.log.file.maxcount             | N8N_LOG_FILE_COUNT_MAX        | Maximum number of log files to keep. Default is 100.                                                                                                   |

### Example

```bash
# Set the logging level to 'debug'
export N8N_LOG_LEVEL=debug
# Set log output to both console and a log file
export N8N_LOG_OUTPUT=console,file
# Set a save location for the log file
export N8N_LOG_FILE_LOCATION=/home/jim/n8n/logs/n8n.log
# Set a 50 MB maximum size for each log file
export N8N_LOG_FILE_MAXSIZE=50
# Set 60 as the maximum number of log files to be kept
export N8N_LOG_FILE_MAXCOUNT=60
```

## Log Levels

n8n utilizes the following standard log levels:

- `silent`: Outputs nothing.
- `error`: Outputs only errors.
- `warn`: Outputs errors and warnings.
- `info`: Provides useful progress information.
- `debug`: Most verbose output for debugging.

## Development

Add log messages during development for better debugging.

### Implementation Details

n8n uses the `LoggerProxy` class located in the `workflow` package. To initialize, call `LoggerProxy.init()` with an instance of `Logger`. This initialization occurs once, usually done in the [`start.ts`](https://github.com/n8n-io/n8n/blob/master/packages/cli/src/commands/start.ts) file.

### Adding Logs

After initializing the `LoggerProxy` class, import it to any file to add logs. 

Logging format:
```javascript
Logger.<logLevel>('<message>', ...meta);
```
Where `meta` represents additional properties.

### Example

```javascript
// Import LoggerProxy
import { LoggerProxy as Logger } from 'n8n-workflow';
// Info-level logging of a trigger function
Logger.info(`Polling trigger initiated for workflow "${workflow.name}"`, { workflowName: workflow.name, workflowId: workflow.id });
```

### Best Practices for Creating Logs

- Craft log messages to be human-readable.
- Avoid duplicating information in log messages and metadata.
- Include multiple IDs (e.g., `executionId`, `workflowId`, `sessionId`) in logs.
- Use node types instead of node names for consistency.

## Front-end Logs

Currently, front-end logs are not available. Using `Logger` or `LoggerProxy` in the `editor-ui` package will cause errors. Implementation of this feature is planned for future versions.

----------------------------------------

# Monitoring

## API Endpoints
There are three API endpoints to check the status of your instance: `/healthz`, `/healthz/readiness`, and `/metrics`.

### `/healthz` and `/healthz/readiness`
- **`/healthz`**: Returns a standard HTTP status code. 200 indicates the instance is reachable but doesn't indicate DB status.
  - Access the endpoint:
  ```plaintext
  <your-instance-url>/healthz
  ```

- **`/healthz/readiness`**: Returns a HTTP status code of 200 if the DB is connected and migrated, indicating the instance is ready to accept traffic.
  - Access the endpoint:
  ```plaintext
  <your-instance-url>/healthz/readiness
  ```

### `/metrics`
- **`/metrics`**: Provides detailed information about the current status of the instance.
  - Access the endpoint:
  ```plaintext
  <your-instance-url>/metrics
  ```
- **Feature availability**: The `/metrics` endpoint isn't available on n8n Cloud.

## Enable Metrics and Healthz for Self-Hosted n8n
The `/metrics` and `/healthz` endpoints are disabled by default. To enable them, configure your n8n instance:
```plaintext
# metrics
N8N_METRICS=true
# healthz
QUEUE_HEALTH_CHECK_ACTIVE=true
```
Refer to [Configuration methods](https://docs.n8n.io/hosting/configuration/configuration-methods/) for more information on configuring using environment variables.

----------------------------------------

# Binary Data in n8n

Binary data refers to any file-type data, such as image files or documents, generated or processed during the execution of a workflow.

## Enable Filesystem Mode

To handle binary data efficiently and avoid crashes with large files, set the `N8N_DEFAULT_BINARY_DATA_MODE` environment variable to `filesystem`. This will save binary data to disk instead of using memory.

**Note:** If using queue mode, keep this variable set to `default` as filesystem mode is not supported in queue mode.

## Binary Data Pruning

n8n executes binary data pruning as part of execution data pruning. If multiple binary data modes are configured, pruning operates on the active binary data mode. For instance, if data is stored in S3 and later switched to filesystem mode, n8n will only prune binary data in the filesystem.

Refer to the following for additional details:
- [Execution Data Pruning](https://docs.n8n.io/hosting/scaling/execution-data/#enable-data-pruning)
- [External Storage](https://docs.n8n.io/hosting/scaling/external-storage/#usage)

----------------------------------------

# Self-hosted Concurrency Control

Concurrency control is enabled to manage performance and prevent degradation due to excessive concurrent executions in n8n. 

## Setup Instructions

To enable concurrency control for production executions, set the following environment variable:

```bash
export N8N_CONCURRENCY_PRODUCTION_LIMIT=20
```

### Important Notes:
- Concurrency control applies only to production executions: those initiated from a webhook or trigger node. It does not apply to manual executions, sub-workflows, error executions, or those started from CLI.
- Queued executions cannot be retried. Cancelling or deleting a queued execution removes it from the queue.
- On instance startup, n8n resumes queued executions up to the concurrency limit and re-enqueues any over the limit.
- Monitor concurrency control via logs to watch executions being added and released.

## Comparison to Queue Mode

In queue mode, control over concurrent jobs is achieved with the `--concurrency` flag. The `N8N_CONCURRENCY_PRODUCTION_LIMIT` environment variable is utilized in both modes when set to a value other than `-1`, otherwise it defaults to the `--concurrency` flag.

----------------------------------------

# Execution Data

To manage the size of the n8n database and avoid running out of storage, it is recommended to disable saving unnecessary execution data and enable the pruning of old execution data.

## Reduce Saved Data

### Environment Variables

Configure the following environment variables to manage execution data saving:

- **npm**:
  ```bash
  export EXECUTIONS_DATA_SAVE_ON_ERROR=all  # Save executions ending in errors
  export EXECUTIONS_DATA_SAVE_ON_SUCCESS=all  # Save successful executions
  export EXECUTIONS_DATA_SAVE_ON_PROGRESS=false  # Don't save node progress for each execution
  export EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false  # Don't save manually launched executions
  ```

- **Docker**:
  ```bash
  docker run -it --rm \
    --name n8n \
    -p 5678:5678 \
    -e EXECUTIONS_DATA_SAVE_ON_ERROR=all \
    -e EXECUTIONS_DATA_SAVE_ON_SUCCESS=none \
    -e EXECUTIONS_DATA_SAVE_ON_PROGRESS=true \
    -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false \
    docker.n8n.io/n8nio/n8n
  ```

- **Docker Compose**:
  ```yaml
  n8n:
    environment:
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=none
      - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false
  ```

## Enable Data Pruning

To enable automatic pruning of finished executions, configure the following environment variables:

- **npm**:
  ```bash
  export EXECUTIONS_DATA_PRUNE=true  # Activate automatic data pruning
  export EXECUTIONS_DATA_MAX_AGE=168  # Number of hours after execution that n8n deletes data
  export EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000  # Number of executions to store
  ```

- **Docker**:
  ```bash
  docker run -it --rm \
    --name n8n \
    -p 5678:5678 \
    -e EXECUTIONS_DATA_PRUNE=true \
    -e EXECUTIONS_DATA_MAX_AGE=168 \
    docker.n8n.io/n8nio/n8n
  ```

- **Docker Compose**:
  ```yaml
  n8n:
    environment:
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000
  ```

### SQLite Considerations

When using SQLite, the disk space of any pruned data is reused for future executions data. To free up this space, configure the `DB_SQLITE_VACUUM_ON_STARTUP` environment variable or manually run the [VACUUM](https://www.sqlite.org/lang_vacuum.html) operation.

### Binary Data Pruning

Binary data pruning operates on the active binary data mode—for instance, if your instance stored data in S3 and later switched to filesystem mode, n8n only prunes binary data in the filesystem. This behavior may change in future releases.

----------------------------------------

# External Storage for Binary Data

n8n can store binary data produced by workflow executions externally, which is useful for managing large amounts of binary data without relying on the filesystem.

## Storing n8n's Binary Data in S3

n8n supports AWS S3 as an external storage solution. Other S3-compatible services are not officially supported.

### Setup

1. Create and configure a bucket following the AWS documentation.
2. Use the following policy, replacing `<bucket-name>` with the name of your created bucket:

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "VisualEditor0",
      "Effect": "Allow",
      "Action": ["s3:*"],
      "Resource": ["arn:aws:s3::<bucket-name>", "arn:aws:s3::<bucket-name>/*"]
    }
  ]
}
```

3. Set a bucket-level lifecycle configuration to enable automatic deletion of old binary data.

4. Once the bucket is created, set the following environment variables in n8n:

```bash
export N8N_EXTERNAL_STORAGE_S3_HOST=... # example: s3.us-east-1.amazonaws.com
export N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME=...
export N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION=...
export N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY=...
export N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET=...
```

If your provider does not require a region, set `N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION` to `'auto'`.

5. To tell n8n to store binary data in S3:

```bash
export N8N_AVAILABLE_BINARY_DATA_MODES=filesystem,s3
export N8N_DEFAULT_BINARY_DATA_MODE=s3
```

To automatically detect credentials:

```bash
export N8N_EXTERNAL_STORAGE_S3_AUTH_AUTO_DETECT=true
```

Restart the server to apply the new configuration.

### Usage

After enabling S3, n8n writes and reads binary data in the following format:

```
workflows/{workflowId}/executions/{executionId}/binary_data/{binaryFileId}
```

n8n reads older binary data from the filesystem, if `filesystem` is listed in `N8N_AVAILABLE_BINARY_DATA_MODES`. If you switch from S3 to filesystem mode, n8n continues to read data from S3 as long as `s3` is enabled.

### Binary Data Pruning

Binary data pruning is based on the active binary data mode. When switching modes, pruning only occurs on the active mode's data storage.

----------------------------------------

# Memory-related Errors in n8n

n8n does not restrict the amount of data each node can fetch and process. Excessive memory usage can lead to errors during workflow executions.

## Identifying Out of Memory Situations

n8n provides error messages in some out-of-memory situations, such as:
- **Execution stopped at this node (n8n may have run out of memory while executing it).**
- **Problem running workflow**
- **Connection Lost**
- **503 Service Temporarily Unavailable**
- **Allocation failed - JavaScript heap out of memory** (in server logs)

In n8n Cloud or Docker, n8n restarts automatically when encountering memory issues, while an npm setup may require a manual restart.

## Typical Causes of Memory Issues

Factors leading to increased memory usage include:
- Amount of [JSON data](https://docs.n8n.io/data/data-structure/).
- Size of binary data.
- Number of nodes in a workflow.
- Memory-heavy nodes: the [Code](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/) and older Function nodes.
- Manual executions that duplicate data for the frontend.
- Concurrent additional workflows.

## Avoiding Out of Memory Situations

### Increase Available Memory

For self-hosting n8n, increase the provisioned memory of your instance. Upgrading plans is essential on n8n Cloud for higher memory capacity.

### Reduce Memory Consumption

- Split data into smaller chunks (e.g., process 200 rows per execution instead of 10,000).
- Avoid using the Code node where feasible.
- Minimally use manual executions for larger datasets.
- Break workflows into sub-workflows that limit data return to the main workflow.

Consider adding a [Loop Over Items](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/) node to create smaller batches and an [Execute Workflow](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/) node for sub-workflows, ensuring memory is released post-processing.

### Increase Old Memory

For self-hosted setups encountering **JavaScript heap out of memory** errors, allocate additional memory to the old memory section of the V8 engine. Use the CLI option or `NODE_OPTIONS` environment variable to set the `--max-old-space-size=SIZE` parameter.

----------------------------------------

# Scaling n8n

When running n8n at scale, modifications to the n8n configuration are necessary to ensure optimal performance. 

## Modes of Operation

n8n can operate in various modes. The `queue` mode offers the best scalability. For configuration details, refer to the documentation on [Queue mode](https://docs.n8n.io/hosting/scaling/queue-mode/).

## Performance Improvement

Improving database performance can be achieved through configuring data saving and pruning. For additional information, consult the section on [Execution data](https://docs.n8n.io/hosting/scaling/execution-data/).

----------------------------------------

# Performance and Benchmarking

n8n can handle up to 220 workflow executions per second on a single instance, with the ability to scale by adding more instances.

## Performance Factors

The performance of n8n depends on:

- The workflow type
- The resources available to n8n
- n8n's scaling options configuration

## Run Your Own Benchmarking

To estimate performance for your use case, run n8n's benchmarking framework found in the GitHub repository at `https://github.com/n8n-io/n8n/tree/master/packages/%40n8n/benchmark`.

## Example: Single Instance Performance

### Setup:

- Hardware: ECS c5a.large instance (4GB RAM)
- n8n setup: Single n8n instance (running in main mode, with Postgres database)
- Workflow: Webhook Trigger node, Edit Fields node

### Graph Description

The graph shows the percentage of requests to the Webhook Trigger node receiving a response within 100 seconds as requests per second increase.

## Example: Multi-Instance Performance

### Setup:

- Hardware: Seven ECS c5a.4xlarge instances (8GB RAM each)
- n8n setup: Two webhook instances, four worker instances, one database instance (MySQL), one main instance running n8n and Redis
- Workflow: Webhook Trigger node, Edit Fields node
- Multi-instance setups use [Queue mode](https://docs.n8n.io/hosting/scaling/queue-mode/)

### Graph Description

The graph shows the percentage of requests to the Webhook Trigger node receiving a response within 100 seconds as requests per second increase.

----------------------------------------

# Queue Mode

The queue mode in n8n provides the best scalability by allowing multiple instances of n8n to be set up.

## Core Concepts

- **Main Instance**: Receives workflow information and triggers but does not execute workflows.
- **Worker Instances**: Execute workflows, handle multiple simultaneous executions, and communicate with the main instance.

## Process Flow

1. Main instance processes timers and webhook calls.
2. Execution ID is sent to Redis, a message broker.
3. Workers pick up messages from Redis and retrieve workflow information from the database.
4. Workers execute workflows, write results to the database, and notify Redis upon completion.

## Configuring Workers

### Set Encryption Key

Set the encryption key for each worker node:

```bash
export N8N_ENCRYPTION_KEY=<main_instance_encryption_key>
```

### Set Executions Mode

Set the environment variable for the main instance and workers:

```bash
export EXECUTIONS_MODE=queue
```

Alternatively, set in a configuration file:

```json
{
  "executions.mode": "queue"
}
```

### Start Redis

Run Redis in a Docker container:

```bash
docker run --name some-redis -p 6379:6379 -d redis
```

Configuration for n8n to interact with Redis:

| Configuration File | Environment Variable | Description |
| --- | --- | --- |
| `queue.bull.redis.host:localhost` | `QUEUE_BULL_REDIS_HOST=localhost` | Redis host. |
| `queue.bull.redis.port:6379` | `QUEUE_BULL_REDIS_PORT=6379` | Redis port. |

Optional configurations:

| Configuration File | Environment Variable | Description |
| --- | --- | --- |
| `queue.bull.redis.username:USERNAME` | `QUEUE_BULL_REDIS_USERNAME` | Redis username. |
| `queue.bull.redis.password:PASSWORD` | `QUEUE_BULL_REDIS_PASSWORD` | Redis password. |
| `queue.bull.redis.db:0` | `QUEUE_BULL_REDIS_DB` | Redis database index. |
| `queue.bull.redis.timeoutThreshold:10000ms` | `QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD` | Timeout threshold in ms. |
| `queue.bull.gracefulShutdownTimeout:30` | `N8N_GRACEFUL_SHUTDOWN_TIMEOUT` | Graceful shutdown timeout in seconds. |

### Start Workers

To start worker processes, run:

```bash
./packages/cli/bin/n8n worker
```

For Docker use:

```bash
docker run --name n8n-queue -p 5679:5678 docker.n8n.io/n8nio/n8n worker
```

### Worker Server Endpoints

Workers expose optional endpoints:

- `/healthz`: Worker status (requires `QUEUE_HEALTH_CHECK_ACTIVE`).
- `/healthz/readiness`: DB and Redis readiness status (requires `QUEUE_HEALTH_CHECK_ACTIVE`).
- `/metrics`: Metrics for monitoring.

## Webhook Processors

Webhook processors require the `EXECUTIONS_MODE` environment variable set. Start the webhook processor with:

```bash
./packages/cli/bin/n8n webhook
```

For Docker:

```bash
docker run --name n8n-queue -p 5679:5678 -e "EXECUTIONS_MODE=queue" docker.n8n.io/n8nio/n8n webhook
```

### Configure Webhook URL

Set the webhook URL:

```bash
export WEBHOOK_URL=https://your-webhook-url.com
```

## Configure Load Balancer

For multiple webhook processes:

- Route requests matching `/webhook/*` to webhook server pool.
- All other requests to the main process.

### Disable Webhook Processing in Main Process

Disable webhook handling in the main process:

```bash
export N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true
```

## Configure Worker Concurrency

Define the number of jobs a worker can run in parallel:

```bash
n8n worker --concurrency=5
```

## Multi-Main Setup

In queue mode, configure multiple main processes for high availability, ensuring that:

- All main processes run in queue mode and connect to Postgres and Redis.
- All processes run the same n8n version.
- Set `N8N_MULTI_MAIN_SETUP_ENABLED` to `true`.

Leader key options:

| Configuration File | Environment Variable | Description |
| --- | --- | --- |
| `multiMainSetup.ttl:10` | `N8N_MULTI_MAIN_SETUP_KEY_TTL=10` | TTL for leader key in seconds. |
| `multiMainSetup.interval:3` | `N8N_MULTI_MAIN_SETUP_CHECK_INTERVAL=3` | Leader check interval in seconds. |

----------------------------------------

# Block Access to Nodes

For security reasons, you can block users from accessing specific n8n nodes using the `NODES_EXCLUDE` environment variable.

## Exclude Nodes

Update the `NODES_EXCLUDE` environment variable to include an array of strings for any nodes you want to block.

Example:

```plaintext
NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]"
```

This setting blocks the following nodes:
- [Execute Command](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/)
- [Read/Write Files from Disk](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/)

Users will not be able to search for or use these nodes.

## Suggested Nodes to Block

Consider blocking the following nodes based on security risks:

- [Execute Command](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/)
- [Read/Write Files from Disk](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/)

## Related Resources

Refer to:
- [Nodes Environment Variables](https://docs.n8n.io/hosting/configuration/environment-variables/nodes/) for details on this environment variable.
- [Configuration Methods](https://docs.n8n.io/hosting/configuration/configuration-methods/) for setting environment variables.

----------------------------------------

# Disable the public REST API

To improve the security of your n8n installation, you can disable the public REST API by setting the following environment variable:

```bash
export N8N_PUBLIC_API_DISABLED=true
```

## Disable the API playground

To disable the API playground, set the following environment variable:

```bash
export N8N_PUBLIC_API_SWAGGERUI_DISABLED=true
```

## Related Resources

Refer to the following for more information on setting environment variables:
- [Deployment environment variables](https://docs.n8n.io/hosting/configuration/environment-variables/deployment/)
- [Configuration](https://docs.n8n.io/hosting/configuration/configuration-methods/)

----------------------------------------

# Hardening Task Runners

Task runners are responsible for executing code from the Code node. To further harden your task runners, consider the following:

## Run Task Runners as Sidecars in External Mode

To increase isolation between the core n8n process and the code in the Code node, run task runners in external mode. 

- External task runners launch as separate containers, providing a fully isolated environment to execute the JavaScript defined in the Code node.

### Configuration Instructions

1. Set up task runners in **external mode**:
   - Follow [this guide](https://docs.n8n.io/hosting/configuration/task-runners/#setting-up-external-mode) for configuration steps.

----------------------------------------

# Securing n8n

## High-Level Security Measures
- **Security Audit**: Identify security risks.
- **Set Up SSL**: Enforce secure connections.
- **Set Up Single Sign-On (SSO)**: Manage user accounts.
- **Two-Factor Authentication (2FA)**: Enhance user security.

## Granular Security Measures
- **Disable Public API**: Prevent access if not used.
- **Opt Out of Data Collection**: Prevent automatic collection of anonymous data.
- **Block Certain Nodes**: Restrict availability of specific nodes for users.

----------------------------------------

# Security Audit

## Run an Audit

You can run an audit using the CLI, the public API, or the n8n node.

### CLI

Run the following command:
```bash
n8n audit
```

### API

Make a `POST` call to the `/audit` endpoint. You must authenticate as the instance owner.

### n8n Node

Add the n8n node to your workflow. Select **Resource** > **Audit** and **Operation** > **Generate**.

## Report Contents

The audit generates five risk reports:

### Credentials

This report shows:
- Credentials not used in a workflow.
- Credentials not used in an active workflow.
- Credentials not used in a recently active workflow.

### Database

This report shows:
- Expressions used in **Execute Query** fields in SQL nodes.
- Expressions used in **Query Parameters** fields in SQL nodes.
- Unused **Query Parameters** fields in SQL nodes.

### File System

This report lists nodes that interact with the file system.

### Nodes

This report shows:
- Official risky nodes (n8n built-in nodes that can expose the instance to exploits). View the list in [n8n code | Audit constants](https://github.com/n8n-io/n8n/blob/master/packages/cli/src/security-audit/constants.ts#L51), under `OFFICIAL_RISKY_NODE_TYPES`.
- Community nodes.
- Custom nodes.

### Instance

This report shows:
- Unprotected webhooks in the instance.
- Missing security settings.
- Whether your instance is outdated.

----------------------------------------

# Set up SSL

There are two methods to support TLS/SSL in n8n.

## Use a reverse proxy (recommended)

Use a reverse proxy like Traefik or a Network Load Balancer (NLB) in front of the n8n instance. This should also take care of certificate renewals.

## Pass certificates into n8n directly

To pass certificates into n8n directly, set the `N8N_SSL_CERT` and `N8N_SSL_KEY` environment variables to point to your generated certificate and key file. Ensure the certificate stays renewed and up to date.

Refer to these resources for more information:
- [Deployment environment variables](https://docs.n8n.io/hosting/configuration/environment-variables/deployment/)
- [Configuration](https://docs.n8n.io/hosting/configuration/configuration-methods/) for setting environment variables.

----------------------------------------

# Set up SAML Single Sign-On (SSO)

## Core Concepts
- **SAML (Security Assertion Markup Language)**: A standard for exchanging authentication and authorization data between parties, specifically, between an identity provider and a service provider.

## Feature Availability
- Available on Enterprise plans.
- Requires access to the n8n instance owner account to enable and configure SAML.
- Available from version 0.225.0.

## Configuration Instructions
- General guide for setting up SAML in n8n: Refer to the SAML setup documentation for steps and resources for common Identity Providers (IdPs).
  
### Specific Guides
- Okta Workforce Identity SAML setup: Follow step-by-step instructions for configuring Okta.
- Troubleshooting: Check the list of things to verify if you encounter issues during setup.
- Managing users with SAML: Guidance on performing user management tasks with SAML enabled.

----------------------------------------

# Opting Out of Data Collection in n8n

n8n collects anonymous data from self-hosted installations. To opt out of this data telemetry collection, follow these instructions.

## How Collection Works

- Data is sent to n8n as events occur, with some periodic reports (e.g., workflow execution counts sent every 6 hours).

## Environment Variables for Opting Out

### Opt Out of Telemetry Events

Set the `N8N_DIAGNOSTICS_ENABLED` environment variable to false:

```bash
export N8N_DIAGNOSTICS_ENABLED=false
```

### Opt Out of Version Notifications

Set the `N8N_VERSION_NOTIFICATIONS_ENABLED` environment variable to false:

```bash
export N8N_VERSION_NOTIFICATIONS_ENABLED=false
```

## Disable All Connection to n8n Servers

For complete isolation from n8n's servers, refer to documentation on isolating n8n.

----------------------------------------

# Self-hosted AI Starter Kit

The Self-hosted AI Starter Kit is a docker compose template for a Local AI and Low Code development environment.

## Included Components

- **n8n**: Low-code platform with over 400 integrations and advanced AI components.
- **Ollama**: Cross-platform LLM platform to install and run local LLMs.
- **Qdrant**: Open-source high-performance vector store with a comprehensive API.
- **PostgreSQL**: Data storage solution for handling large data volumes securely.

## Build Capabilities

- **AI Agents**: Create agents that can schedule appointments.
- **PDF Summaries**: Generate summaries of company PDFs while maintaining data privacy.
- **Communication Bots**: Build smarter Slackbots for internal communications and IT operations.
- **Financial Analysis**: Execute private analyses of financial documents.

## Getting Started

Clone the kit from [the GitHub repository](https://github.com/n8n-io/self-hosted-ai-starter-kit) to begin setup.

**Note**: The kit is designed for proof-of-concept projects and is not fully optimized for production. Customize and secure it before deploying in a production environment.

----------------------------------------

# Insights

Insights provides visibility into workflow performance over time. Key components include:

- **Insights Summary Banner**: Displays key metrics from the last 7 days.
- **Insights Dashboard**: Offers detailed metrics and historical comparisons.
- **Time Saved (Workflow ROI)**: Allows the configuration of time saved per workflow execution.

## Feature Availability

- Insights Summary Banner: Available for all plans.
- Insights Dashboard: Available only on Pro and Enterprise plans.

## Insights Summary Banner Metrics

n8n collects the following metrics:

- Total production executions
- Total failed production executions
- Production execution failure rate
- Time saved (when set on active workflows)
- Average run time (including wait time)

## Insights Dashboard

On Pro and Enterprise plans, the Insights section is accessible via side navigation. Each metric is clickable for detailed charts. The dashboard table displays:

- Total production executions
- Failed production executions
- Failure rate
- Time saved
- Average run time

## Insights Time Periods

The insights summary banner and dashboard show:

- Default: 7-day rolling window
- Pro Plan: 7 and 14 days
- Enterprise Plan: 24 hours, 7 days, 14 days, 30 days, 90 days, 6 months, 1 year

## Setting the Time Saved by a Workflow

To set time savings for a workflow:

1. Navigate to the workflow.
2. Select the three dots menu in the top right.
3. Choose settings.
4. Update the **Estimated time saved** value and save.

This configuration allows n8n to calculate total time saved based on production executions.

## Disable or Configure Insights Metrics Collection

For self-hosted n8n, disable or configure insights collection using [environment variables](https://docs.n8n.io/hosting/configuration/environment-variables/insights/).

## Insights FAQs

### Which Executions are Counted?

Insights only collects data from production executions, excluding manual or sub-workflow executions.

### Historic Execution Data

Data collection for insights starts from version 1.89.0 onward; prior execution data will not appear in insights.

----------------------------------------

# Integrations

n8n calls integrations nodes. Nodes are the entry points for retrieving data, functions to process data, or exits for sending data. They allow creation of complex workflows by connecting multiple nodes.

## Built-in Nodes

n8n includes a collection of built-in integrations. Refer to the [Built-in nodes](https://docs.n8n.io/integrations/builtin/node-types/) for documentation on all n8n's built-in nodes.

## Community Nodes

Community-built nodes can be installed alongside built-in nodes. Refer to [Community nodes](https://docs.n8n.io/integrations/community-nodes/installation/) for more information.

## Credential-only Nodes and Custom Operations

- **Custom operations**: Some nodes do not include all possible operations supported by a product's API. You can make a custom API call using the [HTTP Request](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) node.
- **Credential-only nodes**: These are integrations where n8n supports setting up credentials for use in the HTTP Request node, without providing a standalone node. 

Refer to [Custom operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

## Generic Integrations

For services where n8n lacks a specific node or credential-only node, you can use the [HTTP Request](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) node. Details on setting up authentication and creating API calls are available on the node page. 

## Additional Resources

- To create your own node, refer to the [Creating Nodes](https://docs.n8n.io/integrations/creating-nodes/overview/) section.
- For community-built nodes installation and management, see [Community nodes](https://docs.n8n.io/integrations/community-nodes/usage/).
- For information on various nodes and their functionalities, check n8n's node libraries: [Core nodes](https://docs.n8n.io/integrations/builtin/core-nodes/), [Actions](https://docs.n8n.io/integrations/builtin/app-nodes/), and [Triggers](https://docs.n8n.io/integrations/builtin/trigger-nodes/).
- For adding credentials for different nodes, refer to the [Credentials](https://docs.n8n.io/integrations/builtin/credentials/) section.

----------------------------------------

# Actions Library

This section provides information about n8n's Actions.

## Node Types

- **Google Sheets**: Integrates Google Sheets functionality.
- **Telegram**: Allows interactions with Telegram messaging.
- **MySQL**: Facilitates connections to MySQL databases.
- **Slack**: Enables communication through Slack.
- **Discord**: Integrates with Discord for messaging.
- **Postgres**: Connects to PostgreSQL databases.
- **Notion**: Facilitates interaction with Notion.
- **Gmail**: Enables functionality with Gmail.
- **Airtable**: Integrates Airtable functionalities.
- **Google Drive**: Allows operations with Google Drive.

## Best Practices
- Ensure API keys and sensitive credentials are stored securely.
- Test nodes in the n8n environment before deploying workflows.
- Use comments in workflows for better clarity and maintainability.

## Workflow Patterns
- Use a sequence of nodes to create a cohesive process.
- Connect nodes in a logical flow to maximize efficiency.

----------------------------------------

# Action Network Node

Use the Action Network node to automate work in Action Network and integrate Action Network with other applications. n8n supports a wide range of Action Network features, including creating, updating, and deleting events, people, tags, and signatures.

## Credentials

Refer to Action Network credentials for guidance on setting up authentication.

## Operations

- **Attendance**
  - Create
  - Get
  - Get All
- **Event**
  - Create
  - Get
  - Get All
- **Person**
  - Create
  - Get
  - Get All
  - Update
- **Person Tag**
  - Add
  - Remove
- **Petition**
  - Create
  - Get
  - Get All
  - Update
- **Signature**
  - Create
  - Get
  - Get All
  - Update
- **Tag**
  - Create
  - Get
  - Get All

## What to Do If Your Operation Isn't Supported

If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# ActiveCampaign Node

## Core Concepts
The ActiveCampaign node is used to automate tasks within ActiveCampaign and integrate it with other applications. It supports multiple operations including creating, retrieving, updating, and deleting accounts, contacts, orders, customers, and more.

## Credentials
Refer to the ActiveCampaign credentials documentation for setting up authentication.

## Operations
- **Account**
  - Create an account
  - Delete an account
  - Get data of an account
  - Get data of all accounts
  - Update an account
- **Account Contact**
  - Create an association
  - Delete an association
  - Update an association
- **Contact**
  - Create a contact
  - Delete a contact
  - Get data of a contact
  - Get data of all contacts
  - Update a contact
- **Contact List**
  - Add contact to a list
  - Remove contact from a list
- **Contact Tag**
  - Add a tag to a contact
  - Remove a tag from a contact
- **Connection**
  - Create a connection
  - Delete a connection
  - Get data of a connection
  - Get data of all connections
  - Update a connection
- **Deal**
  - Create a deal
  - Delete a deal
  - Get data of a deal
  - Get data of all deals
  - Update a deal
  - Create a deal note
  - Update a deal note
- **E-commerce Order**
  - Create an order
  - Delete an order
  - Get data of an order
  - Get data of all orders
  - Update an order
- **E-commerce Customer**
  - Create an e-commerce customer
  - Delete an e-commerce customer
  - Get data of an e-commerce customer
  - Get data of all e-commerce customers
  - Update an e-commerce customer
- **E-commerce Order Products**
  - Get data of all order products
  - Get data of an ordered product
  - Get data of an order's products
- **List**
  - Get all lists
- **Tag**
  - Create a tag
  - Delete a tag
  - Get data of a tag
  - Get data of all tags
  - Update a tag

## Best Practices
If a required operation is not supported by the ActiveCampaign node, utilize the HTTP Request node to call the ActiveCampaign API. Configure the HTTP Request node with the following steps:
1. Select **Authentication** > **Predefined Credential Type**.
2. Choose the desired service.
3. Select your credential.

Refer to the Custom API operations documentation for further details.

----------------------------------------

# Adalo Node Documentation

## Overview
The Adalo node automates tasks in Adalo and integrates it with other applications. It supports operations like creating, getting, updating, and deleting databases, records, and collections.

## Operations
- **Collection**
  - **Create**: Create a new collection.
  - **Delete**: Delete an existing collection.
  - **Get**: Retrieve details of a specific collection.
  - **Get Many**: Retrieve a list of collections.
  - **Update**: Update details of an existing collection.

## Credentials
Refer to [Adalo credentials](https://docs.n8n.io/integrations/builtin/credentials/adalo/) for guidance on authentication setup.

## HTTP Request Node
If an operation is unsupported, use the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the desired service.
3. Select your credential.
Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Affinity Node Documentation

Use the Affinity node to automate work in Affinity and integrate with other applications. n8n supports a wide range of Affinity features, including creating, retrieving, updating, and deleting lists, entries, organizations, and persons.

## Credentials

Refer to Affinity credentials for guidance on setting up authentication.

## Operations

- **List**
  - Get a list
  - Get all lists
  
- **List Entry**
  - Create a list entry
  - Delete a list entry
  - Get a list entry
  - Get all list entries
  
- **Organization**
  - Create an organization
  - Delete an organization
  - Get an organization
  - Get all organizations
  - Update an organization
  
- **Person**
  - Create a person
  - Delete a person
  - Get a person
  - Get all persons
  - Update a person

## Templates and Examples

Browse Affinity integration templates or search all templates.

----------------------------------------

# Agile CRM Node

Use the Agile CRM node to automate work in Agile CRM, and integrate Agile CRM with other applications. n8n has built-in support for a wide range of Agile CRM features, including creating, getting, updating, and deleting companies, contracts, and deals.

## Operations

- **Company**
  - Create a new company
  - Delete a company
  - Get a company
  - Get all companies
  - Update company properties

- **Contact**
  - Create a new contact
  - Delete a contact
  - Get a contact
  - Get all contacts
  - Update contact properties

- **Deal**
  - Create a new deal
  - Delete a deal
  - Get a deal
  - Get all deals
  - Update deal properties

## Credentials

Refer to Agile CRM credentials documentation for guidance on setting up authentication.

This node can enhance the capabilities of an AI agent, allowing many parameters to be set automatically or with AI-directed information. More details can be found in the AI tool parameters documentation.

----------------------------------------

# Airtable Node Documentation

Use the Airtable node to automate work in Airtable and integrate Airtable with other applications. n8n supports various Airtable operations, including creating, reading, listing, updating, and deleting tables.

## Credentials

Refer to Airtable credentials for guidance on setting up authentication.

## Operations

- Append data to a table
- Delete data from a table
- List data from a table
- Read data from a table
- Update data in a table

## Node Reference

### Get the Record ID

To fetch data for a particular record, you need the Record ID. There are two methods to retrieve the Record ID:

#### Create a Record ID Column in Airtable

To create a `Record ID` column in your table, refer to Airtable documentation on finding IDs.

#### Use the List Operation

To get the Record ID of your record, utilize the **List** operation of the Airtable node. This operation returns the Record ID along with the fields.

### Filter Records When Using the List Operation

To filter records from your Airtable base, use the **Filter By Formula** option. 

1. Select 'List' from the **Operation** dropdown list.
2. Enter the base ID and the table name in the **Base ID** and **Table** fields, respectively.
3. Click on **Add Option** and select 'Filter By Formula' from the dropdown list.
4. Enter the desired formula in the **Filter By Formula** field. For example, `{Organization}='n8n'` returns all users belonging to the organization `n8n`. To exclude users, use `NOT({Organization}='n8n')`.

Refer to Airtable’s formula field reference for more information.

## What to Do If Your Operation Isn't Supported

If the desired operation isn't supported by this node, use the HTTP Request node to call the service's API. Use the credential created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service you wish to connect to.
3. Select your credential.

Refer to Custom API operations for more details.

## Common Issues

For common errors or issues and suggested resolutions, refer to n8n's common issues documentation.

----------------------------------------

# Airtop Node Documentation

Use the Airtop node to automate work in Airtop and integrate Airtop with other applications, enabling control of a cloud-based web browser for tasks like querying, scraping, and interacting with web pages.

## Credentials
Refer to [Airtop credentials](https://docs.n8n.io/integrations/builtin/credentials/airtop/) for guidance on setting up authentication.

## Operations
- **Session**
  - Create session
  - Save profile on termination
  - Terminate session
- **Window**
  - Create a new browser window
  - Load URL
  - Take screenshot
  - Close window
- **Extraction**
  - Query page
  - Query page with pagination
  - Smart scrape page
- **Interaction**
  - Click an element
  - Hover on an element
  - Type

## Node Reference
### Create a Session and Window
Create an Airtop browser session to get a **Session ID**, then use it to create a new browser window. After this, you can use any extraction or interaction operation.

### Extract Content
Extract content from a web browser using these operations:
- **Query page**: Extract information from the current window.
- **Query page with pagination**: Extract information from pages with pagination or infinite scrolling.
- **Smart scrape page**: Get the window content as markdown.

Get JSON responses by using the **JSON Output Schema** parameter in query operations.

### Interacting with Pages
Click, hover, or type on elements by describing the element you want to interact with.

### Terminate a Session
End your session to save resources. Sessions are automatically terminated based on the **Idle Timeout** set in the **Create Session** operation or can be manually terminated using the **Terminate Session** operation.

## Best Practices
If this node doesn't support the operation you want, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# AMQP Sender Node

Use the AMQP Sender node to automate work in AMQP Sender and integrate with other applications. n8n supports sending messages through AMQP Sender.

## Credentials

Refer to AMQP Sender credentials for guidance on setting up authentication.

## Operations

- **Send message**: Sends a message to the specified AMQP queue.

## API Documentation

Refer to the relevant sections within n8n documentation for API endpoints and methods related to AMQP integration. 

## Best Practices

Follow best practices when setting up AMQP Sender nodes, including ensuring correct authentication and message formatting.

----------------------------------------

# APITemplate.io Node

Use the APITemplate.io node to automate work in APITemplate.io and integrate with other applications. n8n supports various APITemplate.io features, including getting and creating accounts and PDFs.

## Credentials
Refer to [APITemplate.io credentials](https://docs.n8n.io/integrations/builtin/credentials/apitemplateio/) for guidance on setting up authentication.

## Operations
- **Account**
  - **Get**
- **Image**
  - **Create**
- **PDF**
  - **Create**

## Alternative Integration  
If an operation isn't supported, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the API.
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Asana Node

Use the Asana node to automate work in Asana and integrate Asana with other applications. n8n supports a wide range of Asana features, including creating, updating, deleting, and getting users, tasks, projects, and subtasks.

## Credentials

Refer to Asana credentials for guidance on setting up authentication.

## Update Requirement

Upgrade to n8n 1.22.2 or above due to changes in Asana's API as of 17th January 2023.

## Operations

- **Project**
  - Create a new project
  - Delete a project
  - Get a project
  - Get all projects
  - Update a project
- **Subtask**
  - Create a subtask
  - Get all subtasks
- **Task**
  - Create a task
  - Delete a task
  - Get a task
  - Get all tasks
  - Move a task
  - Search for tasks
  - Update a task
- **Task Comment**
  - Add a comment to a task
  - Remove a comment from a task
- **Task Tag**
  - Add a tag to a task
  - Remove a tag from a task
- **Task Project**
  - Add a task to a project
  - Remove a task from a project
- **User**
  - Get a user
  - Get all users

## Unsupported Operations

If this node doesn't support the operation you want to do, use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Automizy Node Documentation

Use the Automizy node to automate work in Automizy and integrate it with other applications. n8n supports a wide range of Automizy features, including managing contacts and lists.

## Credentials

Refer to Automizy credentials for guidance on setting up authentication.

## Operations

### Contact Operations
- **Create a contact**
- **Delete a contact**
- **Get a contact**
- **Get all contacts**
- **Update a contact**

### List Operations
- **Create a list**
- **Delete a list**
- **Get a list**
- **Get all lists**
- **Update a list**

----------------------------------------

# Autopilot Node

Use the Autopilot node to automate work in Autopilot and integrate with other applications. n8n supports a range of Autopilot features, including creating, deleting, and updating contacts, as well as adding contacts to a list.

## Credentials

Refer to Autopilot credentials for guidance on setting up authentication.

## Operations

- **Contact**
  - Create/Update a contact
  - Delete a contact
  - Get a contact
  - Get all contacts
- **Contact Journey**
  - Add contact to list
- **Contact List**
  - Add contact to list
  - Check if contact is on list
  - Get all contacts on list
  - Remove a contact from a list
- **List**
  - Create a list
  - Get all lists

## Templates and Examples

- **Twitch Auto-Clip-Generator:** Fetch from Streamers, Clip & Edit on Autopilot
- **Add new contacts from Autopilot to Airtable**
- **Manage contacts via Autopilot**

----------------------------------------

# AWS Certificate Manager Node

Use the AWS Certificate Manager node to automate work in AWS Certificate Manager, and integrate AWS Certificate Manager with other applications. n8n supports various AWS Certificate Manager features, including creating, deleting, getting, and renewing SSL certificates.

## Operations

- **Certificate**
  - **Delete**: Remove a specified SSL certificate.
  - **Get**: Retrieve details of a specific SSL certificate.
  - **Get Many**: Retrieve details of multiple SSL certificates.
  - **Get Metadata**: Obtain metadata associated with a specific SSL certificate.
  - **Renew**: Renew an existing SSL certificate.

## Credentials

Refer to the [AWS Certificate Manager credentials](https://docs.n8n.io/integrations/builtin/credentials/aws/) for guidance on setting up authentication.

## HTTP Request Node for Unsupported Operations

If the AWS Certificate Manager node does not support the operation you want to perform:

1. Use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.
2. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
3. Select the service you wish to connect to.
4. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# AWS Comprehend Node

Use the AWS Comprehend node to automate work in AWS Comprehend, integrating it with other applications. n8n provides support for various AWS Comprehend features, including text analysis.

## Operations

- **Identify the dominant language**
- **Analyze the sentiment of the text**

## Credentials

Refer to the [AWS Comprehend credentials](https://docs.n8n.io/integrations/builtin/credentials/aws/) for guidance on setting up authentication.

## HTTP Request Node for Unsupported Operations

If the desired operation isn't supported by the AWS Comprehend node, use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# AWS DynamoDB Node

Use the AWS DynamoDB node to automate work in AWS DynamoDB and integrate it with other applications. The node supports various AWS DynamoDB features, including creating, reading, updating, and deleting items.

## Credentials

Refer to AWS credentials for guidance on setting up authentication.

## Operations

- **Item**
  - **Create**: Create a new record or update the current one if it already exists (upsert/put).
  - **Delete**: Delete an item.
  - **Get**: Get an item.
  - **Get All**: Get all items.

## Additional Integration

If an operation isn't supported by this node, use the HTTP Request node to call the service's API with the credentials previously created for the service:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# AWS Elastic Load Balancing Node

Use the AWS Elastic Load Balancing node to automate tasks in AWS ELB and integrate AWS ELB with other applications. This node supports a wide range of AWS ELB features, including adding, getting, removing, and deleting certificates and load balancers.

## Credentials
Refer to AWS ELB credentials for guidance on setting up authentication.

## Operations
- **Listener Certificate**
  - Add
  - Get Many
  - Remove
- **Load Balancer**
  - Create
  - Delete
  - Get
  - Get Many

This node supports creating and managing application and network load balancers. It does not currently support gateway load balancers.

## HTTP Request Node
If this node doesn't support the operation you want to perform, you can use the HTTP Request node to call the service's API. 

**Steps:**
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# AWS Lambda Node

Use the AWS Lambda node to automate work in AWS Lambda and integrate it with other applications. This node supports various AWS Lambda features, including invoking functions.

## Credentials

Refer to AWS Lambda credentials documentation for guidance on setting up authentication.

## Operations

- **Invoke a function**

## Configuration Instructions

If the node does not support the operation you want, use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# AWS Rekognition Node

Use the AWS Rekognition node to automate work in AWS Rekognition and integrate it with other applications. n8n supports a wide range of AWS Rekognition features, including image analysis.

## Credentials

Refer to AWS Rekognition credentials for guidance on setting up authentication.

## Operations

**Image**
- **Analyze**

## What to Do If Your Operation Isn't Supported

If this node doesn't support the operation you want to do, use the HTTP Request node to call the service's API. Use the credential you created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# AWS S3 Node Documentation

The AWS S3 node automates tasks in AWS S3 and integrates it with other applications. It supports operations such as creating and deleting buckets, copying and downloading files, and retrieving folder information.

## Credentials

Refer to AWS credentials documentation for setting up authentication.

## Operations

### Bucket Operations
- **Create a bucket**
- **Delete a bucket**
- **Get all buckets**
- **Search within a bucket**

### File Operations
- **Copy a file**
- **Delete a file**
- **Download a file**
- **Get all files**
- **Upload a file**

### Folder Operations
- **Create a folder**
- **Delete a folder**
- **Get all folders**

## Handling Unsupported Operations

If the desired operation is unsupported, use the HTTP Request node to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

For further information, refer to custom API operations documentation.

----------------------------------------

# AWS SES Node

Use the AWS SES node to automate work in AWS SES and integrate AWS SES with other applications. It supports a wide range of AWS SES features, including creating, getting, deleting, sending, updating, and adding templates and emails.

## Credentials

Refer to AWS SES credentials for guidance on setting up authentication.

## Operations

- **Custom Verification Email**
  - Create a new custom verification email template
  - Delete an existing custom verification email template
  - Get the custom email verification template
  - Get all the existing custom verification email templates for your account
  - Add an email address to the list of identities
  - Update an existing custom verification email template

- **Email**
  - Send
  - Send Template

- **Template**
  - Create a template
  - Delete a template
  - Get a template
  - Get all templates
  - Update a template

## What to Do If Your Operation Isn't Supported

If the desired operation isn't supported, you can use the HTTP Request node to call the service's API. Configure it as follows:

1. In the HTTP Request node, select **Authentication > Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# AWS SNS Node Documentation

Use the AWS SNS node to automate work in AWS SNS, integrating it with other applications. n8n supports various AWS SNS features, including publishing messages.

## Credentials

Refer to [AWS SNS credentials](https://docs.n8n.io/integrations/builtin/credentials/aws/) for guidance on setting up authentication.

## Operations

- **Publish a message to a topic**

## Alternatives for Unsupported Operations

If an operation isn’t supported, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# AWS SQS Node

Use the AWS SQS node to automate work in AWS SNS and integrate AWS SQS with other applications. n8n supports a wide range of AWS SQS features, including sending messages.

## Credentials

Refer to the [AWS SQS credentials](https://docs.n8n.io/integrations/builtin/credentials/aws/) for guidance on setting up authentication.

## Operations

- **Send a message to a queue**.

## Custom API Operations

If this node doesn't support the operation you want to perform, you can use the HTTP Request node to call the service's API.

Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# AWS Textract Node Documentation

## Description
The AWS Textract node automates work in AWS Textract and integrates it with other applications. It supports various features, including invoice analysis.

## Credentials
Refer to the AWS Textract credentials documentation for guidance on setting up authentication.

## Operations
The following operation is supported by the AWS Textract node:
- **Analyze Receipt or Invoice**

## Using HTTP Request Node
If an operation isn't supported, the HTTP Request node can be used to call the service's API using the credentials created for the service. 

### Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to the Custom API operations documentation for more information.

----------------------------------------

# AWS Transcribe Node

Use the AWS Transcribe node to automate work in AWS Transcribe, including creating, deleting, and retrieving transcription jobs.

## Credentials

Refer to [AWS Transcribe credentials](https://docs.n8n.io/integrations/builtin/credentials/aws/) for guidance on setting up authentication.

## Operations

- **Create a transcription job**
- **Delete a transcription job**
- **Get a transcription job**
- **Get all transcription jobs**

## HTTP Request Node Integration

If the desired operation isn't supported by the AWS Transcribe node, use the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Azure Cosmos DB Node Documentation

Use the Azure Cosmos DB node to automate work in Azure Cosmos DB and integrate it with other applications. n8n supports a wide range of Azure Cosmos DB features, including creating, getting, updating, and deleting containers and items.

## Operations

- **Container**:
  - **Create**
  - **Delete**
  - **Get**
  - **Get Many**
- **Item**:
  - **Create**
  - **Delete**
  - **Get**
  - **Get Many**
  - **Execute Query**
  - **Update**

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/azurecosmosdb/).

## What to Do If Your Operation Isn't Supported

If the desired operation isn't supported by this node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Azure Storage Node Documentation

The Azure Storage node supports a wide range of features for automating work within the Azure Storage service or integrating it with other services in your workflow. 

## Credentials
Authentication information for the Azure Storage node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/azurestorage/).

## Operations

### Blob
- **Create blob**: Create a new blob or replace an existing one.
- **Delete blob**: Delete an existing blob.
- **Get blob**: Retrieve data for a specific blob.
- **Get many blobs**: Retrieve a list of blobs.

### Container
- **Create container**: Create a new container.
- **Delete container**: Delete an existing container.
- **Get container**: Retrieve data for a specific container.
- **Get many containers**: Retrieve a list of containers.

## What to Do If Your Operation Isn't Supported
If the operation you want to perform isn't supported by this node, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# BambooHR Node Documentation

Use the BambooHR node to automate work in BambooHR and integrate it with other applications. n8n supports a variety of BambooHR features, including creating, deleting, downloading, and retrieving company reports and employee documents.

## Credentials

For guidance on setting up authentication, refer to [BambooHR credentials](https://docs.n8n.io/integrations/builtin/credentials/bamboohr/).

## Operations

- **Company Report**
  - Get a company report
- **Employee**
  - Create an employee
  - Get an employee
  - Get all employees
  - Update an employee
- **Employee Document**
  - Delete an employee document
  - Download an employee document
  - Get all employee documents
  - Update an employee document
  - Upload an employee document
- **File**
  - Delete a company file
  - Download a company file
  - Get all company files
  - Update a company file
  - Upload a company file

## Templates and Examples

Browse [BambooHR integration templates](https://n8n.io/integrations/bamboohr/) or [search all templates](https://n8n.io/workflows/).

----------------------------------------

# Bannerbear Node Documentation

Use the Bannerbear node to automate work in Bannerbear, and integrate Bannerbear with other applications. n8n supports a wide range of Bannerbear features, including creating and getting images and templates.

## Credentials

Refer to Bannerbear credentials for guidance on setting up authentication.

## Operations

- **Image**
  - Create an image
  - Get an image
- **Template**
  - Get a template
  - Get all templates

## Templates and Examples

- Render custom text over images
- Send Airtable data as tasks to Trello

Refer to the [Bannerbear integration templates](https://n8n.io/integrations/bannerbear/) for additional resources.

----------------------------------------

# Baserow Node Documentation

Use the Baserow node to automate work in Baserow and integrate Baserow with other applications. n8n supports various Baserow features, including creating, getting, retrieving, and updating rows.

## Credentials
Refer to [Baserow credentials](https://docs.n8n.io/integrations/builtin/credentials/baserow/) for guidance on setting up authentication.

## Operations
- **Row**
  - Create a row
  - Delete a row
  - Retrieve a row
  - Retrieve all rows
  - Update a row

## AI Tool Usage
This node can enhance the capabilities of an AI agent, allowing parameters to be set automatically or directed by AI. More information can be found in the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

----------------------------------------

# Beeminder Node

Use the Beeminder node to automate work in Beeminder and integrate it with other applications. n8n supports a range of Beeminder features including creating, deleting, and updating data points.

## Credentials

Refer to Beeminder credentials for guidance on setting up authentication.

## Operations

- **data point**
  - Create data point for a goal
  - Delete a data point
  - Get all data points for a goal
  - Update a data point

## What to do if your operation isn't supported

If this node doesn't support the operation you want, you can use the HTTP Request node to call the service's API. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Bitly Node Documentation

Use the Bitly node to automate work in Bitly and integrate Bitly with other applications. n8n has built-in support for various Bitly features, including creating, getting, and updating links.

## Credentials

Refer to Bitly credentials for guidance on setting up authentication.

## Operations

- **Link**
  - **Create a link**
  - **Get a link**
  - **Update a link**

## What to Do If Your Operation Isn't Supported

If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API. Use the credential you created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Bitwarden Node Documentation

Use the Bitwarden node to automate work in Bitwarden and integrate with other applications. n8n supports various Bitwarden features, including creating, getting, deleting, and updating collections, events, groups, and members.

## Credentials

Refer to Bitwarden credentials for guidance on setting up authentication.

## Operations

- **Collection**
  - Delete
  - Get
  - Get All
  - Update
  
- **Event**
  - Get All

- **Group**
  - Create
  - Delete
  - Get
  - Get All
  - Get Members
  - Update
  - Update Members

- **Member**
  - Create
  - Delete
  - Get
  - Get All
  - Get Groups
  - Update
  - Update Groups

----------------------------------------

# Box Node Documentation

Use the Box node to automate work in Box and integrate Box with other applications. It supports a wide range of Box features, including creating, copying, deleting, searching, uploading, and downloading files and folders.

## Credentials

Refer to Box credentials for guidance on setting up authentication.

## Operations

- **File**
  - Copy a file
  - Delete a file
  - Download a file
  - Get a file
  - Search files
  - Share a file
  - Upload a file
- **Folder**
  - Create a folder
  - Get a folder
  - Delete a folder
  - Search files
  - Share a folder
  - Update folder

## What to Do If Your Operation Isn't Supported

If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API.

### Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Brandfetch Node Documentation

Use the Brandfetch node to automate tasks in Brandfetch and integrate with other applications. n8n supports various Brandfetch features, including retrieving company information.

## Credentials

Refer to Brandfetch credentials for guidance on setting up authentication.

## Operations

- **Return a company's colors**
- **Return a company's data**
- **Return a company's fonts**
- **Return a company's industry**
- **Return a company's logo & icon**

----------------------------------------

# Brevo Node Documentation

Use the Brevo node to automate tasks in Brevo and integrate it with other applications. n8n supports various Brevo features, including contact management and email sending.

## Credentials

For authentication setup, refer to [Brevo credentials](https://docs.n8n.io/integrations/builtin/credentials/brevo/).

## Operations

- **Contact**
  - Create
  - Create or Update
  - Delete
  - Get
  - Get All
  - Update
- **Contact Attribute**
  - Create
  - Delete
  - Get All
  - Update
- **Email**
  - Send
  - Send Template
- **Sender**
  - Create
  - Delete
  - Get All

## What to Do If Your Operation Isn't Supported

If the desired operation isn't supported by this node, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. 

### Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service you wish to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Bubble Node

The Bubble node enables automation within Bubble and integration with other applications. n8n supports various Bubble features, including:

## Operations

- **Object**
  - **Create**: Create an object in Bubble.
  - **Delete**: Delete an object from Bubble.
  - **Get**: Retrieve a specific object from Bubble.
  - **Get All**: Retrieve all objects from Bubble.
  - **Update**: Update an existing object in Bubble.

## Credentials

Refer to Bubble credentials for guidance on setting up authentication.

## Additional Features

This node can enhance the capabilities of an AI agent, allowing many parameters to be set automatically or directed by AI. Information on AI tool parameters can be found in the AI tool parameters documentation.

----------------------------------------

# Chargebee Node Documentation

Use the Chargebee node to automate work in Chargebee and integrate Chargebee with other applications. The Chargebee node supports various operations, including creating customers, returning invoices, and canceling subscriptions.

## Credentials

Refer to Chargebee credentials for guidance on setting up authentication.

## Operations

- **Customer**
  - Create a customer
- **Invoice**
  - Return the invoices
  - Get URL for the invoice PDF
- **Subscription**
  - Cancel a subscription
  - Delete a subscription

----------------------------------------

# CircleCI Node Documentation

## Overview
Use the CircleCI node to automate work in CircleCI and integrate CircleCI with other applications. n8n supports a wide range of CircleCI features, including getting and triggering pipelines.

## Credentials
Refer to [CircleCI credentials](https://docs.n8n.io/integrations/builtin/credentials/circleci/) for guidance on setting up authentication.

## Operations
- **Pipeline**
  - Get a pipeline
  - Get all pipelines
  - Trigger a pipeline

## Templates and Examples
Browse CircleCI integration templates or search all templates at n8n.io integrations.

----------------------------------------

# Webex by Cisco Node Documentation

Use the Webex by Cisco node to automate work in Webex and integrate Webex with other applications. n8n supports a wide range of Webex features, including creating, getting, updating, and deleting meetings and messages.

## Credentials

Refer to [Webex credentials](https://docs.n8n.io/integrations/builtin/credentials/ciscowebex/) for guidance on setting up authentication.

## Operations

### Meeting
- **Create**: Create a new meeting.
- **Delete**: Delete a specific meeting.
- **Get**: Retrieve details of a specific meeting.
- **Get All**: Retrieve details of all meetings.
- **Update**: Update an existing meeting.

### Message
- **Create**: Send a new message.
- **Delete**: Delete a specific message.
- **Get**: Retrieve details of a specific message.
- **Get All**: Retrieve all messages.
- **Update**: Update an existing message.

## Custom API Operations

If this node doesn't support the operation you need, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Webex API.

### Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select Webex as the service to connect to.
3. Choose the credential you created for this service.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Clearbit Node Documentation

Use the Clearbit node to automate work in Clearbit and integrate Clearbit with other applications. n8n supports various Clearbit features, including autocompleting and looking up companies and persons.

## Credentials

Refer to Clearbit credentials for guidance on setting up authentication.

## Operations

- **Company**
  - Auto-complete company names and retrieve logo and domain.
  - Look up person and company data based on an email or domain.

- **Person**
  - Look up a person and company data based on an email or domain.

----------------------------------------

# ClickUp Node Documentation

## Core Concepts
The ClickUp node allows automating tasks and integrating ClickUp with other applications. It supports a variety of features, including creating, retrieving, deleting, and updating resources like folders, checklists, tags, comments, and goals.

## Credentials
Refer to ClickUp credentials documentation for guidance on setting up authentication.

## Operations
### Checklist
- Create a checklist
- Delete a checklist
- Update a checklist

### Checklist Item
- Create a checklist item
- Delete a checklist item
- Update a checklist item

### Comment
- Create a comment
- Delete a comment
- Get all comments
- Update a comment

### Folder
- Create a folder
- Delete a folder
- Get a folder
- Get all folders
- Update a folder

### Goal
- Create a goal
- Delete a goal
- Get a goal
- Get all goals
- Update a goal

### Goal Key Result
- Create a key result
- Delete a key result
- Update a key result

### List
- Create a list
- Retrieve list's custom fields
- Delete a list
- Get a list
- Get all lists
- Get list members
- Update a list

### Space Tag
- Create a space tag
- Delete a space tag
- Get all space tags
- Update a space tag

### Task
- Create a task
- Delete a task
- Get a task
- Get all tasks
- Get task members
- Set a custom field
- Update a task

### Task List
- Add a task to a list
- Remove a task from a list

### Task Tag
- Add a tag to a task
- Remove a tag from a task

### Task Dependency
- Create a task dependency
- Delete a task dependency

### Time Entry
- Create a time entry
- Delete a time entry
- Get a time entry
- Get all time entries
- Start a time entry
- Stop the current running timer
- Update a time entry

### Time Entry Tag
- Add tag to time entry
- Get all time entry tags
- Remove tag from time entry

## What to Do If Your Operation Isn't Supported
If the desired operation is unsupported, use the HTTP Request node to call the ClickUp API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your created credential.

Refer to documentation on custom API operations for more information.

----------------------------------------

# Clockify Node Documentation

Use the Clockify node to automate work in Clockify and integrate Clockify with other applications. n8n supports various Clockify features, including creating, updating, getting, and deleting tasks, time entries, projects, and tags.

## Credentials

Refer to [Clockify credentials](https://docs.n8n.io/integrations/builtin/credentials/clockify/) for guidance on setting up authentication.

## Operations

- **Project**
  - Create a project
  - Delete a project
  - Get a project
  - Get all projects
  - Update a project
- **Tag**
  - Create a tag
  - Delete a tag
  - Get all tags
  - Update a tag
- **Task**
  - Create a task
  - Delete a task
  - Get a task
  - Get all tasks
  - Update a task
- **Time Entry**
  - Create a time entry
  - Delete a time entry
  - Get time entry
  - Update a time entry

## If Your Operation Isn't Supported

If this node doesn't support the operation you want to do, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. Use the credential created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Cloudflare Node Documentation

Use the Cloudflare node to automate work in Cloudflare and integrate Cloudflare with other applications. n8n supports various Cloudflare features, including managing zone certificates.

## Credentials
Refer to [Cloudflare credentials](https://docs.n8n.io/integrations/builtin/credentials/cloudflare/) for guidance on setting up authentication.

## Operations
- **Zone Certificate**
  - **Delete**
    - Description: Removes a specified zone certificate.
  - **Get**
    - Description: Retrieves information about a specific zone certificate.
  - **Get Many**
    - Description: Retrieves information about multiple zone certificates.
  - **Upload**
    - Description: Uploads a new zone certificate.

## What to Do if Your Operation Isn't Supported
Use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API for unsupported operations. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Cockpit Node Documentation

## Core Concepts
The Cockpit node is designed to automate tasks within Cockpit and enable integration with other applications. It supports various Cockpit features, including the creation of collection entries, data storage from form submissions, and retrieval of singletons.

## Credentials
Refer to the [Cockpit credentials](https://docs.n8n.io/integrations/builtin/credentials/cockpit/) for guidance on setting up authentication.

## Operations
- **Collection**
  - Create a collection entry
  - Get all collection entries
  - Update a collection entry
- **Form**
  - Store data from a form submission
- **Singleton**
  - Get a singleton

## Templates and Examples
- Browse [Cockpit integration templates](https://n8n.io/integrations/cockpit/).
- Search all templates at [n8n templates](https://n8n.io/workflows/).

----------------------------------------

# Coda Node Documentation

Use the Coda node to automate work in Coda, integrating it with other applications. n8n supports various Coda features, including creating, getting, and deleting controls, formulas, tables, and views.

## Credentials

Refer to Coda credentials for guidance on setting up authentication.

## Operations

- **Control**
  - Get a control
  - Get all controls
- **Formula**
  - Get a formula
  - Get all formulas
- **Table**
  - Create/Insert a row
  - Delete one or multiple rows
  - Get all columns
  - Get all the rows
  - Get a column
  - Get a row
  - Push a button
- **View**
  - Delete view row
  - Get a view
  - Get all views
  - Get all views columns
  - Get all views rows
  - Update row
  - Push view button

## Templates and Examples

Browse Coda integration templates or search all templates.

----------------------------------------

# CoinGecko Node Documentation

## Core Concepts
The CoinGecko node is used to automate work in CoinGecko and integrate it with other applications. It supports various features of CoinGecko, including retrieving data related to coins and events.

## Operations
### Coin Operations
- **Get a candlestick open-high-low-close chart** for the selected currency.
- **Get current data** for a coin.
- **Get all coins.**
- **Get historical data** (name, price, market, stats) at a given date for a coin.
- **Get prices and market-related data** for all trading pairs matching the selected currency.
- **Get historical market data**, including price, market cap, and 24h volume (granularity automatic).
- **Get the current price** of any cryptocurrency in any other supported currencies.
- **Get coin tickers.**

### Event Operations
- **Get all events.**

## Best Practices
When integrating the CoinGecko node with AI functionalities, many parameters can be configured automatically or influenced by AI. For further details, refer to the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

## Code Examples
No specific code examples provided in the extracted content. Further examples might be included in templates or integration workflows. 

## Templates and Examples
- **Analyze Crypto Market with CoinGecko: Volatility Metrics & Investment Signals**
- **Tracking your crypto portfolio in Airtable**
- **Get the price of BTC in EUR and send an SMS**

----------------------------------------

# Contentful Node

Use the Contentful node to automate work in Contentful and integrate Contentful with other applications. n8n supports various Contentful features, including assets, content types, entries, locales, and spaces.

## Credentials

Refer to [Contentful credentials](https://docs.n8n.io/integrations/builtin/credentials/contentful/) for guidance on setting up authentication.

## Operations

- **Asset**
  - Get
  - Get All
- **Content Type**
  - Get
- **Entry**
  - Get
  - Get All
- **Locale**
  - Get All
- **Space**
  - Get

***Code Example:***
```json
{
  "nodes": [
    {
      "parameters": {
        "operation": "getAll"
      },
      "name": "Contentful"
    }
  ]
}
```

## Best Practices

Ensure you configure the Contentful credentials correctly to enable successful operations. It's recommended to test each function in a controlled environment before deploying them in production workflows.

## Workflow Patterns

Use the Contentful node to connect to other nodes that handle data manipulation or integration, creating flexible workflows that automate processes across applications.

----------------------------------------

# Copper Node

Use the Copper node to automate work in Copper and integrate it with other applications. n8n supports operations for managing companies, customer sources, leads, projects, and tasks.

## Credentials

Refer to [Copper credentials](https://docs.n8n.io/integrations/builtin/credentials/copper/) for guidance on setting up authentication.

## Operations

- **Company**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Customer Source**
  - Get All
- **Lead**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Opportunity**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Person**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Project**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Task**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **User**
  - Get All

## Templates and Examples

Browse [Copper integration templates](https://n8n.io/integrations/copper/), or search all templates [here](https://n8n.io/workflows/).

----------------------------------------

# Cortex Node Documentation

## Overview

Use the Cortex node to automate work in Cortex and integrate Cortex with other applications. n8n supports various Cortex features, including executing analyzers and responders, as well as getting job details.

## Credentials

Refer to [Cortex credentials](https://docs.n8n.io/integrations/builtin/credentials/cortex/) for guidance on setting up authentication.

## Operations

- **Analyzer**
  - Execute Analyzer
- **Job**
  - Get job details
  - Get job report
- **Responder**
  - Execute Responder

## Custom API Operations

If the desired operation is not supported by the Cortex node, you can utilize the HTTP Request node to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# CrateDB Node Documentation

Use the CrateDB node to automate work in CrateDB and integrate it with other applications. 

## Operations

- **Execute an SQL query**
- **Insert rows in database**
- **Update rows in database**

## Node Reference

### Specify a Column's Data Type

To specify a column's data type, append the column name with `:type`, where `type` is the data type for the column. For example, to specify the type `int` for the column **id** and type `text` for the column **name**, use the following snippet in the **Columns** field: 

```plaintext
id:int,name:text
```

## Credentials

Refer to the [CrateDB credentials](https://docs.n8n.io/integrations/builtin/credentials/cratedb/) for guidance on setting up authentication.

----------------------------------------

# crowd.dev Node Documentation

Use the crowd.dev node to automate work in crowd.dev and integrate it with other applications. n8n supports functionalities for managing members, notes, organizations, and tasks.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/crowddev/).

## Operations

- **Activity**
  - Create or Update with a Member
  - Create
- **Automation**
  - Create
  - Destroy
  - Find
  - List
  - Update
- **Member**
  - Create or Update
  - Delete
  - Find
  - Update
- **Note**
  - Create
  - Delete
  - Find
  - Update
- **Organization**
  - Create
  - Delete
  - Find
  - Update
- **Task**
  - Create
  - Delete
  - Find
  - Update

## Related Resources

A trigger node for crowd.dev is available. Documentation for the trigger node can be found [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.crowddevtrigger/).

Refer to [crowd.dev's documentation](https://docs.crowd.dev/reference/getting-started-with-crowd-dev-api) for more information.

## Custom Operations

If the desired operation isn't supported, use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Customer.io Node

The Customer.io node automates tasks in Customer.io and integrates with other applications. It supports features such as creating and updating customers, tracking events, and retrieving campaigns.

## Operations

- **Customer**
  - Create/Update a customer.
  - Delete a customer.

- **Event**
  - Track a customer event.
  - Track an anonymous event.

- **Campaign**
  - Get
  - Get All
  - Get Metrics

- **Segment**
  - Add Customer
  - Remove Customer

## Credentials

Refer to Customer.io credentials for guidance on setting up authentication.

## HTTP Request Node

If a desired operation is not supported by the Customer.io node, use the HTTP Request node to call the Customer.io API. 

### Steps to configure the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the desired service.
3. Choose your credential.

Refer to Custom API operations for more information.

----------------------------------------

# DeepL Node Documentation

## Overview
The DeepL node automates tasks in DeepL and integrates it with other applications. It supports a variety of DeepL features, including language translation.

## Credentials
Refer to [DeepL credentials](https://docs.n8n.io/integrations/builtin/credentials/deepl/) for authentication setup guidance.

## Operations
- **Language**
  - **Translate Data**: Translate text from one language to another.

## Configuration Instructions
To use the DeepL node to enhance AI agent capabilities, many parameters can be set automatically or informed by AI. Refer to the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/) for details.

### Using HTTP Request Node
If the required operation is not supported, utilize the HTTP Request node to call the service's API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Demio Node

Use the Demio node to automate work in Demio and integrate Demio with other applications. n8n supports various Demio features, including retrieving and registering events and reports.

## Credentials
Refer to Demio credentials for guidance on setting up authentication.

## Operations

- **Event**
  - Get an event
  - Get all events
  - Register someone to an event
- **Report**
  - Get an event report

----------------------------------------

# DHL Node

Use the DHL node to automate work within the DHL platform and integrate DHL with other applications, supporting various features including tracking shipments.

## Credentials

Refer to DHL credentials for guidance on setting up authentication.

## Operations

- **Shipment**
  - **Get Tracking Details**: Retrieve current tracking information for shipments.

## Best Practices

- This node can be utilized as an AI tool to enhance the capabilities of an AI agent. Parameters can be set automatically or influenced by AI.

## Related Resources

- [DHL Integration Templates](https://n8n.io/integrations/dhl/)
- [Using AI Tool Parameters](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/)

----------------------------------------

# Discord Node Documentation

Use the Discord node to automate work in Discord and integrate it with other applications. This node supports a range of Discord features, including sending messages in a channel and managing channels.

## Credentials
Refer to Discord credentials for guidance on setting up authentication.

## Operations
- **Channel**
  - Create
  - Delete
  - Get
  - Get Many
  - Update
- **Message**
  - Delete
  - Get
  - Get Many
  - React with Emoji
  - Send
  - Send and Wait for Response
- **Member**
  - Get Many
  - Role Add
  - Role Remove

## Waiting for a Response
Using the **Send and Wait for a Response** operation, you can send a message and pause workflow execution until a user confirms the action or provides more information.

### Response Type
Choose between the following types of waiting and approval actions:
- **Approval**: Users can approve or disapprove directly from the message.
- **Free Text**: Users can submit a response using a form.
- **Custom Form**: Users submit a response with a custom-built form.

#### Configuration Options
- **Limit Wait Time**: Set a time limit for the workflow to automatically resume execution.
- **Append n8n Attribution**: Option to mention that the message was sent automatically with n8n.

### Customizations
- **Approval Response**: Present only an approval button or both approval and disapproval buttons; customize button labels.
- **Free Text Response**: Customize the button label, form title and description, and response button label.
- **Custom Form Response**: Build forms and customize each element per the n8n Form trigger’s form elements. 

## Common Issues
For common errors or issues and suggested resolution steps, refer to Common Issues.

## Alternative API Operation
If an operation isn't supported by the Discord node, use the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect to and select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Discourse Node Documentation

Use the Discourse node to automate tasks and integrate Discourse with other applications. It supports operations for managing categories, groups, posts, and users.

## Credentials

Refer to Discourse credentials for guidance on setting up authentication.

## Operations

- **Category**
  - Create a category
  - Get all categories
  - Update a category

- **Group**
  - Create a group
  - Get a group
  - Get all groups
  - Update a group

- **Post**
  - Create a post
  - Get a post
  - Get all posts
  - Update a post

- **User**
  - Create a user
  - Get a user
  - Get all users

- **User Group**
  - Create a user to group
  - Remove user from group

## Custom API Operations

If this node doesn't support the desired operation, use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Disqus Node Documentation

Use the Disqus node to automate work in Disqus and integrate with other applications. n8n supports a wide range of Disqus features.

## Credentials

Refer to [Disqus credentials](https://docs.n8n.io/integrations/builtin/credentials/disqus/) for setting up authentication.

## Operations

- **Forum**
  - Return forum details
  - Return a list of categories within a forum
  - Return a list of threads within a forum
  - Return a list of posts within a forum

## Best Practices

- For setting up the Disqus node efficiently, ensure that you have the correct authentication credentials configured as per the guidelines in the credentials section.

## Templates and Examples

- Browse Disqus integration templates for practical usage examples.

----------------------------------------

# Drift Node

Use the Drift node to automate work in Drift and integrate Drift with other applications. n8n supports a wide range of Drift features, including creating, updating, deleting, and getting contacts.

## Operations

- **Contact**
  - Create a contact
  - Get custom attributes
  - Delete a contact
  - Get a contact
  - Update a contact

## Credentials

Refer to [Drift credentials](https://docs.n8n.io/integrations/builtin/credentials/drift/) for guidance on setting up authentication.

## HTTP Request Node

If the Drift node doesn't support the operation you want to perform, you can use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Dropbox Node Documentation

## Core Concepts
The Dropbox node allows automation and integration with Dropbox. It supports various features such as creating, downloading, moving, and copying files and folders.

## Credentials
Refer to Dropbox credentials for guidance on setting up authentication.

## Operations
The following operations are supported by the Dropbox node:

### File Operations
- **Copy a file**
- **Delete a file**
- **Download a file**
- **Move a file**
- **Upload a file**

### Folder Operations
- **Copy a folder**
- **Create a folder**
- **Delete a folder**
- **Return the files and folders in a given folder**
- **Move a folder**

### Search
- **Query**

## Best Practices
If an operation is not supported by the Dropbox node, use the HTTP Request node to call the Dropbox API directly. Follow these steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Dropcontact Node Documentation

## Overview
The Dropcontact node integrates with Dropcontact to automate tasks, including fetching contacts.

## Credentials
Refer to [Dropcontact credentials](https://docs.n8n.io/integrations/builtin/credentials/dropcontact/) for guidance on setting up authentication.

## Operations
- **Contact**
  - **Enrich**
  - **Fetch Request**

## Handling Unsupported Operations
If the Dropcontact node does not support the desired operation, use the **HTTP Request node** to call the service's API. Follow these steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# E-goi Node

## Overview
Use the E-goi node to automate work in E-goi and integrate E-goi with other applications. n8n supports a range of E-goi features, including creating, updating, deleting, and retrieving contacts.

## Credentials
Refer to E-goi credentials documentation for guidance on setting up authentication.

## Operations
### Contact
- **Create a member**
- **Get a member**
- **Get all members**
- **Update a member**

## Templates and Examples
Browse E-goi integration templates or search all templates for additional resources.

----------------------------------------

# Elasticsearch Node Documentation

## Overview
The Elasticsearch node automates work in Elasticsearch and integrates it with other applications. It supports operations like creating, updating, deleting, and retrieving documents and indexes.

## Credentials
Refer to Elasticsearch credentials documentation for authentication setup.

## Operations
- **Document**
  - Create a document
  - Delete a document
  - Get a document
  - Get all documents
  - Update a document
- **Index**
  - Create an index
  - Delete an index
  - Get an index
  - Get all indexes

## Using the HTTP Request Node
If an operation is not supported by the Elasticsearch node, use the HTTP Request node to call the service's API. Steps:
1. Select **Authentication** > **Predefined Credential Type** in the HTTP Request node.
2. Choose the service to connect to.
3. Select your credential.

Refer to Custom API operations documentation for further information.

----------------------------------------

# Elastic Security Node

Use the Elastic Security node to automate work in Elastic Security and integrate with other applications. n8n supports various Elastic Security features, including creating, updating, deleting, retrieving, and managing cases.

## Credentials

Refer to [Elastic Security credentials](https://docs.n8n.io/integrations/builtin/credentials/elasticsecurity/) for guidance on setting up authentication.

## Operations

- **Case**
  - Create a case
  - Delete a case
  - Get a case
  - Retrieve all cases
  - Retrieve a summary of all case activity
  - Update a case
- **Case Comment**
  - Add a comment to a case
  - Get a case comment
  - Retrieve all case comments
  - Remove a comment from a case
  - Update a comment in a case
- **Case Tag**
  - Add a tag to a case
  - Remove a tag from a case
- **Connector**
  - Create a connector

## Templates and Examples

Browse Elastic Security integration templates or search all templates.

----------------------------------------

# Emelia Node

Use the Emelia node to automate work in Emelia and integrate Emelia with other applications. It supports various operations related to campaigns and contact lists.

## Credentials

Refer to [Emelia credentials](https://docs.n8n.io/integrations/builtin/credentials/emelia/) for guidance on setting up authentication.

## Operations

- **Campaign**
  - Add Contact
  - Create
  - Get
  - Get All
  - Pause
  - Start
- **Contact List**
  - Add
  - Get All

## Templates and Examples

Explore integration templates related to Emelia or search for various templates in the n8n workflow repository.

----------------------------------------

# ERPNext Node Documentation

## Overview
The ERPNext node automates tasks in ERPNext and integrates it with other applications. It supports various ERPNext features, including document creation, updates, retrieval, and deletion.

## Credentials
Refer to [ERPNext credentials](https://docs.n8n.io/integrations/builtin/credentials/erpnext/) for setup guidance on authentication.

## Operations
- **Create a document**
- **Delete a document**
- **Retrieve a document**
- **Retrieve all documents**
- **Update a document**

## What to Do If Your Operation Isn't Supported
If the desired operation is unsupported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API by following these steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Facebook Graph API Node Documentation

Use the Facebook Graph API node to automate work in Facebook Graph API and integrate it with other applications. It supports various operations including GET, POST, DELETE.

## Operations

- **Default**
  - GET
  - POST
  - DELETE
- **Video Uploads**
  - GET
  - POST
  - DELETE

## Parameters

- **Host URL**: The host URL for the request.
  - **Default**: Requests are sent to `graph.facebook.com`.
  - **Video**: Requests are sent to `graph-video.facebook.com` for video uploads only.
  
- **HTTP Request Method**: Choose from:
  - **GET**
  - **POST**
  - **DELETE**
  
- **Graph API Version**: Version of the [Facebook Graph API](https://developers.facebook.com/docs/graph-api/changelog) used for the request.

- **Node**: The node on which to operate, e.g., `/<page-id>/feed`. Refer to the [official Facebook Developer documentation](https://developers.facebook.com/docs/graph-api/using-graph-api).

- **Edge**: Represents collections of objects attached to the node.

- **Ignore SSL Issues**: Allows downloading the response even if SSL certificate validation fails.

- **Send Binary File**: Available for `POST` operations. If enabled, binary data is sent as the body. Requires:
  - **Input Binary Field**: Name of the binary property containing the data for the file upload.

----------------------------------------

# FileMaker Node Documentation

## Description
The FileMaker node allows automation of tasks within FileMaker and integration with other applications. It supports features such as creating, finding, getting, editing, and duplicating records.

## Credentials
Refer to the [FileMaker credentials](https://docs.n8n.io/integrations/builtin/credentials/filemaker/) for authentication setup guidance.

## Operations
The FileMaker node supports the following operations:
- Find Records
- Get Records
- Get Records by Id
- Perform Script
- Create Record
- Edit Record
- Duplicate Record
- Delete Record

## Technical Templates and Examples
- **Create, update, and retrieve a record from FileMaker**
  
- **Convert FileMaker Data API to Flat File Array**

- **Integrate Xero with FileMaker using Webhooks** 

### Best Practices
Utilizing this node can enhance AI capabilities by automatically setting many parameters through AI-driven data. For details, refer to the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

----------------------------------------

# Flow Node Documentation

## Overview
The Flow node in n8n automates tasks within Flow and integrates Flow with other applications, supporting various operations such as creating, updating, and retrieving tasks.

## Credentials
Refer to Flow credentials for setting up authentication.

## Operations
- **Task Operations**
  - **Create a new task**: Creates a new task in Flow.
  - **Update a task**: Updates an existing task in Flow.
  - **Get a task**: Retrieves a specific task from Flow.
  - **Get all the tasks**: Retrieves all tasks from Flow.

## Best Practices
It is recommended to familiarize yourself with the Flow API and its capabilities to fully leverage the potential of n8n integrations.

## Configuration Instructions
For detailed setup guidance, please refer to the relevant n8n documentation and integrate Flow accordingly.

----------------------------------------

# Freshdesk Node

Use the Freshdesk node to automate work in Freshdesk and integrate Freshdesk with other applications. n8n has built-in support for a wide range of Freshdesk features, including creating, updating, deleting, and retrieving contacts and tickets.

## Credentials

Refer to [Freshdesk credentials](https://docs.n8n.io/integrations/builtin/credentials/freshdesk/) for guidance on setting up authentication.

## Operations

- **Contact**
  - **Create a new contact**
  - **Delete a contact**
  - **Get a contact**
  - **Get all contacts**
  - **Update a contact**
- **Ticket**
  - **Create a new ticket**
  - **Delete a ticket**
  - **Get a ticket**
  - **Get all tickets**
  - **Update a ticket**

----------------------------------------

# Freshservice Node Documentation

Use the Freshservice node to automate work in Freshservice and integrate it with other applications. 

## Credentials
Refer to Freshservice credentials for guidance on setting up authentication.

## Operations

- **Agent**
  - Create an agent
  - Delete an agent
  - Retrieve an agent
  - Retrieve all agents
  - Update an agent

- **Agent Group**
  - Create an agent group
  - Delete an agent group
  - Retrieve an agent group
  - Retrieve all agent groups
  - Update an agent group

- **Agent Role**
  - Retrieve an agent role
  - Retrieve all agent roles

- **Announcement**
  - Create an announcement
  - Delete an announcement
  - Retrieve an announcement
  - Retrieve all announcements
  - Update an announcement

- **Asset Type**
  - Create an asset type
  - Delete an asset type
  - Retrieve an asset type
  - Retrieve all asset types
  - Update an asset type

- **Change**
  - Create a change
  - Delete a change
  - Retrieve a change
  - Retrieve all changes
  - Update a change

- **Department**
  - Create a department
  - Delete a department
  - Retrieve a department
  - Retrieve all departments
  - Update a department

- **Location**
  - Create a location
  - Delete a location
  - Retrieve a location
  - Retrieve all locations
  - Update a location

- **Problem**
  - Create a problem
  - Delete a problem
  - Retrieve a problem
  - Retrieve all problems
  - Update a problem

- **Product**
  - Create a product
  - Delete a product
  - Retrieve a product
  - Retrieve all products
  - Update a product

- **Release**
  - Create a release
  - Delete a release
  - Retrieve a release
  - Retrieve all releases
  - Update a release

- **Requester**
  - Create a requester
  - Delete a requester
  - Retrieve a requester
  - Retrieve all requesters
  - Update a requester

- **Requester Group**
  - Create a requester group
  - Delete a requester group
  - Retrieve a requester group
  - Retrieve all requester groups
  - Update a requester group

- **Software**
  - Create a software application
  - Delete a software application
  - Retrieve a software application
  - Retrieve all software applications
  - Update a software application

- **Ticket**
  - Create a ticket
  - Delete a ticket
  - Retrieve a ticket
  - Retrieve all tickets
  - Update a ticket

## Templates and Examples
Browse Freshservice integration templates or search all templates.

----------------------------------------

# Freshworks CRM Node Documentation

Use the Freshworks CRM node to automate work in Freshworks CRM and integrate with other applications. n8n supports a range of Freshworks CRM features including creating, updating, deleting, and retrieving accounts, appointments, contacts, deals, notes, and sales activity.

## Credentials
Refer to Freshworks CRM credentials for guidance on setting up authentication.

## Operations

### Account
- Create an account
- Delete an account
- Retrieve an account
- Retrieve all accounts
- Update an account

### Appointment
- Create an appointment
- Delete an appointment
- Retrieve an appointment
- Retrieve all appointments
- Update an appointment

### Contact
- Create a contact
- Delete a contact
- Retrieve a contact
- Retrieve all contacts
- Update a contact

### Deal
- Create a deal
- Delete a deal
- Retrieve a deal
- Retrieve all deals
- Update a deal

### Note
- Create a note
- Delete a note
- Update a note

### Sales Activity
- Retrieve a sales activity
- Retrieve all sales activities

### Task
- Create a task
- Delete a task
- Retrieve a task
- Retrieve all tasks
- Update a task

## What to Do If Your Operation Isn't Supported
If this node doesn't support the operation you want, you can use the HTTP Request node to call the service's API. Use credentials created for this service in the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# GetResponse Node Documentation

Use the GetResponse node to automate work in GetResponse and integrate it with other applications. n8n supports a range of GetResponse features, including creating, updating, deleting, and retrieving contacts.

## Credentials

Refer to GetResponse credentials documentation for guidance on setting up authentication.

## Operations

- **Contact**
  - Create a new contact
  - Delete a contact
  - Get a contact
  - Get all contacts
  - Update contact properties

## Custom API Operations

If the node doesn't support the operation you want to perform, use the HTTP Request node to call the service's API. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations documentation for more information.

----------------------------------------

# Ghost Node Documentation

## Overview
Use the Ghost node to automate work in Ghost, integrating it with other applications. n8n supports various Ghost features including creating, updating, deleting, and retrieving posts through the Admin and Content API.

## Credentials
Refer to [Ghost credentials](https://docs.n8n.io/integrations/builtin/credentials/ghost/) for authentication setup.

## Operations

### Admin API
- **Post Operations**
  - Create a post
  - Delete a post
  - Get a post
  - Get all posts
  - Update a post

### Content API
- **Post Operations**
  - Get a post
  - Get all posts

## Configuration Instructions
If an operation is not supported:
1. Use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.
2. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
3. Select the service to connect to and your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# GitHub Node Documentation

The GitHub node in n8n automates tasks in GitHub and integrates it with other applications, supporting various operations including creating, updating, deleting, and editing files, repositories, issues, releases, and users.

## Credentials
For authentication setup, refer to the [GitHub credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/github/).

## Operations
- **File**
  - Create
  - Delete
  - Edit
  - Get
  - List
- **Issue**
  - Create
  - Create Comment
  - Edit
  - Get
  - Lock
- **Organization**
  - Get Repositories
- **Release**
  - Create
  - Delete
  - Get
  - Get Many
  - Update
- **Repository**
  - Get
  - Get Issues
  - Get License
  - Get Profile
  - Get Pull Requests
  - List Popular Paths
  - List Referrers
- **Review**
  - Create
  - Get
  - Get Many
  - Update
- **User**
  - Get Repositories
  - Invite
- **Workflow**
  - Disable
  - Dispatch
  - Enable
  - Get
  - Get Usage
  - List

## Alternatives for Unsupported Operations
If the desired operation is not supported by the GitHub node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. Follow these steps in the HTTP Request node:
1. Set **Authentication** to **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

For additional information, refer to the [Custom API operations documentation](https://docs.n8n.io/integrations/custom-operations/).

----------------------------------------

# GitLab Node Documentation

## Core Concepts

The GitLab node in n8n is used to automate tasks within GitLab and to integrate GitLab with other applications. It supports various GitLab features, such as managing issues, repositories, releases, and users.

## Credentials

Refer to [GitLab credentials](https://docs.n8n.io/integrations/builtin/credentials/gitlab/) for guidance on setting up authentication.

## Operations

### File
- **Create**: Create a new file.
- **Delete**: Delete a file.
- **Edit**: Edit an existing file.
- **Get**: Retrieve a file's data.
- **List**: List files.

### Issue
- **Create a new issue**: Create a new issue in a repository.
- **Create a new comment on an issue**: Add a comment to an existing issue.
- **Edit an issue**: Modify an existing issue.
- **Get the data of a single issue**: Retrieve details of a specific issue.
- **Lock an issue**: Lock an issue to prevent further comments.

### Release
- **Create a new release**: Initiate a new release.
- **Delete a new release**: Remove an existing release.
- **Get a new release**: Retrieve details of a specific release.
- **Get all releases**: List all releases for a repository.
- **Update a new release**: Modify an existing release.

### Repository
- **Get the data of a single repository**: Retrieve details of a specific repository.
- **Returns issues of a repository**: List issues associated with a repository.

### User
- **Returns the repositories of a user**: List repositories owned by a specific user.

## Configuration Instructions

To use unsupported operations with the GitLab node:
1. Use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the GitLab API directly.
2. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
3. Choose the specific service and the corresponding credentials.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

## Best Practices

For integration and usage, refer to the fast track recipes and templates available within the n8n community for common use cases.

### Related Resources
- [GitLab API Documentation](https://docs.gitlab.com/ee/api/rest/) for more information about the service.
- Trigger node for GitLab can be found [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.gitlabtrigger/).

----------------------------------------

# Gmail Node

## Core Concepts
The Gmail node allows automation of tasks within Gmail and integration with other applications, supporting operations such as creating, updating, deleting, and retrieving drafts, messages, labels, and threads.

### Credentials
Refer to the Google credentials documentation for guidance on setting up authentication.

## Operations

### Draft
- **Create**: Create a draft.
- **Delete**: Delete a draft.
- **Get**: Retrieve a draft.
- **Get Many**: Retrieve multiple drafts.

### Label
- **Create**: Create a label.
- **Delete**: Delete a label.
- **Get**: Retrieve a label.
- **Get Many**: Retrieve multiple labels.

### Message
- **Add Label**: Add a label to a message.
- **Delete**: Delete a message.
- **Get**: Retrieve a message.
- **Get Many**: Retrieve multiple messages.
- **Mark as Read**: Mark a message as read.
- **Mark as Unread**: Mark a message as unread.
- **Remove Label**: Remove a label from a message.
- **Reply**: Reply to a message.
- **Send**: Send a message.

### Thread
- **Add Label**: Add a label to a thread.
- **Delete**: Delete a thread.
- **Get**: Retrieve a thread.
- **Get Many**: Retrieve multiple threads.
- **Remove Label**: Remove a label from a thread.
- **Reply**: Reply to a message in a thread.
- **Trash**: Trash a thread.
- **Untrash**: Untrash a thread.

## Configuration Instructions
If an operation is not supported by the Gmail node, utilize the HTTP Request node to call the service's API. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Select your credential.

Refer to the Custom API operations documentation for further information.

## Related Resources
Refer to Google's Gmail API documentation for more details on the API integrated with this node. n8n also provides a trigger node for Gmail.

## Common Issues
Visit the Common Issues documentation for common errors and suggested resolution steps.

----------------------------------------

# Gong Node

Use the Gong node to automate work in Gong and integrate Gong with other applications. n8n supports a wide range of Gong features, including getting calls and users.

## Credentials

Refer to the authentication information for this node [here](https://docs.n8n.io/integrations/builtin/credentials/gong/).

## Operations

- **Call**
  - Get
  - Get Many
- **User**
  - Get
  - Get Many

## Instructions for Unsupported Operations

If the desired operation is not supported by this node, use the HTTP Request node to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google Ads Node

Use the Google Ads node to automate workflows in Google Ads and integrate it with other applications. 

## Credentials
Refer to [Google Ads credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for setting up authentication.

## Operations
- **Campaign**
  - Get all campaigns
  - Get a campaign

## HTTP Request Node
If your desired operation is not supported by the Google Ads node, you can use the HTTP Request node to call the Google Ads API.

### Steps to Connect using HTTP Request Node
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google Analytics Node

## Overview
The Google Analytics node automates tasks within Google Analytics and integrates it with other applications, supporting various features like generating reports and tracking user activities.

## Credentials
Refer to [Google Analytics credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for authentication setup.

## Operations
- **Report**
  - **Get**: Fetches reports from Google Analytics.
- **User Activity**
  - **Search**: Searches user activity data.

## Alternative for Unsupported Operations
If a required operation is not supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Google Analytics API.

### HTTP Request Configuration Steps
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google BigQuery Node

Use the Google BigQuery node to automate work in Google BigQuery and integrate it with other applications. This node supports various features including creating and retrieving records.

## Credentials

Refer to [Google BigQuery credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Operations

- **Execute Query**
- **Insert**

## Configuration Instructions

If this node doesn't support the operation you want to perform, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Google BigQuery API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

## Related Resources

Refer to [Google BigQuery's documentation](https://cloud.google.com/bigquery/docs/reference/rest) for more information about the service.

----------------------------------------

# Google Books Node Documentation

Use the Google Books node to automate work in Google Books and integrate it with other applications. 

## Credentials

Refer to [Google credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Operations

### Bookshelf
- Retrieve a specific bookshelf resource for the specified user
- Get all public bookshelf resources for the specified user

### Bookshelf Volume
- Add a volume to a bookshelf
- Clear all volumes from a bookshelf
- Get all volumes in a specific bookshelf for the specified user
- Move a volume within a bookshelf
- Remove a volume from a bookshelf

### Volume
- Get a volume resource based on ID
- Get all volumes filtered by query

## Best Practices for Unsupported Operations

If this node does not support the operation you want to perform, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

**Setup Steps:**
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google Business Profile Node

The Google Business Profile node allows automation within Google Business Profile and integration with other applications. It supports various features for creating, updating, and deleting posts and reviews.

## Operations

- **Post**
  - **Create**: Create a new post
  - **Delete**: Delete an existing post
  - **Get**: Retrieve a specific post
  - **Get Many**: Retrieve multiple posts
  - **Update**: Update an existing post
- **Review**
  - **Delete Reply**: Remove a reply to a review
  - **Get**: Retrieve a specific review
  - **Get Many**: Retrieve multiple reviews
  - **Reply**: Respond to a review

## Authentication

Refer to the authentication details for this node [here](https://docs.n8n.io/integrations/builtin/credentials/google/).

## Custom API Operations

If an operation is unsupported by this node, use the HTTP Request node to call the Google Business Profile API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the desired service for connection.
3. Select your credential.

For more information on custom API operations, check [here](https://docs.n8n.io/integrations/custom-operations/).

## Related Resources

- Trigger node documentation for Google Business Profile can be found [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.googlebusinessprofiletrigger/).
- Additional information about Google Business Profile services can be found in their [documentation](https://developers.google.com/my-business/reference/rest).

----------------------------------------

# Google Calendar Node

Use the Google Calendar node to automate work in Google Calendar and integrate Google Calendar with other applications. This node supports various operations related to calendar events.

## Credentials

Refer to [Google Calendar credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Operations

- **Calendar**
  - **Availability**: Determine if a time-slot is available in a calendar.
  
- **Event**
  - **Create**: Add an event to a calendar.
  - **Delete**: Delete an event.
  - **Get**: Retrieve an event.
  - **Get Many**: Retrieve all events from a calendar.
  - **Update**: Update an event.

## Related Resources

- n8n provides a trigger node for Google Calendar. Documentation for the trigger node can be found [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.googlecalendartrigger/).
- Refer to [Google Calendar's documentation](https://developers.google.com/calendar/api/v3/reference) for more information about the service.

----------------------------------------

# Google Chat Node Documentation

Use the Google Chat node to automate work in Google Chat and integrate Google Chat with other applications. n8n supports various Google Chat features, including managing memberships and messages.

## Credentials

Refer to Google credentials for guidance on setting up authentication.

## Operations

- **Member**
  - Get a membership
  - Get all memberships in a space
  
- **Message**
  - Create a message
  - Delete a message
  - Get a message
  - Send and Wait for Response
  - Update a message
  
- **Space**
  - Get a space
  - Get all spaces the caller is a member of

## Waiting for a Response

Use the **Send and Wait for a Response** operation to send a message and pause workflow execution until confirmation or additional information is received.

### Response Type

1. **Approval**: Users can approve or disapprove from within the message.
2. **Free Text**: Users can submit a response with a form.
3. **Custom Form**: Users can submit a response using a custom form.

#### Configuration Options for Response Types

- **Limit Wait Time**: Controls workflow resume after a specified time limit.
- **Append n8n Attribution**: Option to mention that the message was sent automatically by n8n.

### Approval Response Customization

Customize the visibility of the buttons (approval only or both approval and disapproval) and label the buttons accordingly.

### Free Text Response Customization

Customize the message button label, form title, description, and the response button label.

### Custom Form Response Customization

Build a form with customizable fields and options, as per the n8n Form trigger's settings. Include options to customize button labels and form titles.

## Templates and Examples

- **AI agent chat**
- **Automate Multi-Platform Social Media Content Creation with AI**
- **Ask questions about a PDF using AI**

----------------------------------------

# Google Cloud Firestore Node

## Description
The Google Cloud Firestore node automates and integrates work with Google Cloud Firestore, supporting various operations for managing documents and collections.

## Operations
### Document
- **Create a document**: Adds a new document to a collection.
- **Create/Update a document**: Adds a new document or updates an existing document based on its ID.
- **Delete a document**: Removes a document from a collection.
- **Get a document**: Retrieves a specific document by its ID.
- **Get all documents from a collection**: Fetches all documents within a specified collection.
- **Run a query against your documents**: Executes a query to retrieve documents based on specified conditions.

### Collection
- **Get all root collections**: Retrieves all top-level collections from the Firestore database.

## Configuration Instructions
- **Authentication**: Refer to [Google credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Additional Information
If the desired operation is not supported by the Google Cloud Firestore node, utilize the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more details.

----------------------------------------

# Google Cloud Natural Language Node

Use the Google Cloud Natural Language node to automate work in Google Cloud Natural Language and integrate it with other applications.

## Credentials
Refer to Google Cloud Natural Language credentials for guidance on setting up authentication.

## Operations
- **Document**
  - **Analyze Sentiment**

## What to do if your operation isn't supported
If the node doesn't support the operation you want to perform, you can use the HTTP Request node to call the service's API. Steps include:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Google Cloud Realtime Database Node

Use the Google Cloud Realtime Database node to automate work in Google Cloud Realtime Database and integrate it with other applications. n8n supports various Google Cloud Realtime Database features, including writing, deleting, getting, and appending databases.

## Credentials

Refer to Google Cloud Realtime Database credentials for guidance on setting up authentication.

## Operations

- **Write data to a database**
- **Delete data from a database**
- **Get a record from a database**
- **Append to a list of data**
- **Update an item in a database**

----------------------------------------

# Google Cloud Storage Node

Use the Google Cloud Storage node to automate tasks in Google Cloud Storage and integrate it with other applications. n8n supports various Google Cloud Storage features, including creating, updating, deleting, and retrieving buckets and objects.

## Credentials

Refer to [Google Cloud Storage credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Operations

### Bucket
- **Create**: Create a new bucket.
- **Delete**: Delete an existing bucket.
- **Get**: Retrieve a bucket.
- **Get Many**: Retrieve multiple buckets.
- **Update**: Update an existing bucket.

### Object
- **Create**: Upload a new object.
- **Delete**: Delete an existing object.
- **Get**: Retrieve an object.
- **Get Many**: Retrieve multiple objects.
- **Update**: Update an existing object.

## What to do if your operation isn't supported

If this node doesn't support the operation you want to perform, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

### Steps to use HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google Contacts Node

The Google Contacts node automates work in Google Contacts and integrates it with other applications, offering features to create, update, retrieve, delete, and get contacts.

## Operations

- **Create a contact**
- **Delete a contact**
- **Get a contact**
- **Retrieve all contacts**
- **Update a contact**

## Credentials

Refer to the [Google Contacts credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

This node can be used to enhance the capabilities of an AI agent. For details, refer to the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

## Using HTTP Request Node

If an operation is not supported by this node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. 

Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google Docs Node Documentation

Use the Google Docs node to automate work in Google Docs, and integrate Google Docs with other applications. n8n supports a range of Google Docs features, including creating, updating, and retrieving documents.

## Credentials
Refer to Google Docs credentials for guidance on setting up authentication.

## Operations
- Document
  - Create
  - Get
  - Update

## What to Do if Your Operation Isn't Supported
If this node doesn't support the operation you want, you can use the HTTP Request node to call the service's API. You can use the credential you created for this service in the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Google Drive Node Documentation

Use the Google Drive node to automate work in Google Drive, integrating it with other applications. n8n supports a variety of Google Drive features, including creating, updating, listing, deleting, and accessing drives, files, and folders.

## Credentials

Refer to [Google Drive credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Operations

### File
- **Copy**: a file
- **Create from text**
- **Delete**: a file
- **Download**: a file
- **Move**: a file
- **Share**: a file
- **Update**: a file
- **Upload**: a file

### File/Folder
- **Search**: files and folders

### Folder
- **Create**: a folder
- **Delete**: a folder
- **Share**: a folder

### Shared Drive
- **Create**: a shared drive
- **Delete**: a shared drive
- **Get**: a shared drive
- **Get Many**: shared drives
- **Update**: a shared drive

## Common Issues

For common questions or issues and suggested solutions, refer to the [Common issues](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive/common-issues/) section.

## What to Do if Your Operation Isn't Supported

If this node doesn't support the operation you want, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

1. In the HTTP Request node, select **Authentication** → **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google Perspective Node

Use the Google Perspective node to automate work in Google Perspective, integrating it with other applications. This node supports a range of Google Perspective features, including comment analysis.

## Credentials

Refer to Google Perspective credentials for guidance on setting up authentication.

## Operations

- **Analyze Comment**: An operation that allows for the analysis of comments through Google Perspective.

## HTTP Request Node

If your desired operation is not supported, use the **HTTP Request node** to call the service's API. You can utilize the credentials created for Google Perspective in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to the Custom API operations documentation for more information.

----------------------------------------

# Google Sheets Node in n8n

The Google Sheets node allows automation of tasks in Google Sheets and integration with other applications. It supports a range of features including creating, updating, deleting, appending, and retrieving documents.

## Credentials

Refer to the Google Sheets credentials documentation for guidance on setting up authentication.

## Operations

### Document Operations
- **Create**: Create a new spreadsheet.
- **Delete**: Delete an existing spreadsheet.

### Sheet Within Document Operations
- **Append or Update Row**: Append a new row or update the existing one.
- **Append Row**: Create a new row in a sheet.
- **Clear**: Clear all data from a sheet.
- **Create**: Create a new sheet within a spreadsheet.
- **Delete**: Delete an existing sheet.
- **Delete Rows or Columns**: Remove specific columns or rows from a sheet.
- **Get Row(s)**: Read all rows in a sheet.
- **Update Row**: Update a specific row in a sheet.

## Common Issues

For common questions or issues and suggested solutions, refer to the Common Issues documentation.

## Custom API Operations

If the desired operation is not supported, use the HTTP Request node to call the Google Sheets API directly. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the appropriate service and select your credential. 
3. Refer to the Custom API operations documentation for more details.

## Related Resources

Refer to the Google Sheets API documentation for additional information about its capabilities.

----------------------------------------

# Google Slides Node Documentation

Use the Google Slides node to automate work in Google Slides and integrate Google Slides with other applications. This node supports a variety of Google Slides features, including creating presentations and retrieving pages.

## Credentials

Refer to [Google Credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Operations

- **Page**
  - **Get a page**
  - **Get a thumbnail**
  
- **Presentation**
  - **Create a presentation**
  - **Get a presentation**
  - **Get presentation slides**
  - **Replace text in a presentation**

## Best Practices

If this node doesn't support the operation you want to perform, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. 

### Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Google Tasks Node

## Overview
The Google Tasks node automates work in Google Tasks and integrates with other applications. It supports various operations regarding task management.

## Credentials
Refer to [Google Tasks credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for setting up authentication.

## Operations
- **Add a task**: Add a task to a task list.
- **Delete a task**: Remove a specific task.
- **Retrieve a task**: Get details for a specific task.
- **Retrieve all tasks**: Get all tasks from a task list.
- **Update a task**: Modify details of a specific task.

## Configuration Instructions
If the required operation isn't supported directly by the Google Tasks node, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Google Tasks API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for further information.

----------------------------------------

# Google Translate Node

Use the Google Translate node to automate work in Google Translate and integrate it with other applications. This node supports a range of Google Translate features, including translating languages.

## Operations

- **Language**
  - **Translate data**

## Credentials

Refer to [Google Translate credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## HTTP Request Node

If this node doesn't support the operation you want to execute, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Gotify Node

Use the Gotify node to automate work in Gotify and integrate Gotify with other applications. n8n supports a range of Gotify features, including creating, deleting, and getting messages.

## Credentials

Refer to [Gotify credentials](https://docs.n8n.io/integrations/builtin/credentials/gotify/) for guidance on setting up authentication.

## Operations

- **Message**
  - **Create**: Create a new message in Gotify.
  - **Delete**: Delete an existing message in Gotify.
  - **Get All**: Retrieve all messages from Gotify.

## Templates and Examples

Browse Gotify integration templates or search all templates for more examples and use cases.

----------------------------------------

# GoToWebinar Node Documentation

Use the GoToWebinar node to automate work in GoToWebinar, and integrate GoToWebinar with other applications. n8n supports a range of GoToWebinar features, including creating, getting, and deleting attendees, organizers, and registrants.

## Credentials

Refer to [GoToWebinar credentials](https://docs.n8n.io/integrations/builtin/credentials/gotowebinar/) for guidance on setting up authentication.

## Operations

- **Attendee**
  - Get
  - Get All
  - Get Details
- **Co-Organizer**
  - Create
  - Delete
  - Get All
  - Re-invite
- **Panelist**
  - Create
  - Delete
  - Get All
  - Re-invite
- **Registrant**
  - Create
  - Delete
  - Get
  - Get All
- **Session**
  - Get
  - Get All
  - Get Details
- **Webinar**
  - Create
  - Get
  - Get All
  - Update

## What to Do If Your Operation Isn't Supported

If this node doesn't support the operation you want to perform, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

You can use the credential you created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Grafana Node

Use the Grafana node to automate work in Grafana and integrate Grafana with other applications. n8n supports various Grafana features, including creating, updating, deleting, and retrieving dashboards, teams, and users.

## Operations

### Dashboard
- Create a dashboard
- Delete a dashboard
- Get a dashboard
- Get all dashboards
- Update a dashboard

### Team
- Create a team
- Delete a team
- Get a team
- Retrieve all teams
- Update a team

### Team Member
- Add a member to a team
- Retrieve all team members
- Remove a member from a team

### User
- Delete a user from the current organization
- Retrieve all users in the current organization
- Update a user in the current organization

## Credentials

Refer to Grafana credentials for guidance on setting up authentication.

## What to do if your operation isn't supported

If the node doesn't support the desired operation, use the HTTP Request node to call the service's API with the following steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Grist Node Documentation

## Core Concepts
The Grist node automates tasks in Grist and integrates Grist with other applications. It supports various features, including creating, updating, deleting, and reading rows in a table.

## Credentials
Refer to Grist credentials for guidance on setting up authentication.

## Operations
- **Create rows in a table**
- **Delete rows from a table**
- **Read rows from a table**
- **Update rows in a table**

## Get the Row ID
To update or delete a record, the Row ID is required. There are two methods to obtain it:

1. **Create a Row ID Column in Grist**
   - Create a new column in your Grist table with the formula: 
     ```plaintext
     $id
     ```

2. **Use the Get All Operation**
   - The **Get All** operation returns the Row ID of each record along with the fields.
   - Access it using the expression: 
     ```plaintext
     {{$node["GristNodeName"].json["id"]}}
     ```

## Filter Records When Using the Get All Operation
- Select **Add Option** and choose **Filter** from the dropdown list.
- Add filters for any number of columns; results will only include records that match all specified columns.
- For each column, enter multiple values separated by commas; results will include records matching any of those column values.

----------------------------------------

# Google Workspace Admin Node

Use the Google Workspace Admin node to automate tasks in Google Workspace Admin and integrate it with other applications. This node supports various Google Workspace Admin features, including managing users, groups, and ChromeOS devices.

## Credentials
Refer to the Google credentials documentation for setting up authentication.

## Operations
- **ChromeOS Device**
  - Get a ChromeOS device
  - Get many ChromeOS devices
  - Update a ChromeOS device
  - Change the status of a ChromeOS device

- **Group**
  - Create a group
  - Delete a group
  - Get a group
  - Get many groups
  - Update a group

- **User**
  - Add an existing user to a group
  - Create a user
  - Delete a user
  - Get a user
  - Get many users
  - Remove a user from a group
  - Update a user

## Custom Fields Parameter
To control which custom fields to retrieve when getting a user's information, use the **Custom Fields** parameter:

- **Don't Include**: Omit all custom fields.
- **Custom**: Include specific custom fields from schemas in **Custom Schema Names or IDs**.
- **Include All**: Retrieve all fields associated with the user.

### Steps to Include Custom Fields
1. Select **Custom** from the **Custom Fields** dropdown list.
2. Choose the schema names to include in the **Custom Schema Names or IDs** dropdown list.

----------------------------------------

# Hacker News Node Documentation

## Core Concepts
The Hacker News node automates work in Hacker News and integrates it with other applications. It supports various features such as retrieving articles and user data.

## Credentials
This node does not require authentication.

## Operations
The following operations are supported by the Hacker News node:
- **Get all items**
- **Get a Hacker News article**
- **Get a Hacker News user**

## Configuration Instructions
This node can be utilized as an AI tool where many parameters can be set automatically or directed by AI. For more details, refer to the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/). 

## Best Practices
- Consider using the Hacker News node in conjunction with AI capabilities to optimize workflows.
  
## Workflow Patterns
Integrate workflow patterns to enhance functionalities:
- Example: Using multiple operations in a single workflow to gather and process data from Hacker News.

----------------------------------------

# HaloPSA Node Documentation

## Overview
The HaloPSA node is used to automate tasks in HaloPSA and to integrate HaloPSA with other applications. It supports operations for managing clients, sites, tickets, and users.

## Credentials
Refer to [HaloPSA credentials](https://docs.n8n.io/integrations/builtin/credentials/halopsa/) for guidance on setting up authentication.

## Operations

### Client Operations
- **Create a client**
- **Delete a client**
- **Get a client**
- **Get all clients**
- **Update a client**

### Site Operations
- **Create a site**
- **Delete a site**
- **Get a site**
- **Get all sites**
- **Update a site**

### Ticket Operations
- **Create a ticket**
- **Delete a ticket**
- **Get a ticket**
- **Get all tickets**
- **Update a ticket**

### User Operations
- **Create a user**
- **Delete a user**
- **Get a user**
- **Get all users**
- **Update a user**

## Templates and Examples
- [Browse HaloPSA integration templates](https://n8n.io/integrations/halopsa/)
- [Search all templates](https://n8n.io/workflows/)

----------------------------------------

# Harvest Node Documentation

### Overview
The Harvest node automates tasks in Harvest and integrates it with other applications. It supports features like creating, updating, deleting, and fetching clients, contacts, invoices, tasks, expenses, users, and projects.

### Credentials
Refer to Harvest credentials for guidance on setting up authentication.

### Operations
- **Client**
  - Create a client
  - Delete a client
  - Get data of a client
  - Get data of all clients
  - Update a client
- **Company**
  - Retrieves the company for the currently authenticated user
- **Contact**
  - Create a contact
  - Delete a contact 
  - Get data of a contact
  - Get data of all contacts
  - Update a contact
- **Estimate**
  - Create an estimate
  - Delete an estimate
  - Get data of an estimate
  - Get data of all estimates
  - Update an estimate
- **Expense**
  - Get data of an expense
  - Get data of all expenses
  - Create an expense
  - Update an expense
  - Delete an expense
- **Invoice**
  - Get data of an invoice
  - Get data of all invoices
  - Create an invoice
  - Update an invoice
  - Delete an invoice
- **Project**
  - Create a project
  - Delete a project
  - Get data of a project
  - Get data of all projects
  - Update a project
- **Task**
  - Create a task
  - Delete a task
  - Get data of a task
  - Get data of all tasks
  - Update a task
- **Time Entries**
  - Create a time entry using duration
  - Create a time entry using start and end time
  - Delete a time entry
  - Delete a time entry's external reference
  - Get data of a time entry
  - Get data of all time entries
  - Restart a time entry
  - Stop a time entry
  - Update a time entry
- **User**
  - Create a user
  - Delete a user
  - Get data of a user
  - Get data of all users
  - Get data of authenticated user
  - Update a user

### Custom API Operations
If the desired operation is not supported by the Harvest node, use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Help Scout Node Documentation

Use the Help Scout node to automate work in Help Scout, integrating it with other applications. n8n supports a variety of Help Scout features, such as creating, updating, deleting, and retrieving conversations and customers.

## Credentials

Refer to Help Scout credentials for guidance on setting up authentication.

## Operations

- **Conversation**
  - Create a new conversation
  - Delete a conversation
  - Get a conversation
  - Get all conversations

- **Customer**
  - Create a new customer
  - Get a customer
  - Get all customers
  - Get customer property definitions
  - Update a customer

- **Mailbox**
  - Get data of a mailbox
  - Get all mailboxes

- **Thread**
  - Create a new chat thread
  - Get all chat threads

## Custom API Operations

If an operation is not supported by this node, use the HTTP Request node to call the service's API. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# HighLevel Node Documentation

Use the HighLevel node to automate work in HighLevel and integrate it with other applications. n8n supports various HighLevel features, including creating, updating, deleting, and retrieving contacts, opportunities, and tasks, as well as booking appointments and retrieving free time slots in calendars.

## Operations

- **Contact**
  - Create or update
  - Delete
  - Get
  - Get many
  - Update
  
- **Opportunity**
  - Create
  - Delete
  - Get
  - Get many
  - Update
  
- **Task**
  - Create
  - Delete
  - Get
  - Get many
  - Update
  
- **Calendar**
  - Book an appointment
  - Get free slots

## Credentials

Refer to [HighLevel credentials](https://docs.n8n.io/integrations/builtin/credentials/highlevel/) for guidance on setting up authentication.

## Custom HTTP Request

If this node does not support the operation you want to perform, you can use the HTTP Request node to call the service's API.

### Procedure

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Home Assistant Node

Use the Home Assistant node to automate tasks in Home Assistant and integrate with other applications. Supported features include managing camera proxies, configurations, logs, services, and templates.

## Credentials

Refer to [Home Assistant credentials](https://docs.n8n.io/integrations/builtin/credentials/homeassistant/) for guidance on setting up authentication.

## Operations

- **Camera Proxy**
  - Get the camera screenshot
- **Config**
  - Get the configuration
  - Check the configuration
- **Event**
  - Create an event
  - Get all events
- **Log**
  - Get a log for a specific entity
  - Get all logs
- **Service**
  - Call a service within a specific domain
  - Get all services
- **State**
  - Create a new record or update the current one if it already exists (upsert)
  - Get a state for a specific entity
  - Get all states
- **Template**
  - Create a template

## Related Resources

Refer to [Home Assistant's documentation](https://developers.home-assistant.io/docs/api/rest/) for more information about the service.

----------------------------------------

# HubSpot Node Documentation

Use the HubSpot node to automate work in HubSpot, and integrate HubSpot with other applications. n8n supports various HubSpot features, including creating, updating, deleting, and retrieving contacts, deals, lists, engagements, and companies.

## Credentials

Refer to [HubSpot credentials](https://docs.n8n.io/integrations/builtin/credentials/hubspot/) for guidance on setting up authentication.

## Operations

### Contact
- Create/Update a contact
- Delete a contact
- Get a contact
- Get all contacts
- Get recently created/updated contacts
- Search contacts

### Contact List
- Add contact to a list
- Remove a contact from a list

### Company
- Create a company
- Delete a company
- Get a company
- Get all companies
- Get recently created companies
- Get recently modified companies
- Search companies by domain
- Update a company

### Deal
- Create a deal
- Delete a deal
- Get a deal
- Get all deals
- Get recently created deals
- Get recently modified deals
- Search deals
- Update a deal

### Engagement
- Create an engagement
- Delete an engagement
- Get an engagement
- Get all engagements

### Form
- Get all fields from a form
- Submit data to a form

### Ticket
- Create a ticket
- Delete a ticket
- Get a ticket
- Get all tickets
- Update a ticket

## Unsupported Operations

If a desired operation isn't supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Humantic AI Node

Use the Humantic AI node to automate work in Humantic AI, integrating it with other applications. n8n supports numerous Humantic AI features, including creating, retrieving, and updating profiles.

## Credentials

Refer to Humantic AI credentials for guidance on setting up authentication.

## Operations

- **Profile**
  - **Create a profile**: Allows the creation of a new user profile in Humantic AI.
  - **Retrieve a profile**: Fetches the details of an existing user profile.
  - **Update a profile**: Modifies an existing user profile.

----------------------------------------

# Hunter Node Documentation

Use the Hunter node to automate work in Hunter and integrate Hunter with other applications. n8n supports a range of Hunter features including retrieving and verifying email addresses.

## Credentials

Refer to Hunter credentials for guidance on setting up authentication.

## Operations

- **Get Email Addresses**: Retrieve every email address found on the internet using a given domain name, with sources.
- **Generate Email Address**: Generate or retrieve the most likely email address from a domain name, first name, and last name.
- **Verify Email Address**: Verify the deliverability of an email address.

## Templates and Examples

1. **Automatically email great leads when they submit a form and record in HubSpot**
   
2. **Verify emails & enrich new form leads and save them to HubSpot**

3. **Automated Job Hunter: Upwork Opportunity Aggregator & AI-Powered Notifier**

----------------------------------------

# Intercom Node

Use the Intercom node to automate work in Intercom, integrating it with other applications. n8n supports various Intercom features including creating, updating, deleting, and retrieving companies, leads, and users.

## Credentials

Refer to [Intercom credentials](https://docs.n8n.io/integrations/builtin/credentials/intercom/) for guidance on setting up authentication.

## Operations

### Company
- **Create a new company**
- **Get data of a company**
- **Get data of all companies**
- **Update a company**
- **List company's users**

### Lead
- **Create a new lead**
- **Delete a lead**
- **Get data of a lead**
- **Get data of all leads**
- **Update a lead**

### User
- **Create a new user**
- **Delete a user**
- **Get data of a user**
- **Get data of all users**
- **Update a user**

----------------------------------------

# Invoice Ninja Node

The Invoice Ninja node automates work in Invoice Ninja and integrates it with other applications. It supports operations including creating, updating, deleting, and retrieving clients, expenses, invoices, payments, and quotes.

## Credentials

Refer to **Invoice Ninja credentials** for guidance on setting up authentication.

## Operations

### Client
- **Create a new client**
- **Delete a client**
- **Get data of a client**
- **Get data of all clients**

### Expense
- **Create a new expense**
- **Delete an expense**
- **Get data of an expense**
- **Get data of all expenses**

### Invoice
- **Create a new invoice**
- **Delete an invoice**
- **Email an invoice**
- **Get data of an invoice**
- **Get data of all invoices**

### Payment
- **Create a new payment**
- **Delete a payment**
- **Get data of a payment**
- **Get data of all payments**

### Quote
- **Create a new quote**
- **Delete a quote**
- **Email a quote**
- **Get data of a quote**
- **Get data of all quotes**

### Task
- **Create a new task**
- **Delete a task**
- **Get data of a task**
- **Get data of all tasks**

## Templates and Examples

Browse **Invoice Ninja integration templates**, or search all templates.

## What to Do If Your Operation Isn't Supported

If the desired operation is not supported, use the **HTTP Request node** to call the service's API.

Steps to use HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to **Custom API operations** for more information.

----------------------------------------

# Iterable Node Documentation

Use the Iterable node to automate work in Iterable and integrate it with other applications. n8n supports various Iterable features, including user management and recording user actions.

## Credentials

Refer to Iterable credentials for guidance on setting up authentication.

## Operations

- **Event**
  - Record the actions a user performs.
  
- **User**
  - Create/Update a user.
  - Delete a user.
  - Get a user.
  
- **User List**
  - Add a user to a list.
  - Remove a user from a list.

----------------------------------------

## Jenkins Node Documentation

### Overview
The Jenkins node automates work in Jenkins and integrates Jenkins with other applications. It supports operations like listing builds, managing instances, and creating and copying jobs.

### Authentication
Refer to Jenkins credentials for guidance on setting up authentication.

### Operations
- **Build**
  - List Builds
- **Instance**
  - Cancel quiet down state
  - Put Jenkins in quiet mode (no builds can be started, ready for shutdown)
  - Restart Jenkins immediately (if possible)
  - Restart Jenkins after no jobs are running (if possible)
  - Shutdown Jenkins when no jobs are running
  - Shutdown Jenkins immediately
- **Job**
  - Copy a specific job
  - Create a new job
  - Trigger a specific job

### Templates and Examples
- Browse Jenkins integration templates or search all templates.

----------------------------------------

## Jina AI Node Documentation

Use the Jina AI node to automate work in Jina AI and integrate with other applications. n8n supports a wide range of Jina AI features.

### Credentials

Refer to the [Jina AI Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/jinaai/) for authentication information for this node.

### Operations

- **Reader**:
  - **Read**: Fetches content from a URL and converts it to clean, LLM-friendly formats.
  - **Search**: Performs a web search using Jina AI and returns the top results as clean, LLM-friendly formats.
  
- **Research**:
  - **Deep Research**: Research a topic and generate a structured research report.

### Related Resources

Refer to:
- [Jina AI's Reader API Documentation](https://r.jina.ai/docs)
- [Jina AI's Search API Documentation](https://s.jina.ai/docs)

### HTTP Request Node Usage

If this node does not support the operation you want to perform, use the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API Operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Jira Software Node Documentation

Use the Jira Software node to automate work in Jira, integrating it with other applications. n8n supports various Jira features, including creating, updating, deleting, and getting issues and users.

## Credentials

Refer to [Jira credentials](https://docs.n8n.io/integrations/builtin/credentials/jira/) for authentication setup.

## Operations

### Issue Operations
- **Get issue changelog**
- **Create a new issue**
- **Delete an issue**
- **Get an issue**
- **Get all issues**
- **Create an email notification for an issue and add it to the mail queue**
- **Return transitions**: Either all transitions or a specific transition based on the issue's status.
- **Update an issue**

### Issue Attachment Operations
- **Add attachment to issue**
- **Get an attachment**
- **Get all attachments**
- **Remove an attachment**

### Issue Comment Operations
- **Add comment to issue**
- **Get a comment**
- **Get all comments**
- **Remove a comment**
- **Update a comment**

### User Operations
- **Create a new user**
- **Delete a user**
- **Retrieve a user**

## Fetch Issues for a Specific Project

To fetch issues for a particular project using the **Get All** operation:
1. Select **Get All** from the **Operation** dropdown list.
2. Toggle **Return All** to true.
3. Select **Add Option** and then select **JQL**.
4. Enter `project=n8n` in the **JQL** field.

This query fetches all issues in the project named `n8n`. Replace `n8n` with the name of your project to fetch relevant issues.

## What to Do If Your Operation Isn't Supported

If the node doesn't support a desired operation, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

**Steps:**
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

## Related Resources

Refer to the [official JQL documentation](https://www.atlassian.com/software/jira/guides/expand-jira/jql) for more on Jira Query Language (JQL).

----------------------------------------

# Kafka Node Documentation

## Overview
The Kafka node automates work in Kafka and integrates Kafka with other applications, supporting a wide range of Kafka features, including sending messages.

## Operations
- **Send Message**: Used to send messages to Kafka topics.

## Credentials
Refer to the Kafka credentials documentation for guidance on setting up authentication: [Kafka Credentials](https://docs.n8n.io/integrations/builtin/credentials/kafka/).

## Best Practices
This node can be utilized to enhance the capabilities of an AI agent. Parameters can be set automatically or guided by AI. More information can be found in the AI tool parameters documentation: [AI Tool Parameters](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

----------------------------------------

# Keap Node

Use the Keap node to automate work in Keap and integrate Keap with other applications. n8n supports various Keap features including creating, updating, deleting, and retrieving companies, products, ecommerce orders, emails, and files.

## Credentials
Refer to [Keap credentials](https://docs.n8n.io/integrations/builtin/credentials/keap/) for setup instructions.

## Operations

- **Company**
  - Create a company
  - Retrieve all companies
- **Contact**
  - Create/update a contact
  - Delete a contact
  - Retrieve a contact
  - Retrieve all contacts
- **Contact Note**
  - Create a note
  - Delete a note
  - Get notes
  - Retrieve all notes
  - Update a note
- **Contact Tag**
  - Add a list of tags to a contact
  - Delete a contact's tag
  - Retrieve all contact's tags
- **Ecommerce Order**
  - Create an ecommerce order
  - Get an ecommerce order
  - Delete an ecommerce order
  - Retrieve all ecommerce orders
- **Ecommerce Product**
  - Create an ecommerce product
  - Delete an ecommerce product
  - Get an ecommerce product
  - Retrieve all ecommerce products
- **Email**
  - Create a record of an email sent to a contact
  - Retrieve all sent emails
  - Send Email
- **File**
  - Delete a file
  - Retrieve all files
  - Upload a file

## What to do if your operation isn't supported
If the node does not support the desired operation, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service’s API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Kitemaker Node Documentation

Use the Kitemaker node to automate work in Kitemaker and integrate it with other applications. n8n supports features such as retrieving data on organizations, spaces, and users, as well as creating, getting, and updating work items.

## Credentials

Refer to Kitemaker credentials for guidance on setting up authentication.

## Operations

- **Organization**
  - Retrieve data on the logged-in user's organization.
- **Space**
  - Retrieve data on all the spaces in the logged-in user's organization.
- **User**
  - Retrieve data on all the users in the logged-in user's organization.
- **Work Item**
  - Create
  - Get
  - Get All
  - Update

## Templates and Examples

### Create, Update, and Retrieve a Record from FileMaker

**Template**: Create, update, and retrieve a record from FileMaker.

### Convert FileMaker Data API to Flat File Array

**Template**: Convert FileMaker Data API to flat file array.

### Integrate Xero with FileMaker Using Webhooks

**Template**: Integrate Xero with FileMaker using webhooks.

----------------------------------------

# KoboToolbox Node

Use the KoboToolbox node to automate work in KoboToolbox, integrating KoboToolbox with other applications. It supports creating, updating, deleting, and retrieving files, forms, hooks, and submissions.

## Credentials

Refer to [KoboToolbox credentials](https://docs.n8n.io/integrations/builtin/credentials/kobotoolbox/) for authentication setup.

## Operations

- **File**
  - Create
  - Delete
  - Get
  - Get Many
- **Form**
  - Get
  - Get Many
    - Redeploy
- **Hook**
  - Get
  - Get Many
  - Logs
  - Retry All
  - Retry One
- **Submission**
  - Delete
  - Get
  - Get Many
  - Get Validation Status
  - Update Validation Status

## Query Options

The Query Submission operation supports:

- **Start:** index offset for pagination.
- **Limit:** maximum records to return (API limit is 30,000).
- **Query:** filter predicates in MongoDB's JSON query format, e.g., `{"status": "success", "_submission_time": {"$lt": "2021-11-01T01:02:03"}}`.
- **Fields:** specify fields to fetch for lighter response.
- **Sort:** sorting criteria in MongoDB JSON format, e.g., `{"status": 1, "_submission_time": -1}`.

## Submission Options

Operations returning form submission data offer options to adjust the response:

- Download options for attachments with naming patterns and file sizes.
- Formatting options for reformatting submission data.

### About Reformatting

Reformatting logic is available via the **Reformat?** parameter in operations returning submissions. This reorganizes JSON into a multi-level hierarchy, renames fields, parses geospatial fields into GeoJSON, and converts fields based on provided masks.

#### Example JSON

Default submission example:
```json
{
  "_id": 471987,
  "formhub/uuid": "189436bb09a54957bfcc798e338b54d6",
  "start": "2021-12-05T16:13:38.527+02:00",
  "end": "2021-12-05T16:15:33.407+02:00",
  "Field_Details/Field_Name": "Test Fields",
  //...
}
```

Reformatted submission example (with appropriate masks):
```json
{
  "id": 471987,
  "formhub": {
    "uuid": "189436bb09a54957bfcc798e338b54d6"
  },
  "start": "2021-12-05T16:13:38.527+02:00",
  "Field_Details": {
    "Field_Name": "Test Fields",
    //...
  },
  //...
}
```

## Custom API Operations

If the required operation is not supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the API. Steps to configure:

1. Select **Authentication** > **Predefined Credential Type** in HTTP Request node.
2. Choose the service.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for detailed information.

----------------------------------------

# Lemlist Node Documentation

Use the Lemlist node to automate work in Lemlist and integrate it with other applications. 

## Credentials
Refer to [Lemlist credentials](https://docs.n8n.io/integrations/builtin/credentials/lemlist/) for guidance on setting up authentication.

## Operations

### Activity
- **Get Many**: Get many activities

### Campaign
- **Get Many**: Get many campaigns
- **Get Stats**: Get campaign stats

### Enrichment
- **Get**: Fetches a previously completed enrichment
- **Enrich Lead**: Enrich a lead using an email or LinkedIn URL
- **Enrich Person**: Enrich a person using an email or LinkedIn URL

### Lead
- **Create**: Create a new lead
- **Delete**: Delete an existing lead
- **Get**: Get an existing lead
- **Unsubscribe**: Unsubscribe an existing lead

### Team
- **Get**: Get an existing team
- **Get Credits**: Get an existing team's credits

### Unsubscribe
- **Add**: Add an email to an unsubscribe list
- **Delete**: Delete an email from an unsubscribe list
- **Get Many**: Get many unsubscribed emails

## Custom API Operations
If this node doesn't support the operation you want to perform, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

### Steps
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Line Node

**Status:** Deprecated - End of service on April 1st, 2025

Use the Line node to automate tasks in Line and integrate it with other applications. n8n supports various Line features, including sending notifications.

## Credentials

Refer to [Line credentials](https://docs.n8n.io/integrations/builtin/credentials/line/) for authentication setup.

## Operations

- **Notification**
  - Sends notifications to users or groups.

## Best Practices

If the desired operation is not supported by this node, utilize the **HTTP Request node** to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the corresponding service.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Linear Node Documentation

The Linear node automates work in Linear and integrates it with other applications. It supports a range of Linear features, including creating, updating, deleting, and getting issues.

## Credentials

Refer to Linear credentials for guidance on setting up authentication.

## Operations

- **Issue**
  - **Create**
  - **Delete**
  - **Get**
  - **Get All**
  - **Update**

## What to do if your operation isn't supported

If the desired operation is not supported by this node, use the HTTP Request node to call the Linear API. The credential created for this service can be utilized in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# LingvaNex Node Documentation

## Overview
The LingvaNex node enables automation of tasks within LingvaNex and integration with various applications for data translation.

## Credentials
Refer to the [LingvaNex credentials](https://docs.n8n.io/integrations/builtin/credentials/lingvanex/) for authentication setup.

## Operations
- **Translate data**: This operation allows for the translation of textual information using the LingvaNex service.

## Best Practices
To effectively utilize the LingvaNex node, ensure that you have the necessary credentials set up and leverage the translation operation in workflows to automate language translation tasks.

## Code Examples
*(No specific code examples provided in the original text)*

----------------------------------------

# LinkedIn Node Documentation

Use the LinkedIn node to automate work in LinkedIn and integrate LinkedIn with other applications. n8n supports creating posts.

## Credentials

Refer to [LinkedIn credentials](https://docs.n8n.io/integrations/builtin/credentials/linkedin/) for guidance on setting up authentication.

## Operations

- **Post**
  - **Create**

## Parameters

- **Post As**: Choose whether to post as a **Person** or **Organization**.
- **Person Name or ID** and **Organization URN**: Enter an identifier for the person or organization.
  - If posting as an Organization, enter the organization number in the URN field (e.g., `03262013`, not `urn:li:company:03262013`).
- **Text**: The post contents.
- **Media Category**: Use this when including images or article URLs in your post.

## What to do if your operation isn't supported

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# LoneScale Node Documentation

Use the LoneScale node to automate work in LoneScale and integrate LoneScale with other applications. n8n has built-in support for managing Lists and Items in LoneScale.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/lonescale/).

## Operations

- **List**
  - Create
- **Item**
  - Create

## Configuration Instructions

If an operation isn't supported by this node, you can use the HTTP Request node to call the service's API. Use the credential created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information. 

## Related Resources

Refer to [LoneScale's documentation](https://help-center.lonescale.com/en/articles/6454360-lonescale-public-api) for more information about the service.

n8n provides a trigger node for LoneScale. Documentation for the trigger node can be found [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.lonescaletrigger/).

----------------------------------------

# Magento 2 Node

Use the Magento 2 node to automate work in Magento 2, integrating it with other applications. n8n supports various Magento 2 features including customer, invoice, order, and product management.

## Credentials

Refer to [Magento 2 credentials](https://docs.n8n.io/integrations/builtin/credentials/magento2/) for authentication setup.

## Operations

### Customer
- Create a new customer
- Delete a customer
- Get a customer
- Get all customers
- Update a customer

### Invoice
- Create an invoice

### Order
- Cancel an order
- Get an order
- Get all orders
- Ship an order

### Product
- Create a product
- Delete a product
- Get a product
- Get all products
- Update a product

## Custom Operations

If a desired operation isn't supported by this node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API with the following steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Mailcheck Node

Use the Mailcheck node to automate work in Mailcheck and integrate it with other applications. n8n supports a range of Mailcheck features, including email checking.

## Operations

- **Email**
  - **Check**: Validate email addresses.

## Credentials

Refer to the [Mailcheck credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/mailcheck/) for guidance on setting up authentication.

## API Documentation

- **Endpoint**: Mailcheck API endpoints can perform various operations supported by the node.
- **Method**: Variable based on the operation (e.g., POST for checking emails).
- **Authentication**: Requires Mailcheck credentials.

## Best Practices

- Use the Mailcheck node as part of an AI tool to enhance capabilities, allowing parameters to be set automatically or directed by AI. For more, refer to the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

----------------------------------------

# Mailchimp Node Documentation

Use the Mailchimp node to automate tasks in Mailchimp and integrate it with other applications. The Mailchimp node supports features including creating, updating, and deleting campaigns, as well as retrieving list groups.

## Credentials
Refer to [Mailchimp credentials](https://docs.n8n.io/integrations/builtin/credentials/mailchimp/) for setup guidance.

## Operations
- **Campaign**
  - Delete a campaign
  - Get a campaign
  - Get all campaigns
  - Replicate a campaign
  - Create a Resend to Non-Openers version of this campaign
  - Send a campaign

- **List Group**
  - Get all groups

- **Member**
  - Create a new member on list
  - Delete a member on list
  - Get a member on list
  - Get all members on list
  - Update a member on list

- **Member Tag**
  - Add tags from a list member
  - Remove tags from a list member

## Supported Operations for Unsupported Scenarios
If the desired operation is not supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Mailchimp API with the following steps:
1. In the HTTP Request node, select **Authentication** \> **Predefined Credential Type**.
2. Select the service to connect.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# MailerLite Node Documentation

Use the MailerLite node to automate work in MailerLite, integrating it with other applications. n8n supports various MailerLite features including creating, updating, deleting, and retrieving subscribers.

## Credentials

Refer to the [MailerLite credentials](https://docs.n8n.io/integrations/builtin/credentials/mailerlite/) for guidance on setting up authentication.

## Operations

- **Subscriber Operations**
  - Create a new subscriber
  - Get a subscriber
  - Get all subscribers
  - Update a subscriber

## Code Examples

### Create, Update and Get a Subscriber

Example workflow of creating, updating, and retrieving a subscriber using the MailerLite node.

### Receive Updates When a Subscriber is Added to a Group

Example workflow to receive notifications when a subscriber is added to a group in MailerLite.

### Capture Gumroad Sales

Example workflow to capture Gumroad sales, add the buyer to a MailerLite group, and log the entry to Google Sheets CRM.

----------------------------------------

# Mailgun Node

Use the Mailgun node to automate work in Mailgun and integrate it with other applications. n8n supports sending emails with Mailgun.

## Credentials

Refer to Mailgun credentials for guidance on setting up authentication.

## Operations

- **Send an email**

## What to do if your operation isn't supported

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. 

You can use the credential you created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication > Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Mailjet Node Documentation

## Overview
The Mailjet node automates tasks in Mailjet and integrates it with other applications. Features include sending emails and SMS.

## Credentials
Refer to Mailjet credentials for setting up authentication.

## Operations
- **Email**
  - Send an email
  - Send an email template
- **SMS**
  - Send an SMS

## Using HTTP Request Node for Unsupported Operations
If the desired operation is not supported:
1. Use the HTTP Request node to call the service's API.
2. Select **Authentication** > **Predefined Credential Type**.
3. Choose the service and your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Mandrill Node Documentation

## Overview
The Mandrill node automates work in Mandrill and integrates it with other applications. n8n supports sending messages based on templates or HTML.

## Credentials
Refer to Mandrill credentials for guidance on setting up authentication.

## Operations
- **Message**
  - Send message based on template.
  - Send message based on HTML.

----------------------------------------

# marketstack Node Documentation

Use the marketstack node to automate work in marketstack and integrate marketstack with other applications. n8n supports features including getting exchanges, end-of-day data, and tickers.

## Credentials

Refer to [marketstack credentials](https://docs.n8n.io/integrations/builtin/credentials/marketstack/) for authentication setup guidance.

## Operations

- **End-of-Day Data**
  - Get All
- **Exchange**
  - Get
- **Ticker**
  - Get

## Templates and Examples

Browse marketstack integration templates or search all templates.

----------------------------------------

# Matrix Node

Use the Matrix node to automate work in Matrix and integrate it with other applications. n8n supports various Matrix features, including:

- Getting current user account information
- Sending media and messages to a room
- Retrieving room members and messages

## Credentials

Refer to [Matrix credentials](https://docs.n8n.io/integrations/builtin/credentials/matrix/) for guidance on setting up authentication.

## Operations

- **Account**
  - Get current user's account information
  
- **Event**
  - Get single event by ID
  
- **Media**
  - Send media to a chat room
  
- **Message**
  - Send a message to a room
  - Get all messages from a room
  
- **Room**
  - Create a new chat room with defined settings
  - Invite a user to a room
  - Join a new room
  - Kick a user from a room
  - Leave a room
  
- **Room Member**
  - Get all members

----------------------------------------

# Mattermost Node

Use the Mattermost node to automate work in Mattermost and integrate it with other applications. n8n supports features such as creating, deleting, and retrieving channels and users, posting messages, and adding reactions.

## Credentials

Refer to [Mattermost credentials](https://docs.n8n.io/integrations/builtin/credentials/mattermost/) for guidance on setting up authentication.

## Operations

- **Channel**
  - Add a user to a channel
  - Create a new channel
  - Soft delete a channel
  - Get a page of members for a channel
  - Restore a soft deleted channel
  - Search for a channel
  - Get statistics for a channel
- **Message**
  - Soft delete a post
  - Post a message into a channel
  - Post an ephemeral message into a channel
- **Reaction**
  - Add a reaction to a post
  - Remove a reaction from a post
  - Get all reactions to one or more posts
- **User**
  - Create a new user
  - Deactivate a user and revoke all sessions
  - Retrieve all users
  - Get a user by email
  - Get a user by ID
  - Invite user to team

## HTTP Request Node Usage

If this node doesn't support the desired operation, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call Mattermost's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more guidance.

## Channel ID Field Error

If you encounter an error indicating that you do not have the appropriate permissions next to the **Channel ID** field, contact your system administrator to grant you the `post:channel` permission.

## Finding the Channel ID

To find the channel ID in Mattermost:
1. Select the channel from the left sidebar.
2. Click the channel name at the top.
3. Select **View Info**.

----------------------------------------

# Mautic Node Documentation

Use the Mautic node to automate work in Mautic and integrate Mautic with other applications. n8n supports features such as creating, updating, deleting, and retrieving companies and contacts, as well as managing campaign contacts.

## Credentials

Refer to Mautic credentials documentation for guidance on setting up authentication.

## Operations

- **Campaign Contact**
  - Add contact to a campaign
  - Remove contact from a campaign
  
- **Company**
  - Create a new company
  - Delete a company
  - Get data of a company
  - Get data of all companies
  - Update a company
  
- **Company Contact**
  - Add contact to a company
  - Remove a contact from a company
  
- **Contact**
  - Create a new contact
  - Delete a contact
  - Edit contact's points
  - Add/remove contacts from the don't contact list
  - Get data of a contact
  - Get data of all contacts
  - Send email to contact
  - Update a contact
  
- **Contact Segment**
  - Add contact to a segment
  - Remove contact from a segment
  
- **Segment Email**
  - Send

## HTTP Request Node

If an operation isn't supported by the Mautic node, use the HTTP Request node to call the Mautic API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to the Custom API operations documentation for more information.

----------------------------------------

# Medium Node

Use the Medium node to automate work in Medium and integrate Medium with other applications. n8n supports various Medium features, including creating posts and retrieving publications.

**Note:** Medium has stopped supporting the Medium API. New API keys cannot be configured for authentication.

Refer to [Medium credentials](https://docs.n8n.io/integrations/builtin/credentials/medium/) for guidance on setting up existing API keys.

## Operations

- **Post**
  - Create a post
- **Publication**
  - Get all publications

## What to do if your operation isn't supported

If the Medium node does not support the desired operation, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. 

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# MessageBird Node Documentation

Use the MessageBird node to automate tasks in MessageBird and integrate it with other applications. The node supports various MessageBird features, including sending messages and retrieving balances.

## Credentials

Refer to MessageBird credentials for guidance on setting up authentication.

## Operations

- **SMS**
  - **Send text messages (SMS)**
- **Balance**
  - **Get the balance**

## Best Practices

When using the MessageBird node, ensure that you have valid credentials set up to authenticate your requests properly. Always handle errors and responses appropriately when sending SMS to ensure message delivery.

----------------------------------------

# Metabase Node

The Metabase node allows automation in Metabase and integration with other applications. n8n supports features such as managing alerts, databases, metrics, and questions.

## Credentials
Refer to [Metabase credentials](https://docs.n8n.io/integrations/builtin/credentials/metabase/) for authentication setup.

## Operations

- **Alert**
  - Get
  - Get All
- **Database**
  - Add
  - Get All
  - Get Fields
- **Metric**
  - Get
  - Get All
- **Question**
  - Get
  - Get All
  - Result Data

## Use HTTP Request Node for Unsupported Operations
If the desired operation is not supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the API.

### Steps:
1. In the HTTP Request node, select **Authentication > Predefined Credential Type**.
2. Choose the service to connect with.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for additional guidance.

----------------------------------------

# Microsoft Dynamics CRM Node Documentation

Use the Microsoft Dynamics CRM node to automate work in Microsoft Dynamics CRM, and integrate it with other applications. n8n supports creating, updating, deleting, and retrieving Microsoft Dynamics CRM accounts.

## Operations

- **Account Operations:**
  - **Create**
  - **Delete**
  - **Get**
  - **Get All**
  - **Update**

## Credentials

Refer to Microsoft credentials documentation for guidance on setting up authentication.

## HTTP Request Node

If the desired operation is not supported, use the HTTP Request node to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations documentation for more information.

----------------------------------------

# Microsoft Entra ID Node Documentation

Use the Microsoft Entra ID node to automate tasks in Microsoft Entra ID and integrate it with other applications. It supports various features including user and group management.

## Operations

- **Group**
  - **Create**: Create a new group
  - **Delete**: Delete an existing group
  - **Get**: Retrieve data for a specific group
  - **Get Many**: Retrieve a list of groups
  - **Update**: Update a group
  
- **User**
  - **Create**: Create a new user
  - **Delete**: Delete an existing user
  - **Get**: Retrieve data for a specific user
  - **Get Many**: Retrieve a list of users
  - **Update**: Update a user
  - **Add to Group**: Add user to a group
  - **Remove from Group**: Remove user from a group

## Common Issues

### Updating the Allow External Senders and Auto Subscribe New Members Options Fails

You cannot update the **Allow External Senders** and **Auto Subscribe New Members** options directly after creating a new group. Wait for a brief period (at least two seconds) before attempting to change these values. Use a **Wait** node between the create and update operations to avoid errors. 

## Credential Information

For authentication, refer to the [Microsoft Entra ID Credential Documentation](https://docs.n8n.io/integrations/builtin/credentials/microsoftentra/). 

## HTTP Request Node

If the Microsoft Entra ID node does not support the desired operation, use the **HTTP Request node**. 

1. In the HTTP Request node, select **Authentication** → **Predefined Credential Type**.
2. Select the desired service.
3. Select your credential.

For additional information, see [Custom API operations](https://docs.n8n.io/integrations/custom-operations/).

----------------------------------------

# Microsoft Excel 365 Node Documentation

## Overview
The Microsoft Excel node allows automation of tasks in Microsoft Excel, enabling integration with other applications. It supports various features such as managing table data, workbooks, and worksheets.

## Credentials
Refer to Microsoft credentials for guidance on setting up authentication.

## Operations
- **Table**
  - Add rows to the end of the table
  - Retrieve a list of table columns
  - Retrieve a list of table rows
  - Find a specific column value and return the matching row
- **Workbook**
  - Add a new worksheet to the workbook
  - Get data of all workbooks
- **Worksheet**
  - Get all worksheets
  - Get worksheet content

## Configuration Instructions
If an operation is not supported by the Microsoft Excel node, use the HTTP Request node to call the service's API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Microsoft Graph Security Node

Use the Microsoft Graph Security node to automate work in Microsoft Graph Security and integrate with other applications. It supports features such as getting and updating scores and profiles.

## Credentials

Refer to [Microsoft credentials](https://docs.n8n.io/integrations/builtin/credentials/microsoft/) for guidance on setting up authentication.

## Operations

- **Secure Score**
  - Get
  - Get All
- **Secure Score Control Profile**
  - Get
  - Get All
  - Update

## Custom API Operations

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API by following these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Microsoft OneDrive Node Documentation

Use the Microsoft OneDrive node to automate work in Microsoft OneDrive and integrate it with other applications. n8n supports various OneDrive features, including file and folder operations.

## Operations

### File
- Copy a file
- Delete a file
- Download a file
- Get a file
- Rename a file
- Search a file
- Share a file
- Upload a file (up to 4MB)

### Folder
- Create a folder
- Delete a folder
- Get Children (get items inside a folder)
- Rename a folder
- Search a folder
- Share a folder

## Credentials

Refer to Microsoft credentials for guidance on setting up authentication.

## Finding the Folder ID

To perform operations on folders, you need to supply the ID. You can find this:
- In the URL of the folder
- By querying via the node using the following steps:
  1. Select **Resource** > **Folder**.
  2. Select **Operation** > **Search**.
  3. In **Query**, enter the folder name.
  4. Select **Execute step**. This will return data about the folder, including an `id` field containing the folder ID.

## Related Resources

Refer to Microsoft's OneDrive API documentation for more information about the service.

----------------------------------------

# Microsoft Outlook Node

Use the Microsoft Outlook node to automate work in Microsoft Outlook and integrate it with other applications. n8n supports various Microsoft Outlook features including creating, updating, deleting, and retrieving folders, messages, and drafts.

## Credentials

Refer to Microsoft credentials for guidance on setting up authentication.

## Operations

- **Calendar**
  - Create
  - Delete
  - Get
  - Get Many
  - Update
- **Contact**
  - Create
  - Delete
  - Get
  - Get Many
  - Update
- **Draft**
  - Create
  - Delete
  - Get
  - Send
  - Update
- **Event**
  - Create
  - Delete
  - Get
  - Get Many
  - Update
- **Folder**
  - Create
  - Delete
  - Get
  - Get Many
  - Update
- **Folder Message**
  - Get Many
- **Message**
  - Delete
  - Get
  - Get Many
  - Move
  - Reply
  - Send
  - Send and Wait for Response
  - Update
- **Message Attachment**
  - Add
  - Download
  - Get
  - Get Many

## Waiting for a Response

Using the **Send and Wait for a Response** operation, you can send a message and pause the workflow execution until a person responds.

### Response Type

Options for waiting and approval actions:
- **Approval**: Users can approve or disapprove from within the message.
- **Free Text**: Users submit a response via a form.
- **Custom Form**: Users submit a response with a custom-built form.

### Configuration Options for Response Types
- **Limit Wait Time**: Automatically resume execution after a specified time limit.
- **Append n8n Attribution**: Mention if the message was sent automatically with n8n.

### Approval Response Customization
Customize the approval response to show only approval or both approval and disapproval buttons, including custom button labels.

### Free Text Response Customization
Customize button labels, form title and description for the free text response.

### Custom Form Response Customization
Build a custom form and customize form elements and button labels. Additional fields can be added using the **Add Form Element** button.

## Related Resources

Refer to Outlook's API documentation for more information about the service. 

## What to Do If Your Operation Isn't Supported

If a desired operation is unsupported, use the HTTP Request node to call the service's API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Microsoft SharePoint Node

Use the Microsoft SharePoint node to automate work in Microsoft SharePoint and integrate Microsoft SharePoint with other applications. n8n supports a wide range of Microsoft SharePoint features, including downloading, uploading, and updating files, managing items in a list, and getting lists and list items.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/microsoft/).

## Operations

- **File**:
  - **Download**: Download a file.
  - **Update**: Update a file.
  - **Upload**: Upload an existing file.

- **Item**:
  - **Create**: Create an item in an existing list.
  - **Create or Update**: Create a new item, or update the current one if it already exists (upsert).
  - **Delete**: Delete an item from a list.
  - **Get**: Retrieve an item from a list.
  - **Get Many**: Get specific items in a list or list many items.
  - **Update**: Update an item in an existing list.

- **List**:
  - **Get**: Retrieve details of a single list.
  - **Get Many**: Retrieve a list of lists.

## Related Resources

Refer to [Microsoft's SharePoint documentation](https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/get-to-know-the-sharepoint-rest-service) for more information about the service.

----------------------------------------

# Microsoft SQL Node

Use the Microsoft SQL node to automate work in Microsoft SQL and integrate it with other applications. n8n supports various Microsoft SQL features, including executing SQL queries and inserting rows into the database.

## Credentials

Refer to Microsoft SQL credentials documentation for guidance on setting up authentication.

## Operations

- **Execute an SQL query**
- **Insert rows in database**
- **Update rows in database**
- **Delete rows in database**

## Templates and Examples

### Execute an SQL query in Microsoft SQL

```json
{
  "query": "SELECT * FROM Users"
}
```

### Export SQL table into CSV file

```json
{
  "query": "SELECT * FROM Products",
  "output": {
    "format": "csv"
  }
}
```

----------------------------------------

# Microsoft Teams Node Documentation

Use the Microsoft Teams node to automate work in Microsoft Teams, integrating it with other applications. 

## Credentials

Refer to Microsoft credentials documentation for guidance on setting up authentication.

## Operations

- **Channel**
  - Create
  - Delete
  - Get
  - Get Many
  - Update
- **Channel Message**
  - Create
  - Get Many
- **Chat Message**
  - Create
  - Get
  - Get Many
  - Send and Wait for Response
- **Task**
  - Create
  - Delete
  - Get
  - Get Many
  - Update

## Waiting for a Response

By choosing the **Send and Wait for a Response** operation, you can send a message and pause workflow execution until a person confirms the action or provides more information.

### Response Type

Available response types:
- **Approval**: Users can approve or disapprove from within the message.
- **Free Text**: Users can submit a response with a form.
- **Custom Form**: Users can submit responses with a custom form.

Configuration options:
- **Limit Wait Time**: Specify an automatic resume after a time limit.
- **Append n8n Attribution**: Include or exclude n8n mention in the message.

### Approval Response Customization

When using the Approval response type, you can present only an approval button or both approval and disapproval buttons. Button labels can be customized.

### Free Text Response Customization

In the Free Text response type, customize the message button label, form title, description, and response button label.

### Custom Form Response Customization

In the Custom Form response type, build a form with desired fields and options, and customize form elements, including message button label, form title, description, and response button label.

## Related Resources

Refer to Microsoft Teams' API documentation for more information about the service.

## Using HTTP Request Node for Unsupported Operations

If the desired operation isn't supported, you can use the HTTP Request node to call the service's API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations documentation for more information.

----------------------------------------

# Microsoft To Do Node Documentation

## Overview
The Microsoft To Do node automates tasks in Microsoft To Do and integrates it with other applications. It supports creating, updating, deleting, and retrieving linked resources, lists, and tasks.

## Credentials
Refer to [Microsoft credentials](https://docs.n8n.io/integrations/builtin/credentials/microsoft/) for guidance on setting up authentication.

## Operations
### Linked Resource
- **Create**: Create a linked resource.
- **Delete**: Delete a linked resource.
- **Get**: Retrieve a linked resource.
- **Get All**: Retrieve all linked resources.
- **Update**: Update a linked resource.

### List
- **Create**: Create a list.
- **Delete**: Delete a list.
- **Get**: Retrieve a list.
- **Get All**: Retrieve all lists.
- **Update**: Update a list.

### Task
- **Create**: Create a task.
- **Delete**: Delete a task.
- **Get**: Retrieve a task.
- **Get All**: Retrieve all tasks.
- **Update**: Update a task.

## Configuration Instructions
If the desired operation is not supported directly by the Microsoft To Do node, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Microsoft To Do API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for additional information.

----------------------------------------

# Mindee Node Documentation

Use the Mindee node to automate work in Mindee and integrate Mindee with other applications. n8n supports various Mindee features, including invoice predictions.

## Credentials

Refer to [Mindee credentials](https://docs.n8n.io/integrations/builtin/credentials/mindee/) for guidance on setting up authentication.

## Operations

- **Invoice**
  - Predict
- **Receipt**
  - Predict

## Best Practices

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

### Steps for HTTP Request Node

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# MISP Node Documentation

Use the MISP node to automate work in MISP and integrate MISP with other applications. It supports a wide range of MISP features, including creating, updating, deleting, and retrieving events, feeds, and organizations.

## Operations

- **Attribute**
  - Create
  - Delete
  - Get
  - Get All
  - Search
  - Update
- **Event**
  - Create
  - Delete
  - Get
  - Get All
  - Publish
  - Search
  - Unpublish
  - Update
- **Event Tag**
  - Add
  - Remove
- **Feed**
  - Create
  - Disable
  - Enable
  - Get
  - Get All
  - Update
- **Galaxy**
  - Delete
  - Get
  - Get All
- **Noticelist**
  - Get
  - Get All
- **Object**
  - Search
- **Organisation**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Tag**
  - Create
  - Delete
  - Get All
  - Update
- **User**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Warninglist**
  - Get
  - Get All

## Configuration Instructions

### Credentials

For guidance on setting up authentication, refer to [MISP credentials](https://docs.n8n.io/integrations/builtin/credentials/misp/).

### If an Operation Isn't Supported

If the MISP node does not support the operation you want to perform, you can use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Mocean Node

Use the Mocean node to automate work in Mocean and integrate Mocean with other applications. n8n supports a wide range of Mocean features, including sending SMS and voice messages.

## Credentials

Refer to Mocean credentials for guidance on setting up authentication.

## Operations

- **SMS**
  - Send SMS/Voice message
- **Voice**
  - Send SMS/Voice message

## Templates and Examples

Browse Mocean integration templates, or search all templates.

----------------------------------------

# monday.com Node Documentation

## Overview
The monday.com node automates work in monday.com and integrates it with other applications. n8n supports various monday.com features including creating new boards and managing items on those boards.

### Minimum Required Version
- This node requires n8n version 1.22.6 or above.

### Credentials
Refer to the [monday.com credentials](https://docs.n8n.io/integrations/builtin/credentials/mondaycom/) for guidance on setting up authentication.

## Operations

### Board
- Archive a board
- Create a new board
- Get a board
- Get all boards

### Board Column
- Create a new column
- Get all columns

### Board Group
- Delete a group in a board
- Create a group in a board
- Get list of groups in a board

### Board Item
- Add an update to an item
- Change a column value for a board item
- Change multiple column values for a board item
- Create an item in a board's group
- Delete an item
- Get an item
- Get all items
- Get items by column value
- Move item to group

## What to Do If Your Operation Isn't Supported
If the needed operation isn't supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

### Steps to Use HTTP Request Node
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# MongoDB Node Documentation

Use the MongoDB node to automate work in MongoDB and integrate with other applications. n8n supports various MongoDB features, including aggregating, updating, finding, deleting, and getting documents.

## Credentials

Refer to [MongoDB credentials](https://docs.n8n.io/integrations/builtin/credentials/mongodb/) for guidance on setting up authentication.

## Operations

- Aggregate documents
- Delete documents
- Find documents
- Find and replace documents
- Find and update documents
- Insert documents
- Update documents

----------------------------------------

# Monica CRM Node Documentation

Use the Monica CRM node to automate work in Monica CRM and integrate it with other applications. n8n supports various Monica CRM features, including creating, updating, deleting, and retrieving activities, calls, contracts, messages, tasks, and notes.

## Credentials

Refer to [Monica CRM credentials](https://docs.n8n.io/integrations/builtin/credentials/monicacrm/) for guidance on setting up authentication.

## Operations

- **Activity**
  - Create an activity
  - Delete an activity
  - Retrieve an activity
  - Retrieve all activities
  - Update an activity
  
- **Call**
  - Create a call
  - Delete a call
  - Retrieve a call
  - Retrieve all calls
  - Update a call
  
- **Contact**
  - Create a contact
  - Delete a contact
  - Retrieve a contact
  - Retrieve all contacts
  - Update a contact
  
- **Contact Field**
  - Create a contact field
  - Delete a contact field
  - Retrieve a contact field
  - Update a contact field
  
- **Contact Tag**
  - Add
  - Remove
  
- **Conversation**
  - Create a conversation
  - Delete a conversation
  - Retrieve a conversation
  - Update a conversation
  
- **Conversation Message**
  - Add a message to a conversation
  - Update a message in a conversation
  
- **Journal Entry**
  - Create a journal entry
  - Delete a journal entry
  - Retrieve a journal entry
  - Retrieve all journal entries
  - Update a journal entry
  
- **Note**
  - Create a note
  - Delete a note
  - Retrieve a note
  - Retrieve all notes
  - Update a note
  
- **Reminder**
  - Create a reminder
  - Delete a reminder
  - Retrieve a reminder
  - Retrieve all reminders
  - Update a reminder
  
- **Tag**
  - Create a tag
  - Delete a tag
  - Retrieve a tag
  - Retrieve all tags
  - Update a tag
  
- **Task**
  - Create a task
  - Delete a task
  - Retrieve a task
  - Retrieve all tasks
  - Update a task

----------------------------------------

# MQTT Node Documentation

## Overview
The MQTT node enables automation in MQTT and integration with other applications, supporting the transportation of messages.

## Credentials
Refer to [MQTT credentials](https://docs.n8n.io/integrations/builtin/credentials/mqtt/) for authentication setup guidance.

## Operations
- **Send Message**: The MQTT node can send a message where you can set the message topic and choose to include node input data as part of the message.

## Templates and Examples
### Example Workflows
1. **IoT Button Remote / Spotify Control Integration with MQTT**
2. **Receive Messages for a MQTT Queue**
3. **Send Location Updates of the ISS to a Topic in MQTT**

## Related Resources
- For MQTT triggers, refer to the [trigger node documentation](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.mqtttrigger/).
- Additional information is available in [MQTT's documentation](https://mqtt.org/getting-started/).

----------------------------------------

# MSG91 Node

The MSG91 node allows automation of tasks in MSG91 and facilitates integration with other applications to send SMS messages.

## Credentials

Refer to MSG91 credentials for guidance on setting up authentication.

## Operations

- **Send SMS**
  - This operation allows sending SMS messages through the MSG91 service.

## Find Your Sender ID

1. Log in to your MSG91 dashboard.
2. Select **Sender Id** in the left panel.
3. If you don't already have one, select **Add Sender Id +**, fill in the details, and select **Save Sender Id**.

----------------------------------------

# MySQL Node

Use the MySQL node to automate work in MySQL and integrate MySQL with other applications. n8n supports a range of MySQL features, including executing SQL queries, inserting, and updating rows in a database.

## Credentials

Refer to MySQL credentials for guidance on setting up authentication.

## Operations

- **Delete**
- **Execute SQL**
- **Insert**
- **Insert or Update**
- **Select**
- **Update**

## Use Query Parameters

When creating a query to run on a MySQL database, you can use the **Query Parameters** field in the **Options** section to load data into the query. n8n sanitizes data in query parameters, which prevents SQL injection. 

Example of a query to find a person by their email address:

```sql
SELECT * FROM $1:name WHERE email = $2;
```

In **Query Parameters**, provide the field values to use, either fixed values or expressions:

```javascript
users, {{ $json.email }}
```

## Common Issues

Refer to common issues for suggested resolution steps.

----------------------------------------

# Customer Datastore (n8n Training) Node Documentation

## Overview
The Customer Datastore node is intended for use exclusively in the n8n new user onboarding tutorial. It provides dummy data for testing purposes and has no additional functionality.

## Node Information
- **Node Name**: Customer Datastore (n8n Training)
- **Use Case**: Dummy data generation for testing in tutorials

## Best Practices
- Use this node strictly for onboarding and testing scenarios. It should not be utilized in production workflows due to its limited functionality.

----------------------------------------

# Customer Messenger (n8n Training) Node Documentation

## Overview
The Customer Messenger node is designed exclusively for the n8n new user onboarding tutorial and does not provide additional functionality.

## Node Details
- **Node Name:** Customer Messenger
- **Usage:** For n8n new user onboarding tutorial only.

## Configuration Instructions
No further configuration details or parameters are available for the Customer Messenger node, as it only serves a tutorial purpose.

----------------------------------------

# NASA Node Documentation

## Overview
The NASA node provides automation capabilities to integrate NASA services with other applications, allowing retrieval of imagery and data.

## Credentials
Refer to [NASA credentials](https://docs.n8n.io/integrations/builtin/credentials/nasa/) for authentication setup.

## Operations
- **Astronomy Picture of the Day**: Get the Astronomy Picture of the Day.
- **Asteroid Neo-Feed**: Retrieve a list of asteroids based on their closest approach date to Earth.
- **Asteroid Neo-Lookup**: Look up an asteroid based on its NASA SPK-ID.
- **Asteroid Neo-Browse**: Browse the overall asteroid dataset.
- **DONKI Coronal Mass Ejection**: Retrieve DONKI coronal mass ejection data.
- **DONKI Interplanetary Shock**: Retrieve DONKI interplanetary shock data.
- **DONKI Solar Flare**: Retrieve DONKI solar flare data.
- **DONKI Solar Energetic Particle**: Retrieve DONKI solar energetic particle data.
- **DONKI Magnetopause Crossing**: Retrieve data on DONKI magnetopause crossings.
- **DONKI Radiation Belt Enhancement**: Retrieve DONKI radiation belt enhancement data.
- **DONKI High Speed Stream**: Retrieve DONKI high speed stream data.
- **DONKI WSA+EnlilSimulation**: Retrieve DONKI WSA+EnlilSimulation data.
- **DONKI Notifications**: Retrieve DONKI notifications data.
- **Earth Imagery**: Retrieve Earth imagery.
- **Earth Assets**: Retrieve Earth assets.

## Templates and Examples
- **Set credentials dynamically using expressions**
- **Send the astronomy picture of the day daily to a Telegram channel**
- **Retrieve NASA Space Weather & Asteroid Data with GPT-4o-mini and Telegram**

----------------------------------------

# Netlify Node Documentation

The Netlify node automates work in Netlify and integrates with other applications. Supported features include getting and cancelling deployments, as well as deleting and getting sites.

## Credentials

Refer to Netlify credentials for guidance on setting up authentication.

## Operations

### Deploy
- **Cancel a deployment**
- **Create a new deployment**
- **Get a deployment**
- **Get all deployments**

### Site
- **Delete a site**
- **Get a site**
- **Returns all sites**

## Best Practices

Utilize the Netlify node for automating deployments and managing site configurations efficiently.

## Workflow Patterns

1. Deploy site when new content is added.
2. Send notification when deployment fails.
3. Add Netlify Form submissions to Airtable.

----------------------------------------

# Netscaler ADC Node

Use the Netscaler ADC node to automate work in Netscaler ADC, integrating it with other applications.

## Operations

- **Certificate**
  - Create
  - Install
- **File**
  - Delete
  - Download
  - Upload

## Credentials

Refer to [Netscaler ADC credentials](https://docs.n8n.io/integrations/builtin/credentials/netscaleradc/) for guidance on setting up authentication.

## HTTP Request Node

If this node doesn't support the operation you want, use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Nextcloud Node Documentation

Use the Nextcloud node to automate work in Nextcloud and integrate Nextcloud with other applications. This node supports various Nextcloud features, including file and folder management and user operations.

## Credentials

Refer to the [Nextcloud credentials](https://docs.n8n.io/integrations/builtin/credentials/nextcloud/) for guidance on setting up authentication.

## Operations

### File Operations
- **Copy a file**
- **Delete a file**
- **Download a file**
- **Move a file**
- **Share a file**
- **Upload a file**

### Folder Operations
- **Copy a folder**
- **Create a folder**
- **Delete a folder**
- **Return the contents of a given folder**
- **Move a folder**
- **Share a folder**

### User Operations
- **Invite a user to a Nextcloud organization**
- **Delete a user**
- **Retrieve information about a single user**
- **Retrieve a list of users**
- **Edit attributes related to a user**

## What to Do If Your Operation Isn't Supported

If the desired operation isn't supported by the Nextcloud node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the Nextcloud API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the Nextcloud service.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# NocoDB Node Documentation

Use the NocoDB node to automate work in NocoDB, integrating it with other applications. n8n supports various NocoDB features, including:

## Operations

- **Row**
  - **Create**: Create a new row in a NocoDB table.
  - **Delete**: Delete a specific row from a NocoDB table.
  - **Get**: Retrieve a single row from a NocoDB table.
  - **Get Many**: Retrieve multiple rows from a NocoDB table.
  - **Update a row**: Modify a specific row in a NocoDB table.

## Credentials

Refer to the [NocoDB credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/nocodb/) for guidance on setting up authentication.

## Best Practices

If your desired operation is not supported by the NocoDB node, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the NocoDB API. 

### Procedure:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Notion Node Documentation

Use the Notion node to automate work in Notion and integrate it with other applications. n8n supports features such as getting and searching databases, creating pages, and retrieving users.

## Credentials
Refer to [Notion credentials](https://docs.n8n.io/integrations/builtin/credentials/notion/) for authentication setup.

## Operations

- **Block**
  - Append After
  - Get Child Blocks
- **Database**
  - Get
  - Get Many
  - Search
- **Database Page**
  - Create
  - Get
  - Get Many
  - Update
- **Page**
  - Archive
  - Create
  - Search
- **User**
  - Get
  - Get Many

## Common Issues
For common errors or issues and suggested resolution steps, refer to [Common issues](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.notion/common-issues/).

## Notes
If an operation is not supported by this node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. Setup steps include:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# npm Node Documentation

Use the npm node to automate work in npm and integrate npm with other applications.

## Credentials
Refer to npm credentials for guidance on setting up authentication.

## Operations

- **Package**
  - Get Package Metadata
  - Get Package Versions
  - Search for Packages
- **Distribution Tag**
  - Get All Tags
  - Update a Tag

## What to do if your operation isn't supported
If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API.

You can use the credential you created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

## Odoo Node

Use the Odoo node to automate work in Odoo and integrate Odoo with other applications. n8n supports various Odoo features, including creating, updating, deleting, and getting contracts, resources, and opportunities.

### Credentials

Refer to Odoo credentials documentation for guidance on setting up authentication.

### Operations

- **Contact**
  - Create a new contact
  - Delete a contact
  - Get a contact
  - Get all contacts
  - Update a contact
- **Custom Resource**
  - Create a new item
  - Delete an item
  - Get an item
  - Get all items
  - Update an item
- **Note**
  - Create a new note
  - Delete a note
  - Get a note
  - Get all notes
  - Update a note
- **Opportunity**
  - Create a new opportunity
  - Delete an opportunity
  - Get an opportunity
  - Get all opportunities
  - Update an opportunity

### Best Practices

The Odoo node can enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically or with information directed by AI. Refer to AI tool parameters documentation for more information.

----------------------------------------

# Okta Node Documentation

Use the Okta node to automate work in Okta and integrate Okta with other applications. n8n has built-in support for a wide range of Okta features, including creating, updating, and deleting users.

## Operations

- **User**
  - Create a new user
  - Delete an existing user
  - Get details of a user
  - Get many users
  - Update an existing user

## Credentials

Authentication information for this node can be found in the [Okta credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/okta/).

## HTTP Request Node

If an operation isn't supported by the Okta node, use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to the [Custom API operations documentation](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# One Simple API Node

Use the One Simple API node to automate work and integrate One Simple API with other applications. n8n supports various features, including getting profiles, retrieving information, and generating utilities.

## Operations

- **Information**
  - Convert a value between currencies
  - Retrieve image metadata from a URL
- **Social Profile**
  - Get details about an Instagram profile
  - Get details about a Spotify Artist
- **Utility**
  - Expand a shortened URL
  - Generate a QR Code
  - Validate an email address
- **Website**
  - Generate a PDF from a webpage
  - Get SEO information from a website
  - Create a screenshot from a webpage

## Credentials

Refer to One Simple API credentials documentation for guidance on setting up authentication.

----------------------------------------

# Onfleet Node Documentation

Use the Onfleet node to automate work in Onfleet and integrate Onfleet with other applications. n8n supports various Onfleet features, including creating and deleting tasks and retrieving organizations' details.

## Credentials

Refer to [Onfleet credentials](https://docs.n8n.io/integrations/builtin/credentials/onfleet/) for guidance on setting up authentication.

## Operations

### Admin
- **Create a new Onfleet admin**
- **Delete an Onfleet admin**
- **Get all Onfleet admins**
- **Update an Onfleet admin**

### Container
- **Add task at index (or append)**
- **Get container information**
- **Fully replace a container's tasks**

### Destination
- **Create a new destination**
- **Get a specific destination**

### Hub
- **Create a new Onfleet hub**
- **Get all Onfleet hubs**
- **Update an Onfleet hub**

### Organization
- **Retrieve your own organization's details**
- **Retrieve the details of an organization with which you are connected**

### Recipient
- **Create a new Onfleet recipient**
- **Get a specific Onfleet recipient**
- **Update an Onfleet recipient**

### Task
- **Create a new Onfleet task**
- **Clone an Onfleet task**
- **Force-complete a started Onfleet task**
- **Delete an Onfleet task**
- **Get all Onfleet tasks**
- **Get a specific Onfleet task**
- **Update an Onfleet task**

### Team
- **Automatically dispatch tasks assigned to a team to on-duty drivers**
- **Create a new Onfleet team**
- **Delete an Onfleet team**
- **Get a specific Onfleet team**
- **Get all Onfleet teams**
- **Get estimated times for upcoming tasks for a team, returns a selected driver**
- **Update an Onfleet team**

### Worker
- **Create a new Onfleet worker**
- **Delete an Onfleet worker**
- **Get a specific Onfleet worker**
- **Get all Onfleet workers**
- **Get a specific Onfleet worker schedule**
- **Update an Onfleet worker**

----------------------------------------

# OpenThesaurus Node

The OpenThesaurus node allows for automation of work in OpenThesaurus and integration with other applications. It supports synonym look-up for German words.

## Credentials

No authentication is required for the OpenThesaurus node.

## Operations

- **Get synonyms** for a German word in German. 

## Templates and Examples 

Browse OpenThesaurus integration templates or search all templates on the n8n website.

----------------------------------------

# OpenWeatherMap Node Documentation

## Overview
The OpenWeatherMap node is used to automate tasks within OpenWeatherMap and integrate it with other applications. It supports retrieving current and upcoming weather data.

## Credentials
Refer to the OpenWeatherMap credentials documentation for guidance on setting up authentication.

## Operations
- **Get Current Weather**: Returns the current weather data.
- **Get 5-Day Forecast**: Returns the weather data for the next 5 days.

## Templates and Examples
1. **Get Weather Forecast via Telegram**
2. **Get information about the weather for any city**
3. **Receive the weather information of any city**

For more templates and workflows, visit the OpenWeatherMap integration templates.

----------------------------------------

# Oura Node Documentation

Use the Oura node to automate work in Oura and integrate Oura with other applications. n8n provides support for a variety of Oura features, including retrieving profiles and summaries.

## Credentials

Refer to Oura credentials for guidance on setting up authentication.

## Operations

- **Profile**
  - Get the user's personal information.
- **Summary**
  - Get the user's activity summary.
  - Get the user's readiness summary.
  - Get the user's sleep summary.

----------------------------------------

# Paddle Node

Use the Paddle node to automate work in Paddle, integrating Paddle with other applications. n8n supports a range of Paddle features: creating, updating, and getting coupons, as well as fetching plans, products, and users.

## Credentials

Refer to Paddle credentials documentation for guidance on setting up authentication.

## Operations

- **Coupon**
  - Create a coupon.
  - Get all coupons.
  - Update a coupon.
- **Payment**
  - Get all payments.
  - Reschedule payment.
- **Plan**
  - Get a plan.
  - Get all plans.
- **Product**
  - Get all products.
- **User**
  - Get all users.

----------------------------------------

# PagerDuty Node Documentation

Use the PagerDuty node to automate work in PagerDuty and integrate PagerDuty with other applications. n8n supports a wide range of PagerDuty features including creating incident notes, updating, and retrieving log entries and users.

## Credentials

Refer to [PagerDuty credentials](https://docs.n8n.io/integrations/builtin/credentials/pagerduty/) for guidance on setting up authentication.

## Operations

- **Incident**
  - Create an incident
  - Get an incident
  - Get all incidents
  - Update an incident
- **Incident Note**
  - Create an incident note
  - Get all incident's notes
- **Log Entry**
  - Get a log entry
  - Get all log entries
- **User**
  - Get a user

## Custom API Operations

If the operation you want is not supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. Use the credential created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# PayPal Node Documentation

## Core Concepts
The PayPal node in n8n automates tasks in PayPal and facilitates integration with other applications. It supports various PayPal features, such as creating batch payouts and canceling unclaimed payout items.

## Credentials
Refer to the PayPal credentials documentation for setting up authentication.

## Operations
- **Payout**
  - Create a batch payout
  - Show batch payout details
- **Payout Item**
  - Cancels an unclaimed payout item
  - Show payout item details

## Best Practices
When utilizing the PayPal node, ensure proper configuration of credentials and verify the operation compatibility with your PayPal account settings.

## Code Examples
(None provided in the documentation)

## Configuration Instructions
1. Set up PayPal credentials as detailed in the linked documentation.
2. Configure the relevant operations as required for your workflows.

----------------------------------------

# Peekalink Node Documentation

Use the Peekalink node to automate tasks in Peekalink and integrate it with other applications. n8n supports checking and reviewing links with Peekalink.

## Credentials

Refer to Peekalink credentials for guidance on setting up authentication.

## Operations

- **Check**: Check whether a preview for a given link is available.
- **Return Preview**: Return the preview for a provided link.

----------------------------------------

# PhantomBuster Node

Use the PhantomBuster node to automate work in PhantomBuster and integrate with other applications. n8n supports various PhantomBuster features, including adding, deleting, and retrieving agents.

## Credentials

Refer to [PhantomBuster credentials](https://docs.n8n.io/integrations/builtin/credentials/phantombuster/) for authentication setup.

## Operations

- **Agent**
  - Delete an agent by ID.
  - Get an agent by ID.
  - Get all agents of the current user's organization.
  - Get the output of the most recent container of an agent.
  - Add an agent to the launch queue.

## Custom Operations

If a specific operation is not supported by the PhantomBuster node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for additional information.

----------------------------------------

# Philips Hue Node

Use the Philips Hue node to automate work in Philips Hue and integrate Philips Hue with other applications. n8n has built-in support for a wide range of Philips Hue features, including deleting, retrieving, and updating lights.

## Credentials

Refer to [Philips Hue credentials](https://docs.n8n.io/integrations/builtin/credentials/philipshue/) for guidance on setting up authentication.

## Operations

- **Light**
  - **Delete a light**
  - **Retrieve a light**
  - **Retrieve all lights**
  - **Update a light**

## Handling Unsupported Operations

If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API.

You can use the credential you created for this service in the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Plivo Node Documentation

Use the Plivo node to automate work in Plivo and integrate Plivo with other applications. n8n supports various Plivo features, including making calls and sending SMS/MMS.

## Credentials

Refer to Plivo credentials for guidance on setting up authentication.

## Operations

- **Call**
  - Make a voice call.
  
- **MMS**
  - Send an MMS message (US/Canada only).
  
- **SMS**
  - Send an SMS message.

## Templates and Examples

Browse Plivo integration templates or search all templates.

----------------------------------------

## PostBin Node Documentation

PostBin is a service that helps you test API clients and webhooks. Use the PostBin node to automate work in PostBin and integrate it with other applications.

### Operations

- **Bin**
  - Create
  - Get
  - Delete
- **Request**
  - Get
  - Remove First
  - Send

### Sending Requests to PostBin

To send requests to a PostBin bin:

1. Go to PostBin and follow the steps to generate a new bin. PostBin gives you a unique URL, including a bin ID.
2. In the PostBin node, select the **Request** resource.
3. Choose the type of **Operation** you want to perform.
4. Enter your bin ID in **Bin ID**.

### Creating and Managing Bins

To create and manage PostBin bins using the PostBin node:

1. In **Resource**, select **Bin**.
2. Choose an **Operation** (create, delete, or get a bin).

----------------------------------------

# Pipedrive Node Documentation

Use the Pipedrive node to automate work in Pipedrive and integrate it with other applications. n8n supports various Pipedrive features including creating, updating, deleting, and retrieving activity, files, notes, organizations, and leads.

## Credentials

Refer to Pipedrive credentials for guidance on setting up authentication.

## Operations

### Activity
- Create an activity
- Delete an activity
- Get data of an activity
- Get data of all activities
- Update an activity

### Deal
- Create a deal
- Delete a deal
- Duplicate a deal
- Get data of a deal
- Get data of all deals
- Search a deal
- Update a deal

### Deal Activity
- Get all activities of a deal

### Deal Product
- Add a product to a deal
- Get all products in a deal
- Remove a product from a deal
- Update a product in a deal

### File
- Create a file
- Delete a file
- Download a file
- Get data of a file

### Lead
- Create a lead
- Delete a lead
- Get data of a lead
- Get data of all leads
- Update a lead

### Note
- Create a note
- Delete a note
- Get data of a note
- Get data of all notes
- Update a note

### Organization
- Create an organization
- Delete an organization
- Get data of an organization
- Get data of all organizations
- Update an organization
- Search organizations

### Person
- Create a person
- Delete a person
- Get data of a person
- Get data of all persons
- Search all persons
- Update a person

### Product
- Get data of all products

## Best Practices

If this node doesn't support the operation you need, use the HTTP Request node to call the service's API. Use the credential created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for further information.

----------------------------------------

# Postgres Node Documentation

## Overview
The Postgres node is used to automate interactions with Postgres databases, allowing for the execution of queries, and inserting and updating rows.

## Credentials
Refer to [Postgres credentials](https://docs.n8n.io/integrations/builtin/credentials/postgres/) for setting up authentication.

## Operations
- **Delete**: Remove an entire table or specific rows.
- **Execute Query**: Run a custom SQL query.
- **Insert**: Add rows to a table.
- **Insert or Update**: Insert new rows or update existing ones.
- **Select**: Retrieve rows from a table.
- **Update**: Modify existing rows in a table.

### Delete Operation

**Parameters:**
- **Credential to connect with**: Select or create a Postgres credential.
- **Operation**: Select **Delete**.
- **Schema**: Specify the schema containing the target table.
- **Table**: Specify the target table.
- **Command**:
  - **Truncate**: Remove data but keep table structure.
    - **Restart Sequences**: Reset auto-increment columns.
  - **Delete**: Remove rows based on a condition.
    - **Select Rows**: Define the matching conditions.
    - **Combine Conditions**: Use **AND** or **OR**.
  - **Drop**: Permanently delete the table and its structure.

**Delete Options:**
- **Cascade**: Drop objects depending on the table.
- **Connection Timeout**: Seconds to connect to the database.
- **Delay Closing Idle Connection**: Time before considering idle connections eligible for closure.
- **Query Batching**: Options for query execution mode (single, independent, transaction).
- **Output Large-Format Numbers As**: Choose between **Numbers** or **Text** for output formats.

### Execute Query Operation

**Parameters:**
- **Credential to connect with**: Select or create a Postgres credential.
- **Operation**: Select **Execute Query**.
- **Query**: The SQL statement to run.

**Execute Query Options:**
- **Connection Timeout**: Seconds to connect.
- **Delay Closing Idle Connection**: Time for idle connections.
- **Query Batching**: Execution mode (single, independent, transaction).
- **Query Parameters**: List of values for parameters in the query.
- **Output Large-Format Numbers As**: Choose between **Numbers** or **Text**.
- **Replace Empty Strings with NULL**: Option to replace empty strings with NULL.

### Insert Operation

**Parameters:**
- **Credential to connect with**: Select or create a Postgres credential.
- **Operation**: Select **Insert**.
- **Schema**: Specify the schema containing the target table.
- **Table**: Specify the target table.
- **Mapping Column Mode**:
  - **Map Each Column Manually**: Specify values for each column.
  - **Map Automatically**: Auto-map incoming data to matching column names.

**Insert Options:**
- **Connection Timeout**: Seconds to connect.
- **Delay Closing Idle Connection**: Time for idle connections.
- **Query Batching**: Mode of execution.
- **Output Columns**: Specify which columns to return.
- **Output Large-Format Numbers As**: Choose between **Numbers** or **Text**.
- **Skip on Conflict**: Skip on constraint violations.
- **Replace Empty Strings with NULL**: Replace empty strings in input with NULL.

### Insert or Update Operation

**Parameters:**
- **Credential to connect with**: Select or create a Postgres credential.
- **Operation**: Select **Insert or Update**.
- **Schema**: Specify the schema.
- **Table**: Specify the target table.
- **Mapping Column Mode**: Options for mapping column data.

**Insert or Update Options:**
- **Connection Timeout**: Seconds to connect.
- **Delay Closing Idle Connection**: Time for idle connections.
- **Query Batching**: Execution mode.
- **Output Columns**: Specify which columns to return.
- **Output Large-Format Numbers As**: Choose between **Numbers** or **Text**.
- **Replace Empty Strings with NULL**: Replace empty strings.

### Select Operation

**Parameters:**
- **Credential to connect with**: Select or create a Postgres credential.
- **Operation**: Select **Select**.
- **Schema**: Specify the schema.
- **Table**: Specify the target table.
- **Return All**: Option to return all or limit results.
- **Limit**: Maximum number of returned items.
- **Select Rows**: Define conditions for row selection.
- **Combine Conditions**: Use **AND** or **OR**.
- **Sort**: Specify sorting method.

**Select Options:**
- **Connection Timeout**: Seconds to connect.
- **Delay Closing Idle Connection**: Time for idle connections.
- **Query Batching**: Execution mode.
- **Output Columns**: Specify columns to return.
- **Output Large-Format Numbers As**: Choose between **Numbers** or **Text**.

### Update Operation

**Parameters:**
- **Credential to connect with**: Select or create a Postgres credential.
- **Operation**: Select **Update**.
- **Schema**: Specify the schema.
- **Table**: Specify the target table.
- **Mapping Column Mode**: Options for mapping column data.

**Update Options:**
- **Connection Timeout**: Seconds to connect.
- **Delay Closing Idle Connection**: Time for idle connections.
- **Query Batching**: Execution mode.
- **Output Columns**: Specify columns to return.
- **Output Large-Format Numbers As**: Choose between **Numbers** or **Text**.
- **Replace Empty Strings with NULL**: Replace empty strings.

## Use Query Parameters
Query parameters can be used in SQL queries to prevent SQL injection. Use expressions to pass values dynamically in your queries.

**Example:**
```sql
SELECT * FROM $1:name WHERE email = $2;
```
**Parameters:**
```javascript
// users is an example table name
{{ [ 'users', $json.email ] }}
```

## Common Issues
Refer to specific [Common issues](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.postgres/common-issues/) for troubleshooting related to Postgres node usage.

----------------------------------------

# PostHog Node Documentation

Use the PostHog node to automate work in PostHog and integrate PostHog with other applications. n8n supports various PostHog features, including creating aliases, events, identities, and tracking pages.

## Credentials
Refer to the PostHog credentials documentation for guidance on setting up authentication.

## Operations

- **Alias**
  - Create an alias

- **Event**
  - Create an event

- **Identity**
  - Create

- **Track**
  - Track a page
  - Track a screen

## Templates and Examples
Browse and search for [PostHog integration templates](https://n8n.io/integrations/posthog/).

----------------------------------------

# Pushcut Node Documentation

Use the Pushcut node to automate work in Pushcut and integrate Pushcut with other applications. n8n supports sending notifications with Pushcut.

## Credentials
Refer to [Pushcut credentials](https://docs.n8n.io/integrations/builtin/credentials/pushcut/) for guidance on setting up authentication.

## Operations
- **Notification**
  - Send a notification

## Templates and Examples
Browse Pushcut integration templates or search all templates.

----------------------------------------

# ProfitWell Node

Use the ProfitWell node to automate operations in ProfitWell and integrate ProfitWell with other applications. It supports getting account settings and retrieving financial metrics.

## Credentials

Refer to ProfitWell credentials for authentication setup guidance.

## Operations

- **Company**
  - Get your company's ProfitWell account settings
- **Metric**
  - Retrieve financial metrics broken down by day for either the current month or the last month

## API Documentation

- **Endpoint:** `/company`
  - **Method:** GET
  - **Description:** Retrieve the company's ProfitWell account settings.

- **Endpoint:** `/metric`
  - **Method:** GET
  - **Description:** Retrieve financial metrics by day for the current month or the last month.

## Best Practices

- Ensure proper authentication using ProfitWell credentials before executing operations.
- Handle API responses appropriately to catch and address any potential errors.

----------------------------------------

# Pushbullet Node Documentation

## Overview
Use the Pushbullet node to automate tasks in Pushbullet and integrate it with other applications. n8n supports various features of Pushbullet, including creating, updating, deleting, and retrieving pushes.

## Credentials
Refer to Pushbullet credentials for guidance on setting up authentication. 

## Operations
- **Push**
  - Create a push
  - Delete a push
  - Get all pushes
  - Update a push

## Use of Unsupported Operations
If a desired operation is not supported by this node, use the HTTP Request node to call the service's API. Steps to use the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# QuestDB Node Documentation

## Overview
Use the QuestDB node to automate tasks in QuestDB and integrate it with other applications. n8n supports executing SQL queries and inserting rows in a QuestDB database.

## Operations
- Executes a SQL query.
- Inserts rows in the database.

## Node Reference

### Specify a Column's Data Type
To specify a column's data type, append the column name with `:type`, where `type` is the desired data type. For example, to specify the type `int` for the column **id** and type `text` for the column **name**, use the following in the **Columns** field:
```
id:int,name:text
```

## Credentials
Refer to QuestDB credentials for guidance on setting up authentication.

----------------------------------------

## Pushover Node

Use the Pushover node to automate work in Pushover and integrate Pushover with other applications. n8n supports sending push notifications with Pushover.

### Credentials

Refer to Pushover credentials for guidance on setting up authentication.

### Operations

- **Message**
  - **Push**: Sends a push notification.

### What to Do if Your Operation Isn't Supported

If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Quick Base Node Documentation

Use the Quick Base node to automate work in Quick Base and integrate it with other applications. n8n supports various Quick Base features, including creating, updating, deleting, and retrieving records, as well as managing fields and downloading files.

## Credentials

Refer to Quick Base credentials for guidance on setting up authentication.

## Operations

- **Field**
  - Get all fields
- **File**
  - Delete a file
  - Download a file
- **Record**
  - Create a record
  - Delete a record
  - Get all records
  - Update a record
  - Upsert a record
- **Report**
  - Get a report
  - Run a report

## Templates and Examples

Browse Quick Base integration templates or search all templates.

----------------------------------------

# QuickBooks Online Node

Use the QuickBooks node to automate work in QuickBooks and integrate with other applications. n8n supports features including creating, updating, deleting, and retrieving bills, customers, employees, estimates, and invoices.

## Credentials

Refer to QuickBooks credentials for guidance on setting up authentication.

## Operations

### Bill
- Create
- Delete
- Get
- Get All
- Update

### Customer
- Create
- Get
- Get All
- Update

### Employee
- Create
- Get
- Get All
- Update

### Estimate
- Create
- Delete
- Get
- Get All
- Send
- Update

### Invoice
- Create
- Delete
- Get
- Get All
- Send
- Update
- Void

### Item
- Get
- Get All

### Payment
- Create
- Delete
- Get
- Get All
- Send
- Update
- Void

### Purchase
- Get
- Get All

### Transaction
- Get Report

### Vendor
- Create
- Get
- Get All
- Update

## External HTTP Request

If a required operation is not supported by this node, use the HTTP Request node to call the QuickBooks API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# QuickChart Node Documentation

## Description
The QuickChart node is used to automate work with QuickChart and integrate it with other applications. It supports various chart types, including:
- Bar Chart
- Doughnut Chart
- Line Chart
- Pie Chart
- Polar Chart

## Operations
To create a chart, select one of the following chart types:
- Chart Type: 
  - Bar Chart
  - Doughnut Chart
  - Line Chart
  - Pie Chart
  - Polar Chart

## AI Tool Integration
This node can enhance the capabilities of an AI agent, allowing many parameters to be set automatically or influenced by AI. For detailed parameter information, refer to the [AI tool parameters documentation](https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/).

## Best Practices
Refer to [QuickChart's API documentation](https://quickchart.io/documentation/) for further information regarding QuickChart's features and functionalities.

----------------------------------------

# RabbitMQ Node Documentation

## Overview
The RabbitMQ node automates work in RabbitMQ and integrates it with other applications, supporting various RabbitMQ features including accepting and forwarding messages.

## Credentials
Refer to [RabbitMQ credentials](https://docs.n8n.io/integrations/builtin/credentials/rabbitmq/) for setting up authentication.

## Operations
- **Delete From Queue**: Deletes a specific message from the queue.
- **Send a Message to RabbitMQ**: Sends a message to a specified RabbitMQ exchange or queue.

## API Documentation
N/A

## Code Examples
N/A

## Configuration Instructions
- Set up RabbitMQ credentials as required for authentication.
- Use the operations listed for automation based on your workflow needs.

## Workflow Patterns
- Use the RabbitMQ node in various workflows to integrate with other applications and automate messaging tasks.

## Best Practices
- Ensure proper authentication is set up for the RabbitMQ node.
- Test all operations with predefined messages to verify configurations.

----------------------------------------

# Reddit Node Documentation

Use the Reddit node to automate work in Reddit and integrate Reddit with other applications. The node supports various Reddit features, including retrieving profiles, users, comments, and posts.

## Credentials

Refer to Reddit credentials for guidance on setting up authentication.

## Operations

### Post
- Submit a post to a subreddit
- Delete a post from a subreddit
- Get a post from a subreddit
- Get all posts from a subreddit
- Search posts in a subreddit or in all of Reddit

### Post Comment
- Create a top-level comment in a post
- Retrieve all comments in a post
- Remove a comment from a post
- Write a reply to a comment in a post

### Profile
- Get profile information

### Subreddit
- Retrieve background information about a subreddit
- Retrieve information about subreddits from all of Reddit

### User
- Get user information

## What to Do if Your Operation Isn't Supported

If this node doesn't support your desired operation, you can use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Raindrop Node Documentation

Use the Raindrop node to automate work in Raindrop and integrate Raindrop with other applications. n8n supports a wide range of Raindrop features, including operations for users, tags, collections, and bookmarks.

## Credentials

Refer to Raindrop credentials for guidance on setting up authentication.

## Operations

- **Bookmark**
  - **Create**: Create a new bookmark.
  - **Delete**: Delete an existing bookmark.
  - **Get**: Retrieve a specific bookmark.
  - **Get All**: Retrieve all bookmarks.
  - **Update**: Update an existing bookmark.
  
- **Collection**
  - **Create**: Create a new collection.
  - **Delete**: Delete an existing collection.
  - **Get**: Retrieve a specific collection.
  - **Get All**: Retrieve all collections.
  - **Update**: Update an existing collection.
  
- **Tag**
  - **Delete**: Delete a tag.
  - **Get All**: Retrieve all tags.

- **User**
  - **Get**: Retrieve user information.

## Technical Procedures

### What to Do if Your Operation Isn't Supported

If the desired operation is not supported by the Raindrop node, use the HTTP Request node to call the service's API.

#### Steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Choose your credential.

Refer to Custom API operations for additional information.

----------------------------------------

# Redis Node Documentation

## Overview
The Redis node automates tasks in Redis and integrates Redis with other applications. It supports various features such as deleting keys, retrieving key values, setting key values, and publishing messages to Redis channels.

## Credentials
Refer to [Redis credentials](https://docs.n8n.io/integrations/builtin/credentials/redis/) for authentication setup.

## Operations
- **Delete a Key:** Remove a key from Redis.
- **Get Key Value:** Retrieve the value of a specified key from Redis.
- **Instance Information:** Returns generic information about the Redis instance.
- **Increment Key:** Atomically increments a key by 1, creating the key if it does not exist.
- **Pattern Matching:** Returns all keys matching a specified pattern.
- **Set Key Value:** Set the value of a specified key in Redis.
- **Publish Message:** Publish a message to a specified Redis channel.

----------------------------------------

# Rocket.Chat Node

Use the Rocket.Chat node to automate work in Rocket.Chat and integrate it with other applications. n8n supports posting messages to channels and sending direct messages with Rocket.Chat.

## Credentials

Refer to Rocket.Chat credentials for guidance on setting up authentication.

## Operations

- **Chat**
  - Post a message to a channel or send a direct message.

## If an Operation Isn't Supported

If the node doesn't support the operation you want, you can use the HTTP Request node to call the service's API. Steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Rundeck Node Documentation

Use the Rundeck node to automate work in Rundeck and integrate it with other applications. n8n supports executing jobs and retrieving metadata.

## Credentials
Refer to Rundeck credentials for guidance on setting up authentication.

## Operations
- **Job**  
  - Execute a job  
  - Get metadata of a job

## What to Do if Your Operation Isn't Supported
If the Rundeck node does not support the operation you need, use the HTTP Request node to call the service's API. Use the credential created for this service:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

## Find the Job ID
1. Access your Rundeck dashboard.
2. Open the project containing the job for n8n.
3. In the sidebar, select **JOBS**.
4. Under **All Jobs**, select the name of the job.
5. Copy the job ID displayed below the job name.
6. Paste the job ID in the **Job Id** field in n8n.

----------------------------------------

# S3 Node Documentation

Use the S3 node to automate work in non-AWS S3 storage and integrate S3 with other applications. n8n supports a range of S3 features including:

- **Creating buckets**
- **Deleting buckets**
- **Getting buckets**
- **Copying files**
- **Deleting files**
- **Downloading files**
- **Getting all files**
- **Uploading files**
- **Creating folders**
- **Deleting folders**
- **Getting all folders**

## Credentials

Refer to [S3 credentials](https://docs.n8n.io/integrations/builtin/credentials/s3/) for authentication setup guidance.

## Operations

### Bucket Operations
- Create a bucket
- Delete a bucket
- Get all buckets
- Search within a bucket

### File Operations
- Copy a file
- Delete a file
- Download a file
- Get all files
- Upload a file

**Attach File for Upload**: Use another node to pass the file as a data property, such as the [Read/Write Files from Disk](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/) node or the [HTTP Request](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) node.

### Folder Operations
- Create a folder
- Delete a folder
- Get all folders

## Best Practices

### Setting File Permissions in Wasabi

When uploading files to Wasabi, set permissions using the **ACL** dropdown, not the toggles.

----------------------------------------

# Salesforce Node

Use the Salesforce node to automate work in Salesforce and integrate Salesforce with other applications. n8n supports features such as creating, updating, deleting, and retrieving accounts, attachments, cases, and leads, as well as uploading documents.

## Credentials

Refer to [Salesforce credentials](https://docs.n8n.io/integrations/builtin/credentials/salesforce/) for authentication setup.

## Operations

- **Account**
  - Add note to an account
  - Create an account
  - Upsert an account
  - Get an account
  - Get all accounts
  - Get account's metadata
  - Delete an account
  - Update an account

- **Attachment**
  - Create an attachment
  - Delete an attachment
  - Get an attachment
  - Get all attachments
  - Get attachment's metadata
  - Update an attachment

- **Case**
  - Add a comment to a case
  - Create a case
  - Get a case
  - Get all cases
  - Get case's metadata
  - Delete a case
  - Update a case

- **Contact**
  - Add lead to a campaign
  - Add note to a contact
  - Create a contact
  - Upsert a contact
  - Delete a contact
  - Get a contact
  - Get all contacts
  - Get contact's metadata
  - Update a contact

- **Custom Object**
  - Create a custom object record
  - Upsert a custom object record
  - Get a custom object record
  - Get all custom object records
  - Delete a custom object record
  - Update a custom object record

- **Document**
  - Upload a document

- **Flow**
  - Get all flows
  - Invoke a flow

- **Lead**
  - Add lead to a campaign
  - Add note to a lead
  - Create a lead
  - Upsert a lead
  - Delete a lead
  - Get a lead
  - Get all leads
  - Get lead's metadata
  - Update a lead

- **Opportunity**
  - Add note to an opportunity
  - Create an opportunity
  - Upsert an opportunity
  - Delete an opportunity
  - Get an opportunity
  - Get all opportunities
  - Get opportunity's metadata
  - Update an opportunity

- **Search**
  - Execute a SOQL query returning results in a single response
  
- **Task**
  - Create a task
  - Delete a task
  - Get a task
  - Get all tasks
  - Get task's metadata
  - Update a task
  
- **User**
  - Get a user
  - Get all users

## Custom Fields

To add custom fields to your request:

1. Select **Additional Fields** > **Add Field**.
2. In the dropdown, select **Custom Fields**.

## Unsupported Operations

If the desired operation isn't supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Salesmate Node

Use the Salesmate node to automate work in Salesmate and integrate Salesmate with other applications. The node supports a wide range of Salesmate features, including the following operations:

## Operations

### Activity
- **Create an activity**
- **Delete an activity**
- **Get an activity**
- **Get all companies**
- **Update an activity**

### Company
- **Create a company**
- **Delete a company**
- **Get a company**
- **Get all companies**
- **Update a company**

### Deal
- **Create a deal**
- **Delete a deal**
- **Get a deal**
- **Get all deals**
- **Update a deal**

## Credentials

Refer to Salesmate credentials for guidance on setting up authentication.

----------------------------------------

# SeaTable Node Documentation

Use the SeaTable node to automate work in SeaTable and integrate SeaTable with other applications. n8n supports a range of SeaTable features, including creating, updating, deleting, and retrieving rows.

## Credentials

Refer to SeaTable credentials for guidance on setting up authentication.

## Operations

- **Row**
  - **Create**: Create a new row in SeaTable.
  - **Delete**: Delete a specified row from SeaTable.
  - **Get**: Retrieve a single row from SeaTable.
  - **Get All**: Retrieve all rows from a specified SeaTable.
  - **Update**: Update an existing row in SeaTable.

----------------------------------------

# SecurityScorecard Node

Use the SecurityScorecard node to automate work in SecurityScorecard and integrate with other applications. n8n supports various features of SecurityScorecard, including creating, updating, deleting, and retrieving portfolio data, as well as obtaining company information.

## Credentials

Refer to SecurityScorecard credentials for guidance on setting up authentication.

## Operations

### Company
- **Get company factor scores and issue counts**
- **Get company's historical factor scores**
- **Get company's historical scores**
- **Get company information and summary of their scorecard**
- **Get company's score improvement plan**

### Industry
- **Get Factor Scores**
- **Get Historical Factor Scores**
- **Get Score**

### Invite
- **Create an invite for a company/user**

### Portfolio
- **Create a portfolio**
- **Delete a portfolio**
- **Get all portfolios**
- **Update a portfolio**

### Portfolio Company
- **Add a company to portfolio**
- **Get all companies in a portfolio**
- **Remove a company from portfolio**

### Report
- **Download a generated report**
- **Generate a report**
- **Get list of recently generated reports**

----------------------------------------

# Segment Node

Use the Segment node to automate work in Segment and integrate Segment with other applications. n8n supports a range of Segment features, including adding users to groups, creating identities, and tracking activities.

## Credentials

Refer to Segment credentials for guidance on setting up authentication.

## Operations

- **Group**
  - Add a user to a group.
  
- **Identify**
  - Create an identity.
  
- **Track**
  - Record the actions your users perform. Every action triggers an event, which can also have associated properties.
  - Record page views on your website, with optional extra information about the page being viewed.

## What to do if your operation isn't supported

If this node doesn't support the operation you want, you can use the HTTP Request node to call the service's API.

You can use the credential you created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# SendGrid Node Documentation

## Core Concepts
The SendGrid node allows automation in SendGrid and integration with other applications. It supports creating, updating, deleting, and retrieving contacts and lists, as well as sending emails.

## Credentials
Refer to [SendGrid credentials](https://docs.n8n.io/integrations/builtin/credentials/sendgrid/) for authentication setup.

## Operations
- **Contact**
  - Create/update a contact
  - Delete a contact
  - Get a contact by ID
  - Get all contacts
- **List**
  - Create a list
  - Delete a list
  - Get a list
  - Get all lists
  - Update a list
- **Mail**
  - Send an email

## Configuration Instructions
To perform operations not supported by the SendGrid node, use the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Sendy Node

Use the Sendy node to automate work in Sendy and integrate it with other applications. n8n has built-in support for a wide range of Sendy features, including creating campaigns and managing subscribers.

## Credentials

Refer to Sendy credentials for guidance on setting up authentication.

## Operations

- **Campaign**
  - Create a campaign
- **Subscriber**
  - Add a subscriber to a list
  - Count subscribers
  - Delete a subscriber from a list
  - Unsubscribe user from a list
  - Get the status of a subscriber

----------------------------------------

# Sentry.io Node Documentation

The Sentry.io node allows automation in Sentry.io and integration with other applications. n8n supports numerous Sentry.io features, including creating, updating, deleting, and retrieving issues, projects, releases, and events.

## Credentials
For authentication setup, refer to Sentry.io credentials.

## Operations

- **Event**
  - Get event by ID
  - Get all events

- **Issue**
  - Delete an issue
  - Get issue by ID
  - Get all issues
  - Update an issue

- **Project**
  - Create a new project
  - Delete a project
  - Get project by ID
  - Get all projects
  - Update a project

- **Release**
  - Create a release
  - Delete a release
  - Get release by version identifier
  - Get all releases
  - Update a release

- **Organization**
  - Create an organization
  - Get organization by slug
  - Get all organizations
  - Update an organization

- **Team**
  - Create a new team
  - Delete a team
  - Get team by slug
  - Get all teams
  - Update a team

## Using the HTTP Request Node
If an operation is unsupported by the Sentry.io node, use the HTTP Request node to call the service's API. Set up as follows:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Choose your credential.

Refer to **Custom API operations** for further information.

----------------------------------------

# ServiceNow Node Documentation

## Overview

The ServiceNow node automates tasks in ServiceNow and integrates it with other applications. It supports various features including getting business services, departments, configuration items, and creating, updating, or deleting incidents, users, and table records.

## Credentials

Refer to the ServiceNow credentials documentation for authentication setup.

## Operations

- **Business Service**
  - Get All
- **Configuration Items**
  - Get All
- **Department**
  - Get All
- **Dictionary**
  - Get All
- **Incident**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **Table Record**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **User**
  - Create
  - Delete
  - Get
  - Get All
  - Update
- **User Group**
  - Get All
- **User Role**
  - Get All

## Custom API Operations

If an operation is not supported by this node, use the HTTP Request node to call the ServiceNow API.

### Instructions:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the ServiceNow service.
3. Select your credential.

Refer to the Custom API operations documentation for more information.

----------------------------------------

# Shopify Node Documentation

## Overview
The Shopify node automates tasks in Shopify and integrates it with other applications. It supports operations for creating, updating, deleting, and retrieving orders and products.

## Credentials
Refer to [Shopify credentials](https://docs.n8n.io/integrations/builtin/credentials/shopify/) for guidance on setting up authentication.

## Operations
- **Order**
  - Create an order
  - Delete an order
  - Get an order
  - Get all orders
  - Update an order
- **Product**
  - Create a product
  - Delete a product
  - Get a product
  - Get all products
  - Update a product

## Using HTTP Request Node
If an operation is not supported by the Shopify node:
1. Use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.
2. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
3. Select the service to connect to.
4. Choose your created credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# SIGNL4 Node Documentation

Use the SIGNL4 node to automate work in SIGNL4, and integrate SIGNL4 with other applications. n8n supports sending and resolving alerts with SIGNL4.

## Credentials

Refer to the [SIGNL4 credentials](https://docs.n8n.io/integrations/builtin/credentials/signl4/) for guidance on setting up authentication.

## Operations

- **Alert**
  - **Send an alert**: Send an alert through SIGNL4.
  - **Resolve an alert**: Resolve an existing alert in SIGNL4.

## Templates and Examples

**Monitor a file for changes and send an alert**  
**Send weather alerts to your mobile phone with OpenWeatherMap and SIGNL4**  
**Send TheHive Alerts Using SIGNL4**  

Additional workflow templates are available at the SIGNL4 integration page.

----------------------------------------

# Slack Node Documentation

The Slack node allows automation of tasks within Slack and integration with other applications. It supports a wide range of features including channel management, user interactions, and message handling.

## Credentials

Refer to [Slack credentials](https://docs.n8n.io/integrations/builtin/credentials/slack/) for authentication setup.

## Operations

### Channel
- **Archive**: Archive a channel.
- **Close**: Close a direct message or multi-person direct message.
- **Create**: Create a public or private channel.
- **Get**: Retrieve information about a channel.
- **Get Many**: Retrieve a list of channels.
- **History**: Retrieve a channel's message history.
- **Invite**: Invite a user to a channel.
- **Join**: Join an existing channel.
- **Kick**: Remove a user from a channel.
- **Leave**: Leave a channel.
- **Member**: List members of a channel.
- **Open**: Open a direct message or multi-person direct message.
- **Rename**: Rename a channel.
- **Replies**: Retrieve thread messages from a channel.
- **Set Purpose**: Set the purpose of a channel.
- **Set Topic**: Set the topic of a channel.
- **Unarchive**: Unarchive a channel.

### File
- **Get**: Retrieve a file.
- **Get Many**: Retrieve and filter team files.
- **Upload**: Upload a file.

### Message
- **Delete**: Delete a message.
- **Get Permalink**: Retrieve a message's permalink.
- **Search**: Search for messages.
- **Send**: Send a message.
- **Send and Wait for Approval**: Send a message and wait for approval from the recipient.
- **Update**: Update a message.

### Reaction
- **Add**: Add a reaction to a message.
- **Get**: Retrieve a message's reactions.
- **Remove**: Remove a reaction from a message.

### Star
- **Add**: Add a star to an item.
- **Delete**: Remove a star from an item.
- **Get Many**: Retrieve a list of stars for the authenticated user.

### User
- **Get**: Retrieve user information.
- **Get Many**: Retrieve a list of users.
- **Get User's Profile**: Retrieve a user's profile.
- **Get User's Status**: Retrieve a user's status.
- **Update User's Profile**: Update a user's profile.

### User Group
- **Create**: Create a user group.
- **Disable**: Disable a user group.
- **Enable**: Enable a user group.
- **Get Many**: Retrieve a list of user groups.
- **Update**: Update a user group.

## Required Scopes

Add appropriate scopes to your Slack app for the Slack node to function. Refer to the following table for resource and operation mappings to Slack API methods:

| **Resource** | **Operation** | **Slack API Method** |
| --- | --- | --- |
| Channel | Archive | [conversations.archive](https://api.slack.com/methods/conversations.archive) |
| Channel | Close | [conversations.close](https://api.slack.com/methods/conversations.close) |
| Channel | Create | [conversations.create](https://api.slack.com/methods/conversations.create) |
| Channel | Get | [conversations.info](https://api.slack.com/methods/conversations.info) |
| Channel | Get Many | [conversations.list](https://api.slack.com/methods/conversations.list) |
| Channel | History | [conversations.history](https://api.slack.com/methods/conversations.history) |
| Channel | Invite | [conversations.invite](https://api.slack.com/methods/conversations.invite) |
| Channel | Join | [conversations.join](https://api.slack.com/methods/conversations.join) |
| Channel | Kick | [conversations.kick](https://api.slack.com/methods/conversations.kick) |
| Channel | Leave | [conversations.leave](https://api.slack.com/methods/conversations.leave) |
| Channel | Member | [conversations.members](https://api.slack.com/methods/conversations.members) |
| Channel | Open | [conversations.open](https://api.slack.com/methods/conversations.open) |
| Channel | Rename | [conversations.rename](https://api.slack.com/methods/conversations.rename) |
| Channel | Replies | [conversations.replies](https://api.slack.com/methods/conversations.replies) |
| Channel | Set Purpose | [conversations.setPurpose](https://api.slack.com/methods/conversations.setPurpose) |
| Channel | Set Topic | [conversations.setTopic](https://api.slack.com/methods/conversations.setTopic) |
| Channel | Unarchive | [conversations.unarchive](https://api.slack.com/methods/conversations.unarchive) |
| File | Get | [files.info](https://api.slack.com/methods/files.info) |
| File | Get Many | [files.list](https://api.slack.com/methods/files.list) |
| File | Upload | [files.upload](https://api.slack.com/methods/files.upload) |
| Message | Delete | [chat.delete](https://api.slack.com/methods/chat.delete) |
| Message | Get Permalink | [chat.getPermalink](https://api.slack.com/methods/chat.getPermalink) |
| Message | Search | [search.messages](https://api.slack.com/methods/search.messages) |
| Message | Send | [chat.postMessage](https://api.slack.com/methods/chat.postMessage) |
| Message | Send and Wait for Approval | [chat.postMessage](https://api.slack.com/methods/chat.postMessage) |
| Message | Update | [chat.update](https://api.slack.com/methods/chat.update) |
| Reaction | Add | [reactions.add](https://api.slack.com/methods/reactions.add) |
| Reaction | Get | [reactions.get](https://api.slack.com/methods/reactions.get) |
| Reaction | Remove | [reactions.remove](https://api.slack.com/methods/reactions.remove) |
| Star | Add | [stars.add](https://api.slack.com/methods/stars.add) |
| Star | Delete | [stars.remove](https://api.slack.com/methods/stars.remove) |
| Star | Get Many | [stars.list](https://api.slack.com/methods/stars.list) |
| User | Get | [users.info](https://api.slack.com/methods/users.info) |
| User | Get Many | [users.list](https://api.slack.com/methods/users.list) |
| User | Get User's Profile | [users.profile.get](https://api.slack.com/methods/users.profile.get) |
| User | Get User's Status | [users.getPresence](https://api.slack.com/methods/users.getPresence) |
| User | Update User's Profile | [users.profile.set](https://api.slack.com/methods/users.profile.set) |
| User Group | Create | [usergroups.create](https://api.slack.com/methods/usergroups.create) |
| User Group | Disable | [usergroups.disable](https://api.slack.com/methods/usergroups.disable) |
| User Group | Enable | [usergroups.enable](https://api.slack.com/methods/usergroups.enable) |
| User Group | Get Many | [usergroups.list](https://api.slack.com/methods/usergroups.list) |
| User Group | Update | [usergroups.update](https://api.slack.com/methods/usergroups.update) |

## Custom API Operations

If an operation is not supported by this node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API following these steps:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for further details.

----------------------------------------

# seven node

Use the seven node to automate work in seven and integrate seven with other applications. n8n supports features such as sending SMS and converting text to voice.

## Operations

- **SMS**
  - **Send SMS**
- **Voice Call**
  - Converts text to voice and calls a given number

## Credentials

Refer to [seven credentials](https://docs.n8n.io/integrations/builtin/credentials/sms77/) for guidance on setting up authentication.

----------------------------------------

# Snowflake Node Documentation

Use the Snowflake node to automate work in Snowflake and integrate Snowflake with other applications. n8n supports various Snowflake features, including executing SQL queries and inserting rows in a database.

## Credentials

Refer to the [Snowflake credentials](https://docs.n8n.io/integrations/builtin/credentials/snowflake/) for guidance on setting up authentication.

## Operations

- **Execute an SQL query**: Allows execution of SQL queries against the database.
- **Insert rows in database**: Facilitates inserting new rows into the specified database table.
- **Update rows in database**: Enables updating of existing rows in the specified database table.

## Templates and Examples

### Load Data into Snowflake
Template for loading data into Snowflake.

### Create a Table, Insert, and Update Data
Template for creating a table and inserting/updating data in the table.

### Import Productboard Notes
Template for importing Productboard notes, companies, and features into Snowflake.

----------------------------------------

# Splunk Node Documentation

Use the Splunk node to automate work in Splunk and integrate it with other applications. n8n supports a variety of Splunk features, including reporting on fired alerts, as well as managing search configurations.

## Credentials
Refer to Splunk credentials for guidance on setting up authentication.

## Operations

- **Fired Alert**
  - Get a fired alerts report

- **Search Configuration**
  - Delete a search configuration
  - Get a search configuration
  - Get many search configurations

- **Search Job**
  - Create a search job
  - Delete a search job
  - Get a search job
  - Get many search jobs

- **Search Result**
  - Get many search results

- **User**
  - Create a user
  - Delete a user
  - Get a user
  - Get many users
  - Update a user

## Templates and Examples
Browse Splunk integration templates or search all templates for additional resources.

----------------------------------------

# Spontit Node Documentation

Use the Spontit node to automate work in Spontit and integrate Spontit with other applications. n8n supports creating push notifications with Spontit.

## Credentials

Refer to Spontit credentials for guidance on setting up authentication.

## Operations

- **Push**
  - Create a push notification

## Templates and Examples

Browse Spontit integration templates or search all templates.

----------------------------------------

# Spotify Node

Use the Spotify node to automate tasks in Spotify and integrate it with other applications. 

## Credentials
Refer to [Spotify credentials](https://docs.n8n.io/integrations/builtin/credentials/spotify/) for authentication setup.

## Operations

- **Album**
  - Get an album by URI or ID.
  - Get a list of new album releases.
  - Get an album's tracks by URI or ID.
  - Search albums by keyword.
  
- **Artist**
  - Get an artist by URI or ID.
  - Get an artist's albums by URI or ID.
  - Get an artist's related artists by URI or ID.
  - Get an artist's top tracks by URI or ID.
  - Search artists by keyword.

- **Library**
  - Get the user's liked tracks.

- **My Data**
  - Get your followed artists.

- **Player**
  - Add a song to your queue.
  - Get your currently playing track.
  - Skip to your next track.
  - Pause your music.
  - Skip to your previous song.
  - Get your recently played tracks.
  - Resume playback on the current active device.
  - Set volume on the current active device.
  - Start playing a playlist, artist, or album.

- **Playlist**
  - Add tracks from a playlist by track and playlist URI or ID.
  - Create a new playlist.
  - Get a playlist by URI or ID.
  - Get a playlist's tracks by URI or ID.
  - Get a user's playlists.
  - Remove tracks from a playlist by track and playlist URI or ID.
  - Search playlists by keyword.

- **Track**
  - Get a track by its URI or ID.
  - Get audio features for a track by URI or ID.
  - Search tracks by keyword.

## What to Do If Your Operation Isn't Supported
If your desired operation isn't supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Stackby Node Documentation

Use the Stackby node to automate work in Stackby and integrate Stackby with other applications. n8n has built-in support for a wide range of Stackby features, including appending, deleting, listing, and reading.

## Credentials

Refer to Stackby credentials for guidance on setting up authentication.

## Operations

- **Append**: Adds new records to a Stackby table.
- **Delete**: Removes records from a Stackby table.
- **List**: Retrieves a list of records from a Stackby table.
- **Read**: Fetches specific records from a Stackby table.

## Additional Resources

For templates and examples, browse Stackby integration templates or search all templates.

----------------------------------------

# Storyblok Node Documentation

## Overview
Use the Storyblok node to automate work in Storyblok and integrate it with other applications. The node supports various Storyblok features including getting, deleting, and publishing stories.

## Credentials
Refer to [Storyblok credentials](https://docs.n8n.io/integrations/builtin/credentials/storyblok/) for guidance on setting up authentication.

## Operations

### Content API
- **Story**
  - Get a story
  - Get all stories

### Management API
- **Story**
  - Delete a story
  - Get a story
  - Get all stories
  - Publish a story
  - Unpublish a story

## Templates and Examples
Browse [Storyblok integration templates](https://n8n.io/integrations/storyblok/) or search all templates at [n8n.io workflows](https://n8n.io/workflows/).

----------------------------------------

# Strapi Node Documentation

Use the Strapi node to automate work in Strapi and integrate Strapi with other applications. n8n has built-in support for a wide range of Strapi features, including creating and deleting entries.

## Credentials
Refer to Strapi credentials for guidance on setting up authentication.

## Operations
- **Entry**
  - **Create**
  - **Delete**
  - **Get**
  - **Get Many**
  - **Update**

## What to do if your operation isn't supported
If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API. 

You can use the credential you created for this service in the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Strava Node Documentation

Use the Strava node to automate work in Strava and integrate Strava with other applications. n8n supports various Strava features, including creating new activities and retrieving activity information.

## Credentials

Refer to [Strava credentials](https://docs.n8n.io/integrations/builtin/credentials/strava/) for guidance on setting up authentication.

## Operations

- **Activity**
  - Create a new activity
  - Get an activity
  - Get all activities
  - Get all activity comments
  - Get all activity kudos
  - Get all activity laps
  - Get all activity zones
  - Update an activity

## Custom API Operations

If the desired operation isn't supported by the Strava node, use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Stripe Node Documentation

Use the Stripe node to automate work in Stripe and integrate it with other applications. n8n supports various Stripe features including balance retrieval, charge creation, and customer management.

## Credentials

Refer to [Stripe credentials](https://docs.n8n.io/integrations/builtin/credentials/stripe/) for guidance on setting up authentication.

## Operations

- **Balance**
  - Get a balance
- **Charge**
  - Create a charge
  - Get a charge
  - Get all charges
  - Update a charge
- **Coupon**
  - Create a coupon
  - Get all coupons
- **Customer**
  - Create a customer
  - Delete a customer
  - Get a customer
  - Get all customers
  - Update a customer
- **Customer Card**
  - Add a customer card
  - Get a customer card
  - Remove a customer card
- **Source**
  - Create a source
  - Delete a source
  - Get a source
- **Token**
  - Create a token

## Handling Unsupported Operations

If the desired operation is not supported by the Stripe node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API. Configure the HTTP Request node as follows:

1. Select **Authentication** > **Predefined Credential Type**.
2. Choose the service you want to connect to.
3. Select your credential.

Reference [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for additional information.

----------------------------------------

# Supabase Node Documentation

Use the Supabase node to automate work in Supabase and integrate it with other applications. n8n supports various Supabase features, including creating, deleting, and retrieving rows.

## Credentials

Refer to Supabase credentials documentation for guidance on setting up authentication.

## Operations

- **Row**
  - **Create a new row**
  - **Delete a row**
  - **Get a row**
  - **Get all rows**
  - **Update a row**

## Configuration Instructions

If this node does not support the operation you want to perform, you can use the HTTP Request node to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to the Custom API operations documentation for more information.

## Common Issues

For common errors or issues and suggested resolution steps, refer to the Common issues documentation.

----------------------------------------

# SyncroMSP Node Documentation

Use the SyncroMSP node to automate work in SyncroMSP and integrate it with other applications. n8n supports a wide range of SyncroMSP features, including creating and deleting customers, tickets, and contacts.

## Credentials

Refer to SyncroMSP credentials for guidance on setting up authentication.

## Operations

### Contact
- **Create new contact**
- **Delete contact**
- **Retrieve contact**
- **Retrieve all contacts**
- **Update contact**

### Customer
- **Create new customer**
- **Delete customer**
- **Retrieve customer**
- **Retrieve all customers**
- **Update customer**

### RMM
- **Create new RMM Alert**
- **Delete RMM Alert**
- **Retrieve RMM Alert**
- **Retrieve all RMM Alerts**
- **Mute RMM Alert**

### Ticket
- **Create new ticket**
- **Delete ticket**
- **Retrieve ticket**
- **Retrieve all tickets**
- **Update ticket**

## Templates and Examples

Browse SyncroMSP integration templates or search all templates.

----------------------------------------

# Taiga Node Documentation

The Taiga node allows automation and integration with Taiga, supporting various functionalities such as creating, updating, deleting, and retrieving issues.

## Credentials

Refer to [Taiga credentials](https://docs.n8n.io/integrations/builtin/credentials/taiga/) for authentication setup guidance.

## Operations

- **Issue Operations**
  - Create an issue
  - Delete an issue
  - Get an issue
  - Get all issues
  - Update an issue

## Templates and Examples

- **Create, update, and get an issue on Taiga**: [View template details](https://n8n.io/workflows/685-create-update-and-get-an-issue-on-taiga/)
- **Receive updates when an event occurs in Taiga**: [View template details](https://n8n.io/workflows/686-receive-updates-when-an-event-occurs-in-taiga/)
- **Automate Service Ticket Triage with GPT-4o & Taiga**: [View template details](https://n8n.io/workflows/4665-automate-service-ticket-triage-with-gpt-4o-and-taiga/)

----------------------------------------

# Tapfiliate Node Documentation

Use the Tapfiliate node to automate work in Tapfiliate and integrate with other applications. n8n supports various Tapfiliate features, including managing affiliates.

## Credentials

Refer to Tapfiliate credentials for guidance on setting up authentication.

## Operations

- **Affiliate**
  - Create an affiliate
  - Delete an affiliate
  - Get an affiliate by ID
  - Get all affiliates
- **Affiliate Metadata**
  - Add metadata to affiliate
  - Remove metadata from affiliate
  - Update affiliate's metadata
- **Program Affiliate**
  - Add affiliate to program
  - Approve an affiliate for a program
  - Disapprove an affiliate
  - Get an affiliate in a program
  - Get all affiliates in a program

----------------------------------------

# Telegram Node Documentation

## Overview
The Telegram node automates work in Telegram and integrates Telegram with other applications. It supports a wide range of features such as getting files, deleting, and editing messages.

## Credentials
Refer to [Telegram credentials](https://docs.n8n.io/integrations/builtin/credentials/telegram/) for authentication setup.

## Operations

### Chat Operations
- **Get**: Retrieve up-to-date information about a chat.
- **Get Administrators**: Get a list of all administrators in a chat.
- **Get Member**: Get details of a chat member.
- **Leave**: Leave a chat.
- **Set Description**: Set the description of a chat.
- **Set Title**: Set the title of a chat.

### Callback Operations
- **Answer Query**: Send answers to callback queries sent from inline keyboards.
- **Answer Inline Query**: Send answers to callback queries sent from inline queries.

### File Operations
- **Get File**: Retrieve a file from Telegram.

### Message Operations
- **Delete Chat Message**: Delete a message from the chat.
- **Edit Message Text**: Edit the text of a message.
- **Pin Chat Message**: Pin a message in the chat.
- **Send Animation**: Send GIFs or H.264/MPEG-4 AVC videos (up to 50 MB).
- **Send Audio**: Send an audio file to the chat.
- **Send Chat Action**: Notify the user that an action is occurring (limited to 5 seconds).
- **Send Document**: Send a document to the chat.
- **Send Location**: Send geolocation information to the chat.
- **Send Media Group**: Send multiple photos and/or videos.
- **Send Message**: Send a text message to the chat.
- **Send Photo**: Send a photo to the chat.
- **Send Sticker**: Send a sticker in .WEBP, .TGS, or .WEBM format.
- **Send Video**: Send a video to the chat.
- **Unpin Chat Message**: Unpin a message from the chat.

## Additional Notes
To use most of the **Message** operations, the bot must be added to a channel. Refer to the [Add a bot to a Telegram channel](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.telegram/common-issues/#add-a-bot-to-a-telegram-channel) guide for more info.

## Related Resources
Refer to [Telegram's API documentation](https://core.telegram.org/bots/api) for detailed service information. Additional documentation on n8n's trigger node for Telegram can be found [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.telegramtrigger/).

## Common Issues
For common errors and resolutions, refer to [Common Issues](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.telegram/common-issues/).

----------------------------------------

# TheHive Node Documentation

## Overview

TheHive node automates work in TheHive and integrates it with other applications. It supports features such as creating alerts, counting tasks, logs, cases, and observables. 

### API Versions

- Use TheHive node for version 3 or 4 of TheHive API.
- Use TheHive 5 node for version 5 of TheHive API.

## Credentials

Refer to [TheHive credentials](https://docs.n8n.io/integrations/builtin/credentials/thehive/) for authentication setup instructions.

## Operations

Available operations vary by API version. After creating your credentials and selecting your API version in the node, the following operations are supported:

- Alert
- Case
- Log
- Observable
- Task

## Custom API Operations

If the desired operation is not supported by TheHive node, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/):

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Choose your credential.

For further information, refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/).

## Related Resources

- Trigger node documentation for TheHive can be found [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.thehivetrigger/).
- TheHive API documentation:
  - [Version 3](https://docs.thehive-project.org/thehive/legacy/thehive3/api/)
  - [Version 4](https://docs.thehive-project.org/cortex/api/api-guide/)

----------------------------------------

# TheHive 5 Node Documentation

## Overview
TheHive 5 node allows automation within TheHive and integration with other applications. It supports creating alerts, counting tasks, logs, cases, and observables.

## Credentials
Refer to [TheHive credentials](https://docs.n8n.io/integrations/builtin/credentials/thehive5/) for authentication setup guidance.

## Operations

### Alert
- Create
- Delete
- Execute Responder
- Get
- Merge Into Case
- Promote to Case
- Search
- Update
- Update Status

### Case
- Add Attachment
- Create
- Delete Attachment
- Delete Case
- Execute Responder
- Get
- Get Attachment
- Get Timeline
- Search
- Update

### Comment
- Create
- Delete
- Search
- Update

### Observable
- Create
- Delete
- Execute Analyzer
- Execute Responder
- Get
- Search
- Update

### Page
- Create
- Delete
- Search
- Update

### Query
- Execute Query

### Task
- Create
- Delete
- Execute Responder
- Get
- Search
- Update

### Task Log
- Add Attachment
- Create
- Delete
- Delete Attachment
- Execute Responder
- Get
- Search

## Templates and Examples
Browse TheHive 5 integration templates [here](https://n8n.io/integrations/thehive-5/).

## Related Resources
For a trigger node for TheHive, refer to the documentation [here](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.thehive5trigger/). For more about TheHive, visit [TheHive's documentation](https://docs.strangebee.com/).

----------------------------------------

# TimescaleDB Node Documentation

Use the TimescaleDB node to automate work and integrate TimescaleDB with other applications. n8n supports various TimescaleDB features, including executing SQL queries, inserting, and updating rows in a database.

## Credentials

Refer to TimescaleDB credentials for authentication setup.

## Operations

- Execute an SQL query
- Insert rows in database
- Update rows in database

## Specify a Column's Data Type

To specify a column's data type, append the column name with `:type`. For example, to specify type `int` for the column **id** and type `text` for the column **name**, use the following in the **Columns** field:

```
id:int,name:text
```

----------------------------------------

## Todoist Node

Use the Todoist node to automate tasks in Todoist and integrate with other applications. The node supports various operations related to tasks.

### Operations
- **Create a new task**
- **Close a task**
- **Delete a task**
- **Get a task**
- **Get all tasks**
- **Reopen a task**
- **Update a task**

### Credentials
Refer to the Todoist credentials documentation for guidance on setting up authentication.

### Using the HTTP Request Node
If the desired operation is not supported by this node, use the HTTP Request node to call the Todoist API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select the credential created for this service.

Refer to the Custom API operations documentation for more information.

----------------------------------------

# Travis CI Node

Use the Travis CI node to automate tasks in Travis CI and integrate it with other applications. n8n supports a range of Travis CI operations, including cancelling and retrieving builds.

## Credentials
Refer to [Travis CI credentials](https://docs.n8n.io/integrations/builtin/credentials/travisci/) for authentication setup.

## Operations
- **Build**
  - Cancel a build
  - Get a build
  - Get all builds
  - Restart a build
  - Trigger a build

----------------------------------------

# Trello Node Documentation

Use the Trello node to automate work in Trello and integrate Trello with other applications. n8n supports a wide range of Trello features, including creating and updating cards, and managing members.

## Credentials

Refer to [Trello credentials](https://docs.n8n.io/integrations/builtin/credentials/trello/) for guidance on setting up authentication.

## Operations

- **Attachment**
  - Create a new attachment for a card
  - Delete an attachment
  - Get the data of an attachment
  - Returns all attachments for the card

- **Board**
  - Create a new board
  - Delete a board
  - Get the data of a board
  - Update a board

- **Board Member**
  - Add
  - Get All
  - Invite
  - Remove

- **Card**
  - Create a new card
  - Delete a card
  - Get the data of a card
  - Update a card

- **Card Comment**
  - Create a comment on a card
  - Delete a comment from a card
  - Update a comment on a card

- **Checklist**
  - Create a checklist item
  - Create a new checklist
  - Delete a checklist
  - Delete a checklist item
  - Get the data of a checklist
  - Returns all checklists for the card
  - Get a specific checklist on a card
  - Get the completed checklist items on a card
  - Update an item in a checklist on a card

- **Label**
  - Add a label to a card
  - Create a new label
  - Delete a label
  - Get the data of a label
  - Returns all labels for the board
  - Remove a label from a card
  - Update a label

- **List**
  - Archive/Unarchive a list
  - Create a new list
  - Get the data of a list
  - Get all the lists
  - Get all the cards in a list
  - Update a list

## What to do if your operation isn't supported

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

Use the credential created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

## Find the List ID

1. Open the Trello board that contains the list.
2. If the list doesn't have any cards, add a card to the list.
3. Open the card, add `.json` at the end of the URL, and press enter.
4. In the JSON file, you will see a field called `idList`.
5. Copy the contents of the `idList` field and paste it in the **List ID** field in n8n.

----------------------------------------

# Twake Node

The Twake node is used to automate work in Twake and integrate Twake with other applications. n8n supports sending messages with Twake.

## Credentials

Refer to [Twake credentials](https://docs.n8n.io/integrations/builtin/credentials/twake/) for guidance on setting up authentication.

## Operations

- **Message**
  - Send a message

## What to Do if Your Operation Isn't Supported

If this node doesn't support the operation you want to perform, you can use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Twilio Node Documentation

Use the Twilio node to automate work in Twilio, integrating Twilio with other applications. n8n supports sending MMS/SMS and WhatsApp messages with Twilio.

## Credentials

For guidance on setting up authentication, refer to Twilio credentials documentation.

## Operations

- **SMS**
  - Send SMS/MMS/WhatsApp message
- **Call**
  - Make a phone call using text-to-speech to say a message

## Configuration Instructions for Unsupported Operations

If this node doesn't support the operation you want to do, use the HTTP Request node to call the service's API. You can use the credential created for this service in the HTTP Request node:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations documentation for more information.

----------------------------------------

# Twist Node Documentation

Use the Twist node to automate work in Twist and integrate Twist with other applications. n8n supports various Twist features, including creating conversations in a channel, creating, and deleting comments on a thread.

## Credentials

Refer to Twist credentials for guidance on setting up authentication.

## Operations

### Channel
- Archive a channel
- Initiates a public or private channel-based conversation
- Delete a channel
- Get information about a channel
- Get all channels
- Unarchive a channel
- Update a channel

### Comment
- Create a new comment to a thread
- Delete a comment
- Get information about a comment
- Get all comments
- Update a comment

### Message Conversation
- Create a message in a conversation
- Delete a message in a conversation
- Get a message in a conversation
- Get all messages in a conversation
- Update a message in a conversation

### Thread
- Create a new thread in a channel
- Delete a thread
- Get information about a thread
- Get all threads
- Update a thread

## Best Practices

If a specific operation is not supported by the node, use the HTTP Request node to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

## Get the User ID

To get the User ID for a user:

1. Open the **Team** tab.
2. Select a user's avatar.
3. Copy the string of characters located after `/u/` in your Twist URL. This string is the User ID. For example, if the URL is `https://twist.com/a/4qw45/people/u/475370`, the User ID is `475370`.

----------------------------------------

## X (Formerly Twitter) Node Documentation

### Overview
Use the X node to automate tasks in X and integrate X with other applications. This node supports various X features, including direct messaging, tweet management, and user actions.

### Credentials
Refer to X credentials for authentication setup guidance.

### Operations
- **Direct Message**
  - Create a direct message
- **Tweet**
  - Create or reply to a tweet
  - Delete a tweet
  - Search tweets
  - Like a tweet
  - Retweet a tweet
- **User**
  - Get a user
- **List**
  - Add a member to a list

### AI Integration
This node can enhance the capabilities of an AI agent by allowing automatic or AI-directed parameter setting. Refer to the AI tool parameters documentation for more details.

----------------------------------------

# Unleashed Software Node

Use the Unleashed Software node to automate work in Unleashed Software and integrate Unleashed Software with other applications. n8n has built-in support for various Unleashed Software features, including sales orders and stock management.

## Credentials

Refer to [Unleashed Software credentials](https://docs.n8n.io/integrations/builtin/credentials/unleashedsoftware/) for guidance on setting up authentication.

## Operations

- **Sales Order**
  - Get all sales orders
- **Stock On Hand**
  - Get a stock on hand
  - Get all stocks on hand

## Templates and Examples

Browse Unleashed Software integration templates or search all templates.

----------------------------------------

# UpLead Node Documentation

Use the UpLead node to automate work in UpLead and integrate UpLead with other applications. n8n supports several UpLead operations, including getting company information.

## Credentials

Refer to UpLead credentials for guidance on setting up authentication.

## Operations

- **Company**
  - Enrich
- **Person**
  - Enrich

----------------------------------------

# uProc Node Documentation

## Overview
The uProc node automates tasks within uProc and integrates it with other applications, supporting various functionalities including audio generation, communication data retrieval, and company information access.

## Operations

### Audio
- Get advanced human audio file by provided text and language.
- Get an audio file by provided text and language.

### Communication
- Discover social network presence for a domain.
- Validate email status (valid, bounce type, spam-trap, etc.).
- Check SMTP server configuration for email domains.
- Validate mobile and landline phone numbers.
- Clean phone numbers.
- Get email addresses based on company domain and prospect names.
- Retrieve LinkedIn profile data based on email or social media.
- Send custom messages via email or SMS.

### Company
- Validate CIF, ISIN, and SS numbers (Spain only).
- Retrieve company data by domain, email, and various identifiers (CIF, DUNS, phone number).
- Collect decision-maker data using search engines.
- Normalize CIF numbers.

### Finance
- Validate crypto wallets, IBAN, and BIC numbers.
- Convert currencies and access VAT information.

### Geographical
- Validate and analyze geographical data (zip codes, coordinates).
- Retrieve city and province information based on various parameters.
- Calculate distances between coordinates or addresses.

### Image
- Decode QR codes and extract EXIF metadata from images.

### Internet
- Validate domain existence, DNS records, and SSL certificates.
- Monitor URL accessibility and manage URL formats.

### Personal
- Validate personal identification numbers (DNI, NIF, NIE).
- Discover and normalize personal names and age data.
- Retrieve social media profiles based on personal information.

### Product
- Validate ASIN, EAN, ISBN, GTIN, and UPC formats.
- Retrieve product data from Amazon Marketplace.

### Security
- Check validity of Luhn numbers and assess password strength.
- Access blacklists for domains and IP addresses.

### Text
- Validate string formats, lengths, and content types.
- Perform text analysis and convert strings to various formats (Base64, MD5, SHA).

## Configuration Instructions
- Refer to [uProc credentials](https://docs.n8n.io/integrations/builtin/credentials/uproc/) for authentication setup.
- Use the HTTP Request node for unsupported operations by selecting the service and credential appropriately.

## Best Practices
- Use the provided templates and examples for guidance on creating workflows.
- Normalizing data is crucial for consistency; ensure to use normalization features for identifiers and personal data.

## Templates and Examples
- Scrape and store data from multiple web pages.
- Create a website screenshot and send it via Telegram.
- Monitor SSL certificate status for a domain.

For more workflows and templates, visit [n8n integrations](https://n8n.io/integrations/uproc/).

----------------------------------------

# UptimeRobot Node

The UptimeRobot node automates work in UptimeRobot and integrates UptimeRobot with other applications. It supports a wide range of features, including creating and deleting alerts, as well as getting account details.

## Credentials
Refer to UptimeRobot credentials for guidance on setting up authentication.

## Operations
- **Account**
  - Get account details
- **Alert Contact**
  - Create an alert contact
  - Delete an alert contact
  - Get an alert contact
  - Get all alert contacts
  - Update an alert contact
- **Maintenance Window**
  - Create a maintenance window
  - Delete a maintenance window
  - Get a maintenance window
  - Get all maintenance windows
  - Update a maintenance window
- **Monitor**
  - Create a monitor
  - Delete a monitor
  - Get a monitor
  - Get all monitors
  - Reset a monitor
  - Update a monitor
- **Public Status Page**
  - Create a public status page
  - Delete a public status page
  - Get a public status page
  - Get all public status pages

## Templates and Examples
Browse UptimeRobot integration templates or search all templates.

----------------------------------------

# urlscan.io Node Documentation

Use the urlscan.io node to automate workflows using urlscan.io, integrating its features with other applications such as scanning URLs.

## Credentials

Refer to the urlscan.io credentials documentation for guidance on setting up authentication.

## Operations

- **Scan**
  - **Get**: Retrieve information about a specific scan.
  - **Get All**: Retrieve information about all scans.
  - **Perform**: Conduct a new scan on a provided URL.

## If Your Operation Isn't Supported

If a specific operation is not supported by this node, use the HTTP Request node to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Choose your credential.

Refer to the Custom API operations documentation for more information.

----------------------------------------

# Venafi TLS Protect Cloud Node Documentation

## Overview
The Venafi TLS Protect Cloud node automates tasks in Venafi TLS Protect Cloud and integrates it with other applications. Supported features include deleting, downloading, and creating certificate requests.

## Credentials
Refer to [Venafi TLS Protect Cloud credentials](https://docs.n8n.io/integrations/builtin/credentials/venafitlsprotectcloud/) for authentication setup.

## Operations
### Certificate
- **Delete**
- **Download**
- **Get**
- **Get Many**
- **Renew**

### Certificate Request
- **Create**
- **Get**
- **Get Many**

## HTTP Request Node
If an operation is unsupported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to make API calls. Use the credential created for the service as follows:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect.
3. Choose your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more details.

## Related Resources
- [Venafi's REST API documentation](https://docs.venafi.cloud/api/vaas-rest-api/)
- A [trigger node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.venafitlsprotectcloudtrigger/) for Venafi TLS Protect Cloud.
- A [node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.venafitlsprotectdatacenter/) for Venafi TLS Protect Datacenter.

----------------------------------------

# Venafi TLS Protect Datacenter Node Documentation

## Description
The Venafi TLS Protect Datacenter node automates work in Venafi TLS Protect Datacenter, integrating it with other applications. It supports a variety of operations, including creating, deleting, and retrieving certificates.

## Credentials
Refer to the [Venafi TLS Protect Datacenter credentials](https://docs.n8n.io/integrations/builtin/credentials/venafitlsprotectdatacenter/) for authentication setup guidance.

## Operations
- **Certificate**
  - Create
  - Delete
  - Download
  - Get
  - Get Many
  - Renew
- **Policy**
  - Get

## Custom API Operations
If the node does not support the desired operation, use the HTTP Request node to call the service's API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Vero Node Documentation

## Overview
Use the Vero node to automate work in Vero and integrate Vero with other applications. 

## Credentials
Refer to [Vero credentials](https://docs.n8n.io/integrations/builtin/credentials/vero/) for guidance on setting up authentication.

## Operations

### User
- Create or update a user profile
- Change a user's identifier
- Unsubscribe a user
- Resubscribe a user
- Delete a user
- Add a tag to a user's profile
- Remove a tag from a user's profile

### Event
- Track an event for a specific customer

## Templates and Examples
Browse Vero integration templates or search all templates.

----------------------------------------

# Vonage Node

Use the Vonage node to automate work in Vonage and integrate it with other applications. n8n supports sending SMS with Vonage.

## Credentials

Refer to [Vonage credentials](https://docs.n8n.io/integrations/builtin/credentials/vonage/) for guidance on setting up authentication.

## Operations

- **SMS**
  - **Send**: Sends a text message via the Vonage API.

## Templates and Examples

- **Receive messages from a topic via Kafka and send an SMS**
  
- **Receive messages from a queue via RabbitMQ and send an SMS**

- **Get data from Hacker News and send to Airtable or via SMS**

Browse [Vonage integration templates](https://n8n.io/integrations/vonage/) or [search all templates](https://n8n.io/workflows/) for more examples.

----------------------------------------

# Webflow Node Documentation

Use the Webflow node to automate work in Webflow and integrate Webflow with other applications. n8n has built-in support for a range of Webflow features, including creating, updating, deleting, and retrieving items.

## Credentials

Refer to Webflow credentials for guidance on setting up authentication.

## Operations

- **Item Operations**
  - **Create**: Create a new item in Webflow.
  - **Delete**: Remove an existing item from Webflow.
  - **Get**: Retrieve a single item from Webflow.
  - **Get All**: Fetch all items from Webflow.
  - **Update**: Modify an existing item in Webflow.

## Technical Instructions

If the desired operation is not supported by this node, use the HTTP Request node to call the service's API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# Wekan Node Documentation

Use the Wekan node to automate work in Wekan and integrate Wekan with other applications. n8n supports a range of Wekan features:

## Credentials

Refer to Wekan credentials for guidance on setting up authentication.

## Operations

### Board Operations
- **Create a new board**
- **Delete a board**
- **Get the data of a board**
- **Get all user boards**

### Card Operations
- **Create a new card**
- **Delete a card**
- **Get a card**
- **Get all cards**
- **Update a card**

### Card Comment Operations
- **Create a comment on a card**
- **Delete a comment from a card**
- **Get a card comment**
- **Get all card comments**

### Checklist Operations
- **Create a new checklist**
- **Delete a checklist**
- **Get the data of a checklist**
- **Return all checklists for the card**

### Checklist Item Operations
- **Delete a checklist item**
- **Get a checklist item**
- **Update a checklist item**

### List Operations
- **Create a new list**
- **Delete a list**
- **Get the data of a list**
- **Get all board lists**

## Using HTTP Request Node

If the desired operation is not supported by this node, use the HTTP Request node to call the service's API. Use the created credential for this service in the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

## Loading Node Parameters

To load all the parameters, such as Author ID, grant admin permissions to the user. Refer to the Wekan documentation to learn how to change permissions.

----------------------------------------

# WhatsApp Business Cloud Node Documentation

Use the **WhatsApp Business Cloud node** to automate work in WhatsApp Business and integrate it with other applications. n8n supports various WhatsApp Business features, including sending messages, and managing media.

## Credentials
Refer to [WhatsApp Business Cloud credentials](https://docs.n8n.io/integrations/builtin/credentials/whatsapp/) for setup instructions.

## Operations

- **Message**
  - **Send**: Send a message.
  - **Send and Wait for Response**: Send a message and wait for a user reply.
  - **Send Template**: Send a pre-defined message template.

- **Media**
  - **Upload**: Upload media to WhatsApp.
  - **Download**: Download media from WhatsApp.
  - **Delete**: Delete media from WhatsApp.

## Waiting for a Response
Choose the **Send and Wait for a Response** operation to pause workflow execution until user confirmation is received. 

### Response Types:
- **Approval**: Users can approve or disapprove within the message.
- **Free Text**: Users can respond via a form.
- **Custom Form**: Users can respond using a custom form.

**Configuration Options:**
- **Limit Wait Time**: Set a time limit for waiting.
- **Append n8n Attribution**: Include or exclude attribution in the message.

### Customizations:
- **Approval Response**: Configure approval and disapproval buttons, and customize labels.
- **Free Text Response**: Customize button label, form title, and description.
- **Custom Form Response**: Create form fields and customize labels and messages.

## Templates and Examples
- **View templates**: 
  - [Building Your First WhatsApp Chatbot](https://n8n.io/workflows/2465-building-your-first-whatsapp-chatbot/)
  - [Respond to WhatsApp Messages with AI Like a Pro!](https://n8n.io/workflows/2466-respond-to-whatsapp-messages-with-ai-like-a-pro/)
  - [AI-Powered WhatsApp Chatbot for Text, Voice, Images & PDFs with Memory](https://n8n.io/workflows/3586-ai-powered-whatsapp-chatbot-for-text-voice-images-and-pdfs-with-memory/)

## Related Resources
Refer to [WhatsApp Business Platform's Cloud API documentation](https://developers.facebook.com/docs/whatsapp/cloud-api) for detailed operations.

## Common Issues
For common errors or suggestions, refer to the [Common Issues](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/common-issues/) section.

## What to Do If Your Operation Isn't Supported
If an operation isn't supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the API:

1. Select **Authentication** > **Predefined Credential Type**.
2. Choose the service to connect.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for further details.

----------------------------------------

# Wise Node

Use the Wise node to automate work in Wise and integrate Wise with other applications. n8n supports a wide range of Wise features.

## Operations

- **Account**
  - Retrieve balances for all account currencies of this user.
  - Retrieve currencies in the borderless account of this user.
  - Retrieve the statement for the borderless account of this user.
  
- **Exchange Rate**
  - Get
  
- **Profile**
  - Get
  - Get All
  
- **Recipient**
  - Get All
  
- **Quote**
  - Create
  - Get
  
- **Transfer**
  - Create
  - Delete
  - Execute
  - Get
  - Get All
  
## Credentials

Refer to Wise credentials for guidance on setting up authentication.

----------------------------------------

# WooCommerce Node Documentation

Use the WooCommerce node to automate work in WooCommerce, integrating WooCommerce with other applications. n8n supports a range of WooCommerce features, including creating and deleting customers, orders, and products.

## Credentials
Refer to WooCommerce credentials for guidance on setting up authentication.

## Operations
### Customer
- Create a customer
- Delete a customer
- Retrieve a customer
- Retrieve all customers
- Update a customer

### Order
- Create an order
- Delete an order
- Get an order
- Get all orders
- Update an order

### Product
- Create a product
- Delete a product
- Get a product
- Get all products
- Update a product

## What to do if your operation isn't supported
If this node doesn't support the desired operation, use the HTTP Request node to call the service's API:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to Custom API operations for more information.

----------------------------------------

# WordPress Node Documentation

Use the WordPress node to automate work in WordPress and integrate WordPress with other applications. This node supports features such as creating, updating, and retrieving posts and users.

## Credentials

Refer to [WordPress credentials](https://docs.n8n.io/integrations/builtin/credentials/wordpress/) for authentication setup.

## Operations

### Post
- **Create a post**
- **Get a post**
- **Get all posts**
- **Update a post**

### Pages
- **Create a page**
- **Get a page**
- **Get all pages**
- **Update a page**

### User
- **Create a user**
- **Get a user**
- **Get all users**
- **Update a user**

## What to Do if Your Operation Isn't Supported

If the desired operation is not supported by this node, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API with the following steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for additional information.

----------------------------------------

# Xero Node Documentation

## Overview
The Xero node automates tasks in Xero and integrates it with other applications. It supports creating, updating, and retrieving contacts and invoices.

## Credentials
For authentication setup, refer to the [Xero credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/xero/).

## Operations

### Contact Operations
- **Create a contact**
- **Get a contact**
- **Get all contacts**
- **Update a contact**

### Invoice Operations
- **Create an invoice**
- **Get an invoice**
- **Get all invoices**
- **Update an invoice**

## Configuration Instructions
If a desired operation is not supported by the Xero node, use the HTTP Request node to call the Xero API. Follow these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to the [Custom API operations documentation](https://docs.n8n.io/integrations/custom-operations/) for additional information.

----------------------------------------

# Yourls Node Documentation

Use the Yourls node to automate work in Yourls and integrate Yourls with other applications. n8n supports various Yourls features, including expanding and shortening URLs.

## Credentials
Refer to [Yourls credentials](https://docs.n8n.io/integrations/builtin/credentials/yourls/) for guidance on setting up authentication.

## Operations
- **URL**
  - Expand a URL
  - Shorten a URL
  - Get stats about one short URL

## Templates and Examples
- Browse Yourls integration templates at [n8n.io integrations](https://n8n.io/integrations/yourls/).
- Search all templates at [n8n.io workflows](https://n8n.io/workflows/).

----------------------------------------

# YouTube Node Documentation

Use the YouTube node to automate work in YouTube and integrate YouTube with other applications. n8n supports various YouTube features, including retrieving, updating channels, and creating and deleting playlists.

## Credentials

Refer to [YouTube credentials](https://docs.n8n.io/integrations/builtin/credentials/google/) for guidance on setting up authentication.

## Operations

- **Channel**
  - Retrieve a channel
  - Retrieve all channels
  - Update a channel
  - Upload a channel banner
- **Playlist**
  - Create a playlist
  - Delete a playlist
  - Get a playlist
  - Retrieve all playlists
  - Update a playlist
- **Playlist Item**
  - Add an item to a playlist
  - Delete an item from a playlist
  - Get a playlist's item
  - Retrieve all playlist items
- **Video**
  - Delete a video
  - Get a video
  - Retrieve all videos
  - Rate a video
  - Update a video
  - Upload a video
- **Video Category**
  - Retrieve all video categories

## What to Do If Your Operation Isn't Supported

If the YouTube node doesn’t support the operation you want to perform, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

Steps to use the HTTP Request node:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Zammad Node

Use the Zammad node to automate work in Zammad and integrate Zammad with other applications. n8n supports various Zammad features, including creating, retrieving, and deleting groups and organizations.

## Credentials

Refer to Zammad credentials for guidance on setting up authentication.

## Operations

- **Group**
  - Create
  - Delete
  - Get
  - Get many
  - Update
- **Organization**
  - Create
  - Delete
  - Get
  - Get many
  - Update
- **Ticket**
  - Create
  - Delete
  - Get
  - Get many
- **User**
  - Create
  - Delete
  - Get
  - Get many
  - Get self
  - Update

## Templates and Examples

**Update people through Zulip about open tickets in Zammad**

**Export Zammad Objects (Users, Roles, Groups, Organizations) to Excel**

**Sync Entra User to Zammad User**

----------------------------------------

# Zendesk Node Documentation

Use the Zendesk node to automate work in Zendesk and integrate it with other applications. It supports various Zendesk features such as creating, deleting tickets, users, and organizations.

## Credentials

Refer to [Zendesk credentials](https://docs.n8n.io/integrations/builtin/credentials/zendesk/) for guidance on setting up authentication.

## Operations

### Ticket
- **Create a ticket**
- **Delete a ticket**
- **Get a ticket**
- **Get all tickets**
- **Recover a suspended ticket**
- **Update a ticket**

### Ticket Field
- **Get a ticket field**
- **Get all system and custom ticket fields**

### User
- **Create a user**
- **Delete a user**
- **Get a user**
- **Get all users**
- **Get a user's organizations**
- **Get data related to the user**
- **Search users**
- **Update a user**

### Organization
- **Create an organization**
- **Delete an organization**
- **Count organizations**
- **Get an organization**
- **Get all organizations**
- **Get data related to the organization**
- **Update an organization**

## Templates and Examples

- Automate SIEM Alert Enrichment with MITRE ATT&CK, Qdrant & Zendesk in n8n
- Sync Zendesk tickets with subsequent comments to Jira issues
- Sync Zendesk tickets to Slack thread

## What to Do if Your Operation Isn't Supported

If the node does not support the operation you want to perform, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API by following these steps:

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Zoho CRM Node Documentation

Use the Zoho CRM node to automate tasks in Zoho CRM and integrate it with other applications. n8n supports a wide range of Zoho CRM features, including operations for accounts, contacts, and deals.

## Credentials

Refer to [Zoho CRM credentials](https://docs.n8n.io/integrations/builtin/credentials/zoho/) for guidance on setting up authentication.

## Operations

### Account
- Create an account
- Upsert account (create a new record or update the existing one)
- Delete an account
- Get an account
- Get all accounts
- Update an account

### Contact
- Create a contact
- Upsert contact
- Delete a contact
- Get a contact
- Get all contacts
- Update a contact

### Deal
- Create a deal
- Upsert deal
- Delete a contact
- Get a contact
- Get all contacts
- Update a contact

### Invoice
- Create an invoice
- Upsert invoice
- Delete an invoice
- Get an invoice
- Get all invoices
- Update an invoice

### Lead
- Create a lead
- Upsert lead
- Delete a lead
- Get a lead
- Get all leads
- Get lead fields
- Update a lead

### Product
- Create a product
- Upsert product
- Delete a product
- Get a product
- Get all products
- Update a product

### Purchase Order
- Create a purchase order
- Upsert purchase order
- Delete a purchase order
- Get a purchase order
- Get all purchase orders
- Update a purchase order

### Quote
- Create a quote
- Upsert quote
- Delete a quote
- Get a quote
- Get all quotes
- Update a quote

### Sales Order
- Create a sales order
- Upsert sales order
- Delete a sales order
- Get a sales order
- Get all sales orders
- Update a sales order

### Vendor
- Create a vendor
- Upsert vendor
- Delete a vendor
- Get a vendor
- Get all vendors
- Update a vendor

## Custom API Operations

If the desired operation is not supported, use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API:
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for further information.

----------------------------------------

# Zoom Node Documentation

## Overview
The Zoom node automates work in Zoom and integrates Zoom with other applications. It supports a range of features for creating, retrieving, deleting, and updating meetings.

### Credentials
Refer to [Zoom credentials](https://docs.n8n.io/integrations/builtin/credentials/zoom/) for authentication setup.

## Operations
- **Meeting**
  - **Create a meeting**
  - **Delete a meeting**
  - **Retrieve a meeting**
  - **Retrieve all meetings**
  - **Update a meeting**

## Using the HTTP Request Node
If a desired operation is not supported, use the HTTP Request node to call the Zoom API.

**Steps:**
1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Zulip Node Documentation

## Overview
The Zulip node is used to automate workflows in Zulip and integrate it with other applications. It supports functionalities including user and stream management and sending messages.

## Credentials
Refer to [Zulip credentials](https://docs.n8n.io/integrations/builtin/credentials/zulip/) for authentication setup guidance.

## Operations

### Message
- **Delete a message**
- **Get a message**
- **Send a private message**
- **Send a message to stream**
- **Update a message**
- **Upload a file**

### Stream
- **Create a stream**
- **Delete a stream**
- **Get all streams**
- **Get subscribed streams**
- **Update a stream**

### User
- **Create a user**
- **Deactivate a user**
- **Get a user**
- **Get all users**
- **Update a user**

## Templates and Examples
- [Browse Zulip integration templates](https://n8n.io/integrations/zulip/)
- [Search all templates](https://n8n.io/workflows/)

----------------------------------------

# OpenAI Node Documentation

Use the OpenAI node to automate work in OpenAI and integrate OpenAI with other applications. 

## Operations

- **Assistant**
  - **Create an Assistant**
  - **Delete an Assistant**
  - **List Assistants**
  - **Message an Assistant**
  - **Update an Assistant**

- **Text**
  - **Message a Model**
  - **Classify Text for Violations**

- **Image**
  - **Analyze Image**
  - **Generate an Image**

- **Audio**
  - **Generate Audio**
  - **Transcribe a Recording**
  - **Translate a Recording**

- **File**
  - **Delete a File**
  - **List Files**
  - **Upload a File**

## Credentials

Refer to [OpenAI credentials](https://docs.n8n.io/integrations/builtin/credentials/openai/) for guidance on setting up authentication.

## What to do if your operation isn't supported

If this node doesn't support the operation you want, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

1. In the HTTP Request node, select **Authentication** \> **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

## Using tools with OpenAI assistants

Some operations allow you to connect tools. 

Select the **Tools** connector to browse the available tools and add them.

### Operations that support tool connectors

- **Assistant**
  - **Message an Assistant**

- **Text**
  - **Message a Model**

## Common issues

Refer to [Common issues](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/common-issues/) for common questions or issues and suggested solutions.

----------------------------------------

# Perplexity Node Documentation

Use the Perplexity node to automate work in Perplexity and integrate it with other applications. n8n has built-in support for messaging a model.

## Credentials

Refer to the authentication information for this node in the [Perplexity Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/perplexity/).

## Operations

- **Message a Model**: Create one or more completions for a given text.

## Configuration Instructions

If this node doesn't support the operation you want to do, you can use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to call the service's API.

1. In the HTTP Request node, select **Authentication** > **Predefined Credential Type**.
2. Select the service you want to connect to.
3. Select your credential.

Refer to [Custom API operations](https://docs.n8n.io/integrations/custom-operations/) for more information.

----------------------------------------

# Cluster Nodes

Cluster nodes are node groups that work together to provide functionality in an n8n workflow. Instead of using a single node, you use a root node and one or more sub-nodes that extend the functionality of the node.

## Root Nodes

Each cluster starts with one root node.

## Sub-Nodes

Each root node can have one or more sub-nodes attached to it.

----------------------------------------

# Root Nodes

Root nodes are foundational nodes within a group of cluster nodes. Cluster nodes are node groups that work together to provide functionality in an n8n workflow. Instead of using a single node, you use a root node and one or more sub-nodes that extend the functionality of the node.

## AI Glossary

- **completion**: Completions are the responses generated by a model like GPT.
- **hallucinations**: Hallucination in AI is when an LLM (large language model) mistakenly perceives patterns or objects that don't exist.
- **vector database**: A vector database stores mathematical representations of information. Use with embeddings and retrievers to create a database that your AI can access when answering questions.
- **vector store**: A vector store, or vector database, stores mathematical representations of information. Use with embeddings and retrievers to create a database that your AI can access when answering questions.

----------------------------------------

# Sub-Nodes

Sub nodes attach to root nodes within a group of cluster nodes. They configure the overall functionality of the cluster.

## Core Concepts

- **Cluster Nodes**: Node groups that work together to provide functionality in an n8n workflow. Use a root node alongside one or more sub-nodes to extend the functionality.
  
- **Root Node**: The primary node that acts as an entry point in a workflow.
  
- **Sub-Nodes**: Nodes that enhance the capabilities of the root node within the cluster framework.

## Terminology

- **Completion**: Responses generated by a model like GPT.
- **Hallucinations**: When an LLM (large language model) mistakenly perceives patterns or objects that don't exist.
- **Vector Database**: Stores mathematical representations of information for use with embeddings and retrievers.
- **Vector Store**: Similar to vector databases; stores mathematical representations for AI accessibility.

## Workflow Pattern

Sub nodes can be used in conjunction with root nodes in an n8n workflow to achieve complex tasks by applying various configurations and operations.

----------------------------------------

# Core Nodes Library

## Core Concepts
n8n's core nodes are the fundamental building blocks for creating workflows within the n8n platform. Each node represents a function that can be executed within a workflow, allowing for the automation of tasks and integration of various services.

## Node & Parameter Details
- **Node:** A basic unit of workflow functionality in n8n.
- **Parameters:** Configurable options within each node that allow users to customize the behavior of the node.

## Workflow Patterns
Workflows in n8n are constructed by connecting multiple nodes, each serving a specific purpose. Nodes communicate via data passing, where the output of one node can be used as the input for another.

## Best Practices
- Ensure nodes are configured with the correct parameters to achieve the desired functionality.
- Use a combination of nodes to optimize the automation processes and reduce redundant operations.
- Regularly review and organize workflows for improved readability and maintenance. 

## Configuration Instructions
To create a workflow using core nodes:
1. Start by selecting a trigger node to initiate the workflow.
2. Add additional nodes for processing data (e.g., HTTP Request, Google Sheets).
3. Connect nodes logically to define the flow of data.
4. Configure each node’s parameters to meet specific requirements.

----------------------------------------

# Activation Trigger Node

The Activation Trigger node gets triggered when an event is fired by n8n or a workflow. It has been deprecated and replaced with the **n8n Trigger node** and the **Workflow Trigger node**.

## Node Parameters

- **Events**
  - **Activation**: Executes when the workflow is activated.
  - **Start**: Executes when n8n starts or restarts.
  - **Update**: Executes when the workflow is saved while active. 

## Important Notes

- To use the Activation Trigger node in a workflow, it must be added to that workflow.
- The Activation Trigger node triggers the workflow it is added to, allowing it to notify the state of the workflow.

----------------------------------------

# Aggregate Node

Use the Aggregate node to group separate items or portions of them into individual items.

## Node Parameters

### Individual Fields
- **Input Field Name**: Name of the field in the input data to aggregate.
- **Rename Field**: Toggle to give the field a different name in the output.
  - **Output Field Name**: This field is displayed when **Rename Field** is turned on. Enter the field name for the aggregated output data.

### All Item Data
- **Put Output in Field**: Name of the field to output the data in.
- **Include**: Options for included fields:
  - **All fields**: Includes all field data with no further parameters.
  - **Specified Fields**: Enter a comma-separated list of fields to include.
  - **All Fields Except**: Enter a comma-separated list of fields to exclude.

## Node Options
- **Disable Dot Notation**: Controls referencing child fields using `parent.child`. Turn on to disallow.
- **Merge Lists**: Turn on if the field to aggregate is a list and you want a single flat list.
- **Include Binaries**: Turn on to include binary data in the output.
- **Keep Missing And Null Values**: Turn on to include null (empty) entries for missing values in the output.

----------------------------------------

# AI Transform

Use the AI Transform node to generate code snippets based on your prompt. The AI is context-aware, understanding the workflow’s nodes and their data types.

## Node Parameters

### Instructions
Enter your prompt for the AI and click **Generate code** to automatically populate the **Transformation Code**. The prompt should be in plain English and under 500 characters.

### Transformation Code
The code snippet generated by the node is read-only. To edit this code, adjust your prompt in **Instructions** or copy and paste it into a **Code** node.

----------------------------------------

## Code Node

The Code node allows you to write custom JavaScript or Python and execute it within your workflow.

### Usage

#### Choose a Mode
- **Run Once for All Items**: Default mode; code executes once for all input items.
- **Run Once for Each Item**: Executes code for each input item separately.

### JavaScript

The Code node supports Node.js.

#### Supported JavaScript Features
- Supports promises for asynchronous code execution.
- Use `console.log` for debugging.

#### External Libraries
- Self-hosted n8n allows usage of built-in and external npm modules. Refer to the guide on **Enable modules in Code node**.
- n8n Cloud provides access to:
  - [crypto Node.js module](https://nodejs.org/docs/latest-v18.x/api/crypto.html)
  - [moment npm package](https://www.npmjs.com/package/moment)

#### Built-in Methods and Variables
- Methods and variables are accessed using `$variableName` or `$methodName()`. Use `$` in the Code node for suggestions.

### Python

n8n supports Python using [Pyodide](https://pyodide.org/en/stable/), a port of CPython to WebAssembly. Limited to specific packages.

#### Processing Speed
- Slower than JavaScript due to additional compilation steps.

#### Built-in Methods and Variables
- Access using `_variableName` or `_methodName()`. Type `_` for suggestions.

### File System and HTTP Requests

Access to the file system or making HTTP requests is not allowed. Use the following nodes instead:
- [Read/Write File From Disk](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/)
- [HTTP Request](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)

### Key Concepts

- Understand data structures, requirements for outputting data, and item linking in the Code node.
  
### Use AI in the Code Node

Available to Cloud users; AI-generated code will overwrite existing code. The flow to use AI:
1. Set **Language** to **JavaScript**.
2. Select the **Ask AI** tab.
3. Write a query and generate code.

### Common Issues

Refer to the **Common Issues** documentation for frequently faced problems and solutions.

----------------------------------------

# Compare Datasets

The Compare Datasets node helps compare data from two input streams.

## Node Parameters

1. **Input A Field**: Name of the field to use from input stream A.
2. **Input B Field**: Name of the field to use from input stream B.
3. **Add Fields to Match**: Optional - set up more comparisons.
4. **When There Are Differences**: 
   - **Use Input A Version**: Treat input stream A as the source of truth.
   - **Use Input B Version**: Treat input stream B as the source of truth.
   - **Use a Mix of Versions**: Use different inputs for different fields.
     - **Prefer**: Select either Input A or B as the main source of truth.
     - **For Everything Except**: Enter fields that are exceptions to pull from the other input source.
   - **Include Both Versions**: Include both input streams in the output.

5. **Fuzzy Compare**: When turned on, tolerates small type differences when comparing fields.

## Understand Item Comparison

1. n8n checks if the values of the fields match across both inputs.
2. If the fields match, n8n compares all fields within the items to determine if they are the same or different.

## Node Options

### Fields to Skip Comparing

Enter field names to ignore in the comparison.

### Disable Dot Notation

Toggle to disallow referencing child fields using `parent.child` (default: off).

### Multiple Matches

Choose how to handle duplicate data:
- **Include All Matches** (default)
- **Include First Match Only**.

## Understand the Output

There are four output options:

- **In A only Branch**: Data that occurs only in the first input.
- **Same Branch**: Data that's the same in both inputs.
- **Different Branch**: Data that's different between inputs.
- **In B only Branch**: Data that occurs only in the second output.

## Code Examples

### Input Examples

```json
// Input 1
[
    {
        "person": {
            "name": "Stefan",
            "language": "de"
        }
    },
    {
        "person": {
            "name": "Jim",
            "language": "en"
        }
    },
    {
        "person": {
            "name": "Hans",
            "language": "de"
        }
    }
]

// Input 2
[
    {
        "person": {
            "name": "Sara",
            "language": "de"
        }
    },
    {
        "person": {
            "name": "Jane",
            "language": "en"
        }
    },
    {
        "person": {
            "name": "Harriet",
            "language": "de"
        }
    }
]
```

### Fruit Example

```json
// Input 1
[
    {
        "fruit": {
            "type": "apple",
            "color": "red"
        }
    },
    {
        "fruit": {
            "type": "apple",
            "color": "red"
        }
    },
    {
        "fruit": {
            "type": "banana",
            "color": "yellow"
        }
    }
]

// Input 2
[
    {
        "fruit": {
            "type": "apple",
            "color": "red"
        }
    },
    {
        "fruit": {
            "type": "apple",
            "color": "red"
        }
    },
    {
        "fruit": {
            "type": "banana",
            "color": "yellow"
        }
    }
]
```

----------------------------------------

# Compression Node

Use the Compression node to compress and decompress files. Supports Zip and Gzip formats.

## Node Parameters

### Operations

- **Compress**: Create a compressed file from your input data.
- **Decompress**: Decompress an existing compressed file.

### Compress

- **Input Binary Field(s)**: Name of the fields in the input data that contain the binary files to compress. Use a comma-separated list for multiple files.
- **Output Format**: Choose output format as **Zip** or **Gzip**.
- **File Name**: Name of the created zip file.
- **Put Output File in Field**: Name of the output field to contain the file.

### Decompress

- **Put Output File in Field**: Name of the fields in the input data containing the binary files to decompress. Use a comma-separated list for multiple files.
- **Output Prefix**: Prefix to add to the output file name.

----------------------------------------

# Convert to File Node

The Convert to File node converts input JSON data into a binary format, enabling the output of various file types.

## Operations

- **Convert to CSV**
- **Convert to HTML**
- **Convert to ICS**
- **Convert to JSON**
- **Convert to ODS**
- **Convert to RTF**
- **Convert to Text File**
- **Convert to XLS**
- **Convert to XLSX**
- **Move Base64 String to File**

Node parameters and options depend on the selected operation.

### Convert to CSV 

Parameters:
- **Put Output File in Field**: Field name for output file.
- **File Name**: Specify the generated output file name.
- **Header Row**: Enable if the first row contains header names.

### Convert to HTML 

Parameters:
- **Put Output File in Field**: Field name for output file.
- **File Name**: Specify the generated output file name.
- **Header Row**: Enable if the first row contains header names.

### Convert to ICS 

Parameters:
- **Put Output File in Field**: Field name for output file.
- **Event Title**: Title for the event.
- **Start**: Date and time the event starts.
- **End**: Date and time the event ends.
- **All Day**: Specify whether the event is all day.

Options:
- **File Name**: Output file name.
- **Attendees**: Add attendee details (Name, Email, RSVP).
- **Busy Status**: Set status for applications (Busy, Tentative).
- **Calendar Name**: Name for Apple and Microsoft calendars.
- **Description**: Event description.
- **Geolocation**: Latitude and Longitude for event location.
- **Location**: Venue or location of the event.
- **Recurrence Rule**: Define repeat pattern (RRULE).
- **Organizer**: Organizer's Name and Email.
- **Sequence**: Revision sequence number.
- **Status**: Event status (Confirmed, Cancelled, Tentative).
- **UID**: Unique ID for the event.
- **URL**: URL associated with the event.
- **Use Workflow Timezone**: Option to use workflow's timezone.

### Convert to JSON 

Parameters:
- **Mode**: 
  - **All Items to One File**: Single file for all input items.
  - **Each Item to Separate File**: Individual file for each item.

Options:
- **File Name**: Specify the output file name.
- **Format**: Option to format JSON for readability.
- **Encoding**: Character set for data encoding (default: utf8).

### Convert to ODS 

Parameters:
- **Put Output File in Field**: Field name for output file.

Options:
- **File Name**: Specify the output file name.
- **Compression**: Option to compress the output file size.
- **Header Row**: Enable if headers are present.
- **Sheet Name**: Specify the Sheet Name for the spreadsheet.

### Convert to RTF 

Parameters:
- **Put Output File in Field**: Field name for output file.

Options:
- **File Name**: Specify the output file name.
- **Header Row**: Enable if headers are present.

### Convert to Text File 

Parameters:
- **Text Input Field**: Specify the field containing the string to convert.

Options:
- **File Name**: Specify the output file name.
- **Encoding**: Character set for data encoding (default: utf8).

### Convert to XLS 

Parameters:
- **Put Output File in Field**: Field name for output file.

Options:
- **File Name**: Specify the output file name.
- **Header Row**: Enable if headers are present.
- **Sheet Name**: Specify the Sheet Name for the spreadsheet.

### Convert to XLSX 

Parameters:
- **Put Output File in Field**: Field name for output file.

Options:
- **File Name**: Specify the output file name.
- **Compression**: Option to compress the output file size.
- **Header Row**: Enable if headers are present.
- **Sheet Name**: Specify the Sheet Name for the spreadsheet.

### Move Base64 String to File 

Parameters:
- **Base64 Input Field**: Specify the field containing the Base64 string.

Options:
- **File Name**: Specify the output file name.
- **MIME Type**: Specify the MIME type of the output file.

----------------------------------------

# Crypto Node in n8n

Use the Crypto node to encrypt data in workflows.

## Actions
- **Generate** a random string
- **Hash** a text or file in a specified format
- **Hmac** a text or file in a specified format
- **Sign** a string using a private key

## Node Parameters

### Generate Parameters
- **Property Name**: Name of the property to write the random string to.
- **Type**: Select encoding type:
  - **ASCII**
  - **BASE64**
  - **HEX**
  - **UUID**

### Hash Parameters
- **Type**: Select the hash type:
  - **MD5**
  - **SHA256**
  - **SHA3-256**
  - **SHA3-384**
  - **SHA3-512**
  - **SHA385**
  - **SHA512**
- **Binary File**: Enable if hashing data from a binary file.
  - **Value**: Enter the value to hash if **Binary File** is off.
  - **Binary Property Name**: Name of the binary property if **Binary File** is on.
- **Property Name**: Name of the property to write the hash to.
- **Encoding**: Select encoding type:
  - **BASE64**
  - **HEX**

### Hmac Parameters
- **Binary File**: Enable if encrypting data from a binary file.
  - **Value**: Enter the value to encrypt if **Binary File** is off.
  - **Binary Property Name**: Name of the binary property if **Binary File** is on.
- **Type**: Select encryption type:
  - **MD5**
  - **SHA256**
  - **SHA3-256**
  - **SHA3-384**
  - **SHA3-512**
  - **SHA385**
  - **SHA512**
- **Property Name**: Name of the property to write the hash to.
- **Secret**: Secret or secret key for decoding.
- **Encoding**: Select encoding type:
  - **BASE64**
  - **HEX**

### Sign Parameters
- **Value**: Value to sign.
- **Property Name**: Name of the property to write the signed value to.
- **Algorithm Name or ID**: Choose from the list or specify an ID using an expression.
- **Encoding**: Select encoding type:
  - **BASE64**
  - **HEX**
- **Private Key**: Private key used for signing the string.

----------------------------------------

# Date & Time Node

The Date & Time node manipulates date and time data and converts it to different formats.

## Timezone Settings

- Workflow timezone if set.
- n8n instance timezone if workflow timezone isn't set (default: `America/New York`).

## Operations

- **Add to a Date**: Add a specified amount of time to a date.
- **Extract Part of a Date**: Extract part of a date (year, month, day, etc.).
- **Format a Date**: Transform a date to a new format.
- **Get Current Date**: Get the current date and optionally include the current time.
- **Get Time Between Dates**: Calculate the time between two dates.
- **Round a Date**: Round a date to the nearest unit.
- **Subtract From a Date**: Subtract a specified amount of time from a date.

## Operation Details

### Add to a Date

#### Parameters
- **Date to Add To**: Date to change.
- **Time Unit to Add**: Select time unit for the **Duration**.
- **Duration**: Number of time units to add.
- **Output Field Name**: Field name for the new date.

### Extract Part of a Date

#### Parameters
- **Date**: Date to extract from.
- **Part**: Select part to extract (Year, Month, Day, etc.).
- **Output Field Name**: Field name for extracted part.

### Format a Date

#### Parameters
- **Date**: Date to format.
- **Format**: Selected format (e.g., MM/DD/YYYY, YYYY-MM-DD).
- **Output Field Name**: Field name for formatted date.

### Get Current Date

#### Parameters
- **Include Current Time**: Choice to include current time or set to midnight.
- **Output Field Name**: Field name for current date.

### Get Time Between Dates

#### Parameters
- **Start Date**: Earlier date.
- **End Date**: Later date.
- **Units**: Select units for calculation (Year, Month, Day, etc.).
- **Output Field Name**: Field name for calculated time.

### Round a Date

#### Parameters
- **Date**: Date to round.
- **Mode**: Round Down or Round Up.
- **To Nearest**: Selected unit (Year, Month, Day, etc.).
- **Output Field Name**: Field name for rounded date.

### Subtract From a Date

#### Parameters
- **Date to Subtract From**: Date to subtract from.
- **Time Unit to Subtract**: Select unit for **Duration**.
- **Duration**: Amount of time units to subtract.
- **Output Field Name**: Field name for resultant date.

## Supported Formats

n8n supports all date formats from Luxon. Tokens used are case-sensitive.

----------------------------------------

# Debug Helper

Use the Debug Helper node to trigger different error types or generate random datasets to help test n8n workflows.

## Operations

Define the operation by selecting the **Category**:

- **Do Nothing**: Don't do anything.
- **Throw Error**: Throw an error with the specified type and message.
- **Out Of Memory**: Generate a specific memory size to simulate being out of memory.
- **Generate Random Data**: Generate some random data in a selected format.

## Node Parameters

The node parameters depend on the **Category** selected.

### Throw Error

- **Error Type**: Select the type of error to throw. Options:
  - **NodeApiError**
  - **NodeOperationError**
  - **Error**
- **Error Message**: Enter the error message to throw.

### Out Of Memory

- **Memory Size to Generate**: Enter the approximate amount of memory to generate.

### Generate Random Data

- **Data Type**: Choose the type of random data:
  - **Address**
  - **Coordinates**
  - **Credit Card**
  - **Email**
  - **IPv4**
  - **IPv6**
  - **MAC**
  - **Nanoids**:
    - **Nanoid Alphabet**: The alphabet for generating the nanoids.
    - **Nanoid Length**: Length of each nanoid.
  - **URL**
  - **User Data**
  - **UUID**
  - **Version**
- **Seed**: Specific seed for consistent data generation. Leave empty for random generation.
- **Number of Items to Generate**: Enter the quantity of random items to generate.
- **Output as Single Array**: Choose to generate the data as a single array (on) or multiple items (off).

----------------------------------------

# Edit Image

Use the Edit Image node to manipulate and edit images.

## Dependencies
1. Install [GraphicsMagick](http://www.graphicsmagick.org/README.html) if not running on Docker.
2. Use a node like [Read/Write Files from Disk](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/) or [HTTP Request](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to pass the image file as a data property.

## Operations
- **Blur**
- **Border**
- **Composite**
- **Create**
- **Crop**
- **Draw**
- **Get Information**
- **Multi Step**
- **Resize**
- **Rotate**
- **Shear**
- **Text**
- **Transparent**

## Node Parameters

### Blur parameters
- **Property Name**: Name of the binary property with image data.
- **Blur**: Strength of the blur (0-1000).
- **Sigma**: Stigma for the blur (0-1000).

### Border parameters
- **Property Name**: Name of the binary property with image data.
- **Border Width**: Width of the border.
- **Border Height**: Height of the border.
- **Border Color**: Color for the border (hex).

### Composite parameters
- **Property Name**: Name of the binary property with base image data.
- **Composite Image Property**: Name of the binary property with composite image data.
- **Operator**: Select from: Add, Atop, Bumpmap, Copy, Difference, etc.
- **Position X**: x-axis position of the composite image.
- **Position Y**: y-axis position of the composite image.

### Create parameters
- **Property Name**: Name of the binary property with image data.
- **Background Color**: Background color for the image (hex).
- **Image Width**: Width of the image.
- **Image Height**: Height of the image.

### Crop parameters
- **Property Name**: Name of the binary property with image data.
- **Width**: Width to crop to.
- **Height**: Height to crop to.
- **Position X**: x-axis position to start cropping from.
- **Position Y**: y-axis position to start cropping from.

### Draw parameters
- **Property Name**: Name of the binary property with image data.
- **Primitive**: Shape to draw (Circle, Line, Rectangle).
- **Color**: Color for the primitive (hex).
- **Start Position X**: Starting x-axis position for drawing.
- **Start Position Y**: Starting y-axis position for drawing.
- **End Position X**: Ending x-axis position for drawing.
- **End Position Y**: Ending y-axis position for drawing.
- **Corner Radius**: Corner radius for the drawn primitive.

### Get Information parameters
- **Property Name**: Name of the binary property with image data.

### Multi Step parameters
- **Property Name**: Name of the binary property with image data.
- **Operations**: List of operations to perform.

### Resize parameters
- **Property Name**: Name of the binary property with image data.
- **Width**: New width for the image.
- **Height**: New height for the image.
- **Option**: Select resizing option (Ignore Aspect Ratio, Maximum Area, etc.).

### Rotate parameters
- **Property Name**: Name of the binary property with image data.
- **Rotate**: Degrees to rotate (–360 to 360).
- **Background Color**: Background color for rotation (hex).

### Shear parameters
- **Property Name**: Name of the binary property with image data.
- **Degrees X**: Degrees to shear from the x-axis.
- **Degrees Y**: Degrees to shear from the y-axis.

### Text parameters
- **Property Name**: Name of the binary property with image data.
- **Text**: Text to write on the image.
- **Font Size**: Font size for the text.
- **Font Color**: Color for the text (hex).
- **Position X**: Starting x-axis position for the text.
- **Position Y**: Starting y-axis position for the text.
- **Max Line Length**: Maximum characters per line before line break.

### Transparent parameters
- **Property Name**: Name of the binary property with image data.
- **Color**: Color to make transparent (hex).

## Node Options
- **File Name**: Filename of the output file.
- **Format**: Output file format (bmp, gif, jpeg, png, tiff, WebP).

The **Text** operation includes **Font Name or ID** option. Select from dropdown or specify ID using an expression.

----------------------------------------

# Email Trigger (IMAP) Node

Use the IMAP Email node to receive emails using an IMAP email server. This node is a trigger node.

## Credential

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/imap/).

## Operations

- **Receive an email**

## Node Parameters

### Credential to Connect With

Select or create an IMAP credential to connect to the server.

### Mailbox Name

Enter the mailbox from which you want to receive emails.

### Action

Choose whether to mark the email as read when n8n receives it. Options:
- **None**: Leave it marked unread.
- **Mark as Read**: Mark it as read.

### Download Attachments

This toggle controls whether to download email attachments (on) or not (off). Only set if necessary to avoid increased processing.

### Format

Choose the format to return the message:
- **RAW**: Full email message data with body content as a base64url encoded string.
- **Resolved**: Full email with all data resolved and attachments saved as binary data.
- **Simple**: Full email; not recommended if inline attachments are needed.

## Node Options

### Custom Email Rules

Enter custom email fetching rules to determine which emails the node fetches. Refer to [node-imap's search function criteria](https://github.com/mscdex/node-imap) for more information.

### Force Reconnect Every Minutes

Set an interval in minutes to force reconnection.

----------------------------------------

# Error Trigger Node

The Error Trigger node is used to create error workflows that get triggered when a linked workflow fails. It collects details about the failed workflow and executes the error workflow.

## Usage

1. Create a new workflow with the Error Trigger as the first node.
2. Name the workflow (e.g., `Error Handler`).
3. Click **Save**.
4. In the workflow to which you want to link this error workflow:
   1. Click **Options** > **Settings**.
   2. In **Error workflow**, select the previously created error workflow (e.g., `Error Handler`).
   3. Click **Save**.

**Notes:**
- The workflow using the Error Trigger node does not need to be activated.
- By default, workflows containing the Error Trigger node use themselves as the error workflow.
- Error workflows cannot be tested during manual workflow executions. They only trigger upon automatic workflow errors.

## Error Data

The default error data received by the Error Trigger is structured as follows:

### Execution Information
```json
[
	{
		"execution": {
			"id": "231",
			"url": "https://n8n.example.com/execution/231",
			"retryOf": "34",
			"error": {
				"message": "Example Error Message",
				"stack": "Stacktrace"
			},
			"lastNodeExecuted": "Node With Error",
			"mode": "manual"
		},
		"workflow": {
			"id": "1",
			"name": "Example Workflow"
		}
	}
]
```

**Exceptions:**
- `execution.id` and `execution.url` are not present if the error occurs in the trigger node of the main workflow as it doesn’t execute.
- `execution.retryOf` is only available if the execution is a retry of a failed execution.

If the error originates from the trigger node of the main workflow, the data sent to the error workflow is different:

### Trigger Information
```json
{
  "trigger": {
    "error": {
      "context": {},
      "name": "WorkflowActivationError",
      "cause": {
        "message": "",
        "stack": ""
      },
      "timestamp": 1654609328787,
      "message": "",
      "node": {
        // Additional details
      }
    },
    "mode": "trigger"
  },
  "workflow": {
    "id": "",
    "name": ""
  }
}
```

----------------------------------------

# Evaluation Node

The Evaluation node performs operations related to evaluations to validate AI workflow reliability. It can conditionally execute logic based on whether the workflow is under evaluation, write evaluation outcomes to a Google Sheets dataset, or log scoring metrics for evaluation performance.

## Credentials

The Evaluation node's **Set Outputs** operation requires Google Sheets credentials. 

## Operations

The Evaluation node offers the following operations:

- **Set Outputs**: Write the results of an evaluation back to a Google Sheet dataset.
- **Set Metrics**: Record metrics scoring the evaluation performance to n8n's **Evaluations** tab.
- **Check If Evaluating**: Branches the workflow execution logic based on whether the current execution is an evaluation.

### Set Outputs

**Parameters**:
- **Credential to connect with**: Select existing Google Sheets credentials.
- **Document Containing Dataset**: Choose the spreadsheet to write evaluation results to. Options include:
  - **From list**: Select from a dropdown.
  - **By URL**: Enter the spreadsheet URL.
  - **By ID**: Enter the `spreadsheetId` found in a Google Sheets URL: `https://docs.google.com/spreadsheets/d/spreadsheetId/edit#gid=0`.
- **Sheet Containing Dataset**: Choose the sheet for evaluation results. Options include:
  - **From list**: Select from a dropdown.
  - **By URL**: Enter the sheet URL.
  - **By ID**: Enter the `sheetId` found in a Google Sheets URL: `https://docs.google.com/spreadsheets/d/aBC-123_xYz/edit#gid=sheetId`.
  - **By Name**: Enter the sheet title.

**Outputs Section**: 
- **Name**: The Google Sheet column name to write evaluation results.
- **Value**: The value to write.

### Set Metrics

**Parameters**:
- **Metrics to Return**: Define the metrics to record and track for evaluations.

For each metric:
- **Name**: The name for the metric.
- **Value**: The numeric value to record.

### Check If Evaluating

This operation has no parameters and provides branching output connectors for conditional execution based on the evaluation status.

----------------------------------------

# Evaluation Trigger Node

The Evaluation Trigger node is used to validate AI workflow reliability by processing an evaluation dataset from Google Sheets, sending items through the workflow sequentially.

## Requirements
- Requires Google Sheets for the test dataset.
- Configure a Google Sheets credential.

## Parameters

- **Credential to connect with**: Select/create Google Sheets credentials.
- **Document Containing Dataset**: Choose the spreadsheet document with the sheet containing the test dataset.
  - Options: 
    - From list
    - By URL
    - By ID (find `spreadsheetId` in Google Sheets URL: `https://docs.google.com/spreadsheets/d/spreadsheetId/edit#gid=0`).
- **Sheet Containing Dataset**: Choose the sheet containing the test dataset.
  - Options: 
    - From list
    - By URL
    - By ID (find `sheetId` in Google Sheets URL: `https://docs.google.com/spreadsheets/d/aBC-123_xYz/edit#gid=sheetId`).
    - By Name
- **Limit Rows**: Option to limit the number of rows to process.
  - **Max Rows to Process**: Specify maximum rows to read when limit is enabled.

## Filters

Optionally filter the dataset based on column values.
- **Column**: Select a sheet column to filter. Options: 
  - From list
  - By ID (specify ID using an expression).
- **Value**: Specify the column value to filter by. Only rows with the given value for the selected column will be processed.

----------------------------------------

# Execute Command Node

The Execute Command node runs shell commands on the host machine that runs n8n. It executes the command in the default shell of the host machine (e.g., `cmd` on Windows, `zsh` on macOS). If n8n is running with Docker, the command will run in the n8n container instead of the Docker host. This node is not available on n8n Cloud.

## Node Parameters

### Execute Once
Choose whether the node executes only once (enabled) or once for every input item (disabled).

### Command
Enter the command to execute on the host machine. 

#### Running Multiple Commands
You can run multiple commands in the Execute Command node using one of the following methods:

- Separate commands by `&&` on one line:
  ```
  cd bin && ls
  ```

- Place each command on a new line:
  ```
  cd bin
  ls
  ```

#### Running cURL Commands
To execute a cURL command, create a Docker image based on the existing n8n image. Install the curl package with the following steps:

1. Create a file named `Dockerfile`.
2. Add the following code to the Dockerfile:
   ```
   FROM docker.n8n.io/n8nio/n8n
   USER root
   RUN apk --update add curl
   USER node
   ```
3. Build the Docker image with:
   ```
   docker build -t n8n-curl
   ```
4. Replace the Docker image used before with `n8n-curl`.
5. Run the newly created Docker image to execute commands using the Execute Command node.

## Common Issues
Refer to the Common Issues documentation for solutions and troubleshooting.

----------------------------------------

# Execute Sub-workflow

## Node Parameters

### Source
- **Database**: Load the workflow from the database by ID.
  - **From list**: Select the workflow from a list of workflows available to your account.
  - **Workflow ID**: Enter the workflow ID found in the workflow's URL.
- **Local File**: Load the workflow from a locally saved JSON file.
  - **Workflow Path**: Enter the path to the local JSON workflow file.
- **Parameter**: Load the workflow from a parameter.
  - **Workflow JSON**: Enter the JSON code to execute.
- **URL**: Load the workflow from a URL.
  - **Workflow URL**: Enter the URL of the workflow.

### Workflow Inputs
- If using **database** and **From list**, input items display for filling or mapping.
- Optionally remove requested input items (receive `null` as value).
- Enable **Attempt to convert types** to convert data to requested types.

### Mode
- **Run once with all items**: Pass all input items into a single execution of the node.
- **Run once for each item**: Execute the node for each input item.

## Node Options
- **Wait for Sub-Workflow Completion**: Control whether to wait for the sub-workflow’s completion before continuing.

## Set Up and Use a Sub-workflow

### Create the Sub-workflow
1. Create a new workflow.
2. Optionally create a sub-workflow from an existing parent workflow using the **Execute Sub-workflow** node and selecting **Create a sub-workflow**.
3. Configure which workflows can call the sub-workflow and define input data modes.

### Call the Sub-workflow
1. Open the workflow where you want to call the sub-workflow.
2. Add the **Execute Sub-workflow** node.
3. Specify the sub-workflow (by ID, local file, JSON parameter, or URL).
4. Fill in required input items defined by the sub-workflow.
5. Save your workflow.

## How Data Passes Between Workflows
- Data is passed from the **Workflow A**’s Execute Sub-workflow node to the sub-workflow's Execute Sub-workflow Trigger node, and returned back to Workflow A.

----------------------------------------

# Execute Sub-workflow Trigger Node

## Core Concept
The Execute Sub-workflow Trigger node is used to start a workflow in response to another workflow. It should be the first node in the workflow, enabling the reuse of workflows or breaking large workflows into smaller components.

## Usage
This node runs in response to a call from the Execute Sub-workflow or Call n8n Workflow Tool nodes.

### Create the Sub-workflow
1. Create a new workflow.
2. Optionally:
   - Use the Execute Sub-workflow node to create a sub-workflow from an existing parent workflow.
   - Select **Database** and **From list** options and choose **Create a sub-workflow**.
   - Extract nodes using Sub-workflow conversion in the context menu.
3. **Optional**: Configure call settings:
   - Navigate to the **Options** menu > **Settings**.
   - Change the **This workflow can be called by** setting.
   - Add the Execute Sub-workflow trigger node.
   - Set the **Input data mode**:
     - **Define using fields below**
     - **Define using JSON example**
     - **Accept all data**
4. Add functionality with other nodes as needed.
5. Save the sub-workflow.

**Note**: The sub-workflow must not contain errors. To load data, follow the setup steps to load data from previous executions and adjust the Input data mode as necessary.

### Call the Sub-workflow
1. Open the parent workflow.
2. Add the **Execute Sub-workflow** node.
3. Set the sub-workflow you want to call by ID or URL.
4. Fill in the required input items defined by the sub-workflow.
5. Save your workflow.

## Data Flow
1. The Execute Sub-workflow node in the parent workflow passes data to the Execute Sub-workflow Trigger node in the sub-workflow.
2. The last node of the sub-workflow returns data back to the Execute Sub-workflow node in the parent workflow.

## Best Practices
- Ensure there are no errors in the sub-workflow setup to allow successful triggering.
- Use **Accept all data** mode for flexibility or define specific input items for better structure.
- Test the workflow execution flow by using the **View sub-execution** link to monitor the process between parent and sub-workflows.

----------------------------------------

# Execution Data

Use the Execution Data node to save metadata for workflow executions, enabling you to search by this data in the Executions list. You can retrieve custom execution data during workflow execution using the Code node.

## Operations

- **Save Execution Data for Search**

## Data to Save

Add a **Saved Field** for each key/value pair of metadata you'd like to save.

## Limitations

The Execution Data node has the following restrictions when storing execution metadata:

- `key`: limited to 50 characters
- `value`: limited to 512 characters

If either the `key` or `value` exceeds these limitations, n8n truncates to their maximum length and outputs a log entry.

----------------------------------------

# Extract From File

The Extract From File node extracts data from a binary format file and converts it to JSON for workflow manipulation. For converting JSON back to a binary file type, use the Convert to File node.

## Operations

Select the format of the source file to extract data from:

- **Extract From CSV**: Extracts data from CSV files.
- **Extract From HTML**: Extracts data from HTML files.
- **Extract From JSON**: Extracts JSON data from a binary file.
- **Extract From ICS**: Extracts fields from iCalendar format files.
- **Extract From ODS**: Extracts fields from ODS spreadsheet files.
- **Extract From PDF**: Extracts fields from PDF files.
- **Extract From RTF**: Extracts fields from RTF files.
- **Extract From Text File**: Extracts fields from standard text files.
- **Extract From XLS**: Extracts fields from older Microsoft Excel files.
- **Extract From XLSX**: Extracts fields from Microsoft Excel files.
- **Move File to Base64 String**: Converts binary data to a base64 format.

## Example Workflow

A Webhook node triggers the workflow. Upon receiving a CSV file, the Extract From File node outputs data as JSON 'row' objects.

### Receiving Files with a Webhook
In the Webhook Node, enable **Raw body** in the Add Options to output the binary file expected by the following node.

## Node Parameters

### Input Binary Field
Enter the name of the field containing the binary file. Default is 'data'.

### Destination Output Field
Enter the name of the output field that will contain the extracted data. This parameter is available for the following operations:

- Extract From JSON
- Extract From ICS
- Extract From Text File
- Move File to Base64 String

----------------------------------------

## Filter Node Documentation

### Core Concepts
The Filter node in n8n processes items based on specified conditions. An item is passed to the next node if it meets the defined conditions; otherwise, it is omitted from the output.

### Node Parameters
- **Conditions**: Create filter comparison conditions. 
  - Use the data type dropdown to select the data type and comparison operation.
  - Example: For dates after a particular date, select **Date & Time > is after**.
  - Additional conditions can be added by selecting **Add condition**.

### Combining Conditions
You can configure conditions to keep items based on:
- **All conditions**: Use **AND** between conditions.
- **Any conditions**: Use **OR** between conditions.
- Note: Mixed AND and OR rules cannot be used.

### Node Options
- **Ignore Case**: Whether to ignore letter case (enabled) or be case sensitive (disabled).
- **Less Strict Type Validation**: Enables n8n to attempt to convert value types based on the operator (enabled) or not (disabled). Useful when encountering a "wrong type" error.

### Available Data Type Comparisons

#### 1. String
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- contains
- does not contain
- starts with
- does not start with
- ends with
- does not end with
- matches regex
- does not match regex

#### 2. Number
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- is greater than
- is less than
- is greater than or equal to
- is less than or equal to

#### 3. Date & Time
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- is after
- is before
- is after or equal to
- is before or equal to

#### 4. Boolean
- exists
- does not exist
- is empty
- is not empty
- is true
- is false
- is equal to
- is not equal to

#### 5. Array
- exists
- does not exist
- is empty
- is not empty
- contains
- does not contain
- length equal to
- length not equal to
- length greater than
- length less than
- length greater than or equal to
- length less than or equal to

#### 6. Object
- exists
- does not exist
- is empty
- is not empty

----------------------------------------

# n8n Form Node Documentation

## Overview
Use the n8n Form node to create user-facing forms with multiple steps. You must start the workflow with the n8n Form Trigger.

## Setting Up the Node

### Set Default Selections with Query Parameters
- Query parameters can be used to set initial values for fields in production mode.
- Format example URL for initial field values:
  ```
  https://my-account.n8n.cloud/form/my-form?email=jane.doe%40example.com&name=Jane%20Doe
  ```

### Displaying Custom HTML
- Add a **Custom HTML** field to incorporate arbitrary HTML in the form.
- Custom HTML content is read-only by default.

### Including Hidden Fields
- Use **Hidden Field** form element for fields that won't display to users.
- Pass values for hidden fields using query parameters.

### Defining the Form Using JSON
Define form fields with a JSON array of objects:
```json
[
    {
        "fieldLabel": "Date Field",
        "fieldType": "date",
        "formatDate": "mm/dd/yyyy",
        "requiredField": true
    },
    {
        "fieldLabel": "Dropdown Options",
        "fieldType": "dropdown",
        "fieldOptions": {
            "values": [
                {"option": "option 1"},
                {"option": "option 2"}
            ]
        },
        "requiredField": true
    },
    // Additional fields omitted for brevity
]
```

### Form Ending
- Use **Form Ending** to show a completion page, redirect, or display HTML/text.
  - Options: **Show Completion Screen**, **Redirect to URL**, or **Show Text**.

### Forms with Branches
- Form workflows executing mutually exclusive branches will behave correctly by showing one branch according to submitted data.
- Multiple branches executed sequentially will ignore all Form Ending nodes except for the last one executed.

## Node Options
- **Form Title**: Title for the form displayed on the webpage.
- **Form Description**: Description displayed beneath the main title.
- **Button Label**: Label for the submit button.

## Running the Node

### Build and Test Workflows
Use the **Test URL** in the n8n Form Trigger during development.

### Production Workflows
Switch to the n8n Form Trigger's **Production URL** when ready to activate the workflow.

## Templates and Examples
- View workflow examples and templates tailored for specific use cases (details omitted for brevity).

----------------------------------------

# n8n Form Trigger Node Documentation

## Core Concept
The n8n Form trigger starts a workflow upon a user submitting a form, taking input data directly from the form. It generates the web page for the form automatically.

## Production and Testing Workflows
- **Test URL**: Use this URL during development to view incoming data in the editor UI.
  - **Test Step**: Opens the form without running the entire workflow.
  - **Test Workflow**: Opens the form and runs the complete workflow upon submission.
- **Production URL**: Use this once the workflow is ready. Activates the workflow for automatic execution upon form submission, but does not display incoming data in the editor interface.

## Setting Default Selections with Query Parameters
- Initial values for fields can be set using query parameters appended to the Form Trigger URL. These parameters apply to all pages within the form and are only available in production mode.
- **Percent-encode** field names or values using tools like URL Encode/Decode.
  
Example:
- Production URL: `https://my-account.n8n.cloud/form/my-form`
- Query parameters: `?email=jane.doe%40example.com&name=Jane%20Doe`

## Node Parameters
### Authentication
- **Basic Auth**
- **None**

**Using Basic Auth**:
- Requires a **Username** and **Password** for the service being accessed.

### Form URLs
- **Test URL**: Registered when using Test Step or Test Workflow.
- **Production URL**: Registered when workflow is activated.

### Form Path
- Set a custom slug for the form.

### Form Title
- Set the title displayed on the web page and as the main `h1` title.

### Form Description
- Description displayed below the main title, can include line breaks using `\n` or `<br>`.

### Form Elements
- **Field Label**: The label for the input field.
- **Element Type (Options)**:
  - **Custom HTML**
  - **Date**
  - **Dropdown List**
  - **Email**
  - **File**
  - **Hidden Field**
  - **Number**
  - **Password**
  - **Text**
  - **Textarea**
- **Required Field**: Toggle to require user input.

### Respond When
- Options for sending responses after form submission:
  - **Form Is Submitted**: Immediate response upon submission.
  - **Workflow Finishes**: Response sent after workflow completion.

## Node Options
- **Append n8n Attribution**: Hide or display the n8n credit footer.
- **Form Response**: 
  - Respond With **Form Submitted Text** or **Redirect URL**.
- **Ignore Bots**: Option to ignore bot requests.
- **Use Workflow Timezone**: Use workflow-specific timezone instead of UTC for timestamps.

## Templates and Examples
- Access integration templates and workflow examples on the n8n website.

----------------------------------------

# FTP Node

The FTP node facilitates access and file uploads to FTP or SFTP servers.

## Credentials
To connect to an SFTP server, use an SFTP credential. For more details on authentication, refer to the FTP credentials documentation.

## Operations
- **Delete**: Remove a file or folder.
- **Download**: Fetch a file from the server.
- **List**: Retrieve folder content.
- **Rename**: Change the name or location of a file or folder.
- **Upload**: Send a file to the server.

### Uploading Files
Use an additional node, such as the Read/Write Files from Disk node or the HTTP Request node, to attach a file for upload as a data property.

## Delete Operation
- **Parameter**:
  - **Path**: The remote path to connect to.
- **Options**:
  - **Folder**: If enabled, allows deletion of both folders and files.
  - **Recursive**: If enabled, deletes all files and directories within the specified folder.

## Download Operation
- **Parameters**:
  - **Path**: The remote path to connect to.
  - **Put Output File in Field**: Name the output binary field for the retrieved file.

## List Operation
- **Parameters**:
  - **Path**: The remote path to connect to.
  - **Recursive**: Option to return all directories/objects found recursively.

## Rename Operation
- **Parameters**:
  - **Old Path**: The existing path of the file to rename.
  - **New Path**: The new path for the renamed file.
- **Options**:
  - **Create Directories**: If enabled, the node will create the destination directory if it does not exist.

## Upload Operation
- **Parameters**:
  - **Path**: The remote path to connect to.
  - **Binary File**: Select whether to upload a binary file or text content.
    - **Input Binary Field**: If uploading a binary file, specify the input binary field name.
    - **File Content**: If not uploading a binary file, enter the file's text content.

### Uploading Files
Utilize an additional node like the Read/Write Files from Disk node or the HTTP Request node to attach a file for upload as a data property.

## Templates and Examples
- Working with Excel spreadsheet files (xls & xlsx)
- Download a file and upload it to an FTP server

Refer to the n8n website for more templates and integrations.

----------------------------------------

# GraphQL Node Documentation

## Core Concepts

GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data.

## Node Parameters

### Authentication

Select the type of authentication to use. If you select anything other than **None**, the **Credential for** parameter appears for you to select an existing or create a new authentication credential for that authentication type.

### HTTP Request Method

Select the underlying HTTP Request method the node should use. Choose from:
- **GET**
- **POST**: If you select this method, you'll also need to select the **Request Format** the node should use for the query payload. Choose from:
  - **GraphQL (Raw)**
  - **JSON**

### Endpoint

Enter the GraphQL Endpoint you'd like to hit.

### Ignore SSL Issues

When you turn on this control, n8n ignores SSL certificate validation failure.

### Query

Enter the GraphQL query you want to execute. Refer to relevant resources for information on writing your query.

### Response Format

Select the format you'd like to receive query results in. Choose between:
- **JSON**
- **String**: If you select this format, enter a **Response Data Property Name** to define the property the string is written to.

## Headers

Enter any **Headers** you want to pass as part of the query as **Name** / **Value** pairs.

----------------------------------------

# HTML Node in n8n

The HTML node provides operations to help you work with HTML in n8n.

## Operations

- **Generate HTML template**: Create an HTML template to output data as HTML. Supports:
  - Standard HTML
  - CSS in `<style>` tags
  - JavaScript in `<script>` tags (not executed)
  - Expressions, wrapped in `{{}}`

- **Extract HTML content**: Extract contents from an HTML-formatted source (JSON or binary file `.html`).
  
- **Convert to HTML Table**: Converts data from another node into an HTML table.

## Generate HTML Template

You can include:

- Standard HTML
- CSS in `<style>` tags
- JavaScript in `<script>` tags (not executed)
- Expressions, wrapped in `{{}}`

## Extract HTML Content

### Parameters

#### Source Data
- **JSON**: Enter the **JSON Property** with the input containing the HTML.
- **Binary**: Enter the **Input Binary Field** with the input containing the HTML.

#### Extraction Values
- **Key**: Key for the extracted value.
- **CSS Selector**: Selector to search for.
- **Return Value**: 
  - **Attribute**: Value of an attribute (specify the **Attribute** name).
  - **HTML**: The HTML of the selected element.
  - **Text**: The text content of the element (can include **Skip Selectors**).
  - **Value**: Value of an input, select, or textarea.
- **Return Array**: Option to return as an array or single string.

### Options
- **Trim Values**: Remove spaces and newlines from values.
- **Clean Up Text**: Remove leading/trailing whitespaces and condense multiple whitespaces.

## Convert to HTML Table

### Options
- **Capitalize Headers**: Capitalize the table's headers.
- **Custom Styling**: Use custom styling for the table.
- **Caption**: Caption for the table.
- **Table Attributes**: Attributes for the `<table>`.
- **Header Attributes**: Attributes for header `<th>`.
- **Row Attributes**: Attributes for table rows `<tr>`.
- **Cell Attributes**: Attributes for table cells `<td>`.

----------------------------------------

# Git Node in n8n

**Git**: A free and open-source distributed version control system for projects.

## Credentials
Authentication information can be found in the Git credentials documentation.

## Operations

- **Add**: Adds a file or folder to commit. Executes `git add`.
- **Add Config**: Adds configuration property. Executes `git config`.
- **Clone**: Clones a repository. Executes `git clone`.
- **Commit**: Commits files or folders. Executes `git commit`.
- **Fetch**: Fetches from a remote repository. Executes `git fetch`.
- **List Config**: Lists current configuration. Executes `git config`.
- **Log**: Retrieves commit history. Executes `git log`.
- **Pull**: Pulls from a remote repository. Executes `git pull`.
- **Push**: Pushes to a remote repository. Executes `git push`.
- **Push Tags**: Pushes tags to a remote repository. Executes `git push --tags`.
- **Status**: Returns the status of the current repository. Executes `git status`.
- **Tag**: Creates a new tag. Executes `git tag`.
- **User Setup**: Configures user settings.

### Add Parameters
- **Repository Path**: Local path of the git repository.
- **Paths to Add**: Comma-separated list of paths of files or folders.

### Add Config Parameters
- **Repository Path**: Local path of the git repository.
- **Key**: Name of the key to set.
- **Value**: Value of the key to set.
- **Mode**: Set or Append setting in the local config.

### Clone Parameters
- **Repository Path**: Local path of the git repository.
- **Authentication**: Authenticate credentials or none.
- **New Repository Path**: Local path for the cloned repository.
- **Source Repository**: URL or path of the repository to clone.

### Commit Parameters
- **Repository Path**: Local path of the git repository.
- **Message**: Commit message.
- **Paths to Add**: Comma-separated list of specifc "added" files and folders.

### Log Parameters
- **Repository Path**: Local path of the git repository.
- **Return All**: Toggle to return all results.
- **Limit**: Maximum number of results when **Return All** is off.
- **File**: Path of a file or folder to get history.

### Push Parameters
- **Repository Path**: Local path of the git repository.
- **Authentication**: Authenticate credentials or none.
- **Target Repository**: URL or path of the repository to push to.

### Tag Parameters
- **Repository Path**: Local path of the git repository.
- **Name**: Name of the tag to create.

----------------------------------------

# HTTP Request Node

The HTTP Request node in n8n allows you to make HTTP requests to query data from any app or service with a REST API. It can be used standalone or attached to an AI agent as a tool.

## Node Parameters

### Method
Select the method for the request:
- DELETE
- GET
- HEAD
- OPTIONS
- PATCH
- POST
- PUT

### URL
Enter the endpoint you want to use.

### Authentication
- **Predefined Credentials**: Recommended for ease of use. 
  - Custom operations without extra setup can utilize Predefined Credential Type.
- **Generic Credentials**: For unsupported integrations, manual configuration is required.
  - Authentication methods available:
    - Basic auth
    - Custom auth
    - Digest auth
    - Header auth
    - OAuth1 API
    - OAuth2 API
    - Query auth

### Send Query Parameters
Enable this to filter HTTP requests. Specify query parameters:
- **Using Fields Below**: Name/Value pairs.
- **Using JSON**: Define parameters in JSON format.

### Send Headers
Enable to send headers with your request. Specify headers:
- **Using Fields Below**: Name/Value pairs.
- **Using JSON**: Define headers in JSON format.

### Send Body
Enable to send a body with your API request. Select the **Body Content Type**:
- **Form URLencoded**: Send as `application/x-www-form-urlencoded`.
- **Form-Data**: Send as `multipart/form-data`.
- **JSON**: Send as JSON.
- **Raw**: Send raw data.

## Node Options

### Array Format in Query Parameters
Control the format for arrays:
- No Brackets: `foo=bar&foo=qux`
- Brackets Only: `foo[]=bar&foo[]=qux`
- Brackets with Indices: `foo[0]=bar&foo[1]=qux`

### Batching
Control large input items:
- **Items per Batch**: Number of items in each batch.
- **Batch Interval**: Time between batches in milliseconds.

### Ignore SSL Issues
Turn on to allow downloads even if SSL validation fails.

### Lowercase Headers
Choose whether to lowercase header names.

### Redirects
Choose to follow redirects and set maximum redirects.

### Response
Set details about the expected API response:
- Include response headers and status.
- Response format options: Autodetect, File, JSON, Text.

### Pagination
Configure settings for paginated results:
- Pagination mode options: Off, Update a Parameter, Response Contains Next URL.

### Proxy
Specify an HTTP proxy for requests.

### Timeout
Set how long to wait for response headers.

## Import curl Command
Use curl commands to configure the HTTP Request node by importing them directly.

## Tool-only Options
Available when attached to an AI agent:
### Optimize Response
Options to optimize the amount of data passed to the LLM depending on response type: JSON, HTML, Text. 

## Common Issues
Refer to the documentation for common questions or issues and suggested solutions.

----------------------------------------

# If Node Documentation

## Core Concepts
The If node is used to split a workflow conditionally based on comparison operations.

## Add Conditions
- Select a data type and comparison operation for your condition using the dropdown menu.
- Create multiple conditions by selecting **Add condition**.
- Refer to **Available data type comparisons** for details on comparisons by data type.

### Combining Conditions
- Use **AND** to keep data that meets all conditions.
- Use **OR** to keep data that meets any condition.

## Available Data Type Comparisons

### String Comparisons
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- contains
- does not contain
- starts with
- does not start with
- ends with
- does not end with
- matches regex
- does not match regex

### Number Comparisons
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- is greater than
- is less than
- is greater than or equal to
- is less than or equal to

### Date & Time Comparisons
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- is after
- is before
- is after or equal to
- is before or equal to

### Boolean Comparisons
- exists
- does not exist
- is empty
- is not empty
- is true
- is false
- is equal to
- is not equal to

### Array Comparisons
- exists
- does not exist
- is empty
- is not empty
- contains
- does not contain
- length equal to
- length not equal to
- length greater than
- length less than
- length greater than or equal to
- length less than or equal to

### Object Comparisons
- exists
- does not exist
- is empty
- is not empty

## Branch Execution with If and Merge Nodes
In version 0.236.0 and below, If nodes can execute both output data streams when a Merge node is added. The standard If node behavior is to execute one data stream (true output), but due to the Merge node, both streams may trigger.

## Related Resources
For more information on conditionals in workflows, refer to **Splitting with conditionals**. If more than two conditional outputs are needed, use the **Switch node**.

----------------------------------------

# JWT Node in n8n

## Core Concepts
Work with JSON web tokens in n8n workflows.

## Credentials
Authenticate using JWT credentials: [JWT Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/jwt/).

## Operations
- **Decode**
- **Sign**
- **Verify**

## Node Parameters
- **Credential to connect with**: Select or create a JWT credential.
- **Token**: Enter the token to verify or decode.
- **Use JSON to Build Payload**: Influences payload claims when signing.

## Payload Claims
### Claims available when using the Sign operation:
- **Audience (`aud`)**: Intended recipients of the JWT.
- **Expires In (`exp`)**: The expiration time of the JWT.
- **Issuer (`iss`)**: Principal that issued the JWT.
- **JWT ID (`jti`)**: Unique identifier for the JWT.
- **Not Before (`nbf`)**: Time before which the JWT must not be accepted.
- **Subject (`sub`)**: Principal that is the subject of the JWT.

## Node Options
### Decode Node Options
- **Return Additional Info**: Toggles returning complete token details vs only payload.

### Sign Node Options
- **Override Algorithm**: Select verification algorithm overriding credential settings.

### Verify Node Options
- **Return Additional Info**: Controls detail level of returned info.
- **Ignore Expiration**: Option to ignore expiration time claim (`exp`).
- **Ignore Not Before Claim**: Option to ignore not before claim (`nbf`).
- **Clock Tolerance**: Number of seconds tolerated for `nbf` and `exp` claims.
- **Override Algorithm**: Specify token verification algorithm overriding credentials.

## Templates and Examples
[Browse JWT integration templates](https://n8n.io/integrations/jwt/).

----------------------------------------

# LDAP Node for n8n

This node allows interaction with LDAP servers to create, find, and update objects.

## Credentials
- Configure LDAP credentials [here](https://docs.n8n.io/integrations/builtin/credentials/ldap/).

## Operations
- **Compare**: Compare an attribute.
- **Create**: Create a new entry.
- **Delete**: Delete an entry.
- **Rename**: Rename the DN of an existing entry.
- **Search**: Search LDAP.
- **Update**: Update attributes.

## Configure Operations

### Compare
- **Credential to connect with**: Select or create an LDAP credential.
- **DN**: Distinguished Name of the entry to compare.
- **Attribute ID**: ID of the attribute to compare.
- **Value**: Value to compare.

### Create
- **Credential to connect with**: Select or create an LDAP credential.
- **DN**: Distinguished Name of the entry to create.
- **Attributes**: Add Attribute ID/Value pairs to create.

### Delete
- **Credential to connect with**: Select or create an LDAP credential.
- **DN**: Distinguished Name of the entry to be deleted.

### Rename
- **Credential to connect with**: Select or create an LDAP credential.
- **DN**: Current Distinguished Name of the entry to rename.
- **New DN**: New Distinguished Name for the entry.

### Search
- **Credential to connect with**: Select or create an LDAP credential.
- **Base DN**: Distinguished Name of the subtree to search in.
- **Search For**: Directory object class to search for.
- **Attribute**: Attribute to search for.
- **Search Text**: Text to search for; use `*` for a wildcard.
- **Return All**: Return all results or limited results based on the **Limit** parameter.
- **Limit**: Maximum number of results to return when **Return All** is off.

#### Search Options
- **Attribute Names or IDs**: Comma-separated list of attributes to return.
- **Page Size**: Maximum number of results to request at one time (set to 0 to disable paging).
- **Scopes**: Choose from:
  - **Base Tree**: Search subordinates of the Base DN entry.
  - **Single Level**: Search only the immediate children of the Base DN entry.
  - **Whole Subtree**: Search the Base DN entry and all its subordinates.

### Update
- **Credential to connect with**: Select or create an LDAP credential.
- **DN**: Distinguished Name of the entry to update.
- **_Update Attributes_**: Select whether to Add new, Remove existing, or Replace existing attributes.
- **Attribute ID/Value**: Enter the Attribute ID/Value pair to update.

----------------------------------------

# Local File Trigger Node

The Local File Trigger node starts a workflow when it detects changes on the file system. These changes can include a file or folder being added, changed, or deleted. This node is only available for self-hosted n8n and not on n8n Cloud.

## Node Parameters

### Trigger On
Choose what event to watch for.

### Changes to a Specific File
- **File to Watch**: Enter the path for the specific file to watch.

### Changes Involving a Specific Folder
- **Folder to Watch**: Enter the path of the folder to watch.
- **Watch for**: Select the type of change to monitor.

## Node Options

Use the node options to include or exclude files and folders:
- **Include Linked Files/Folders**: Also watch for changes to linked files or folders.
- **Ignore**: Specify files or paths to ignore. Uses [Anymatch](https://github.com/micromatch/anymatch) syntax.
- **Max Folder Depth**: Specify how deep into the folder structure to watch for changes.

### Examples for Ignore

Ignore a single file:
```
**
/<fileName>.<suffix> 
# For example, **/myfile.txt
```

Ignore a sub-directory of a directory you're watching:
```
**
/<directoryName>/**
# For example, **/myDirectory/**
```

----------------------------------------

# Limit Node

Use the Limit node to remove items beyond a defined maximum number of items from input data. You can choose whether to take the items from the beginning or the end of the input data.

## Node Parameters

### Max Items
- Enter the maximum number of items that n8n should keep. If input data exceeds this value, n8n removes the excess items.

### Keep
- Determines from where to keep the input items:
  - **First Items**: Keeps the specified number of items from the beginning of the input data.
  - **Last Items**: Keeps the specified number of items from the end of the input data.

----------------------------------------

# Manual Trigger Node

Use the Manual Trigger node to start a workflow by selecting **Test Workflow** without automating it.

## Core Concept

The Manual Trigger node acts as the start point for workflows that do not have an automatic trigger.

### Usage

- To test your workflow before adding an automatic trigger.
- When you prefer the workflow not to run automatically.

## Common Issues

### Only One 'Manual Trigger' Node is Allowed

This error occurs if you attempt to add a Manual Trigger node to a workflow that already contains one. To resolve this:

- Remove the existing Manual Trigger node.
- Edit the workflow to connect the existing trigger to a different node.

----------------------------------------

# Markdown Node in n8n

The Markdown node converts between Markdown and HTML formats.

## Operations

**Modes**:
- **Markdown to HTML**: Convert from Markdown to HTML.
- **HTML to Markdown**: Convert from HTML to Markdown.

## Node Parameters
- **HTML** or **Markdown**: Enter the data to convert. The field name changes based on selected **Mode**.
- **Destination Key**: Enter the field for output. Use dots for nested fields (e.g., `level1.level2.newKey`).

## Node Options

### Markdown to HTML Options

| Option | Description | Default |
| --- | --- | --- |
| **Add Blank To Links** | Whether links open in a new window. | Disabled |
| **Automatic Linking To URLs** | Convert identified URLs to links. | Disabled |
| **Backslash Escapes HTML Tags** | Allow backslash escaping of HTML tags. | Disabled |
| **Complete HTML Document** | Output a full HTML document. | Disabled |
| **Customized Header ID** | Support custom heading IDs. | Disabled |
| **Emoji Support** | Support for emojis. | Disabled |
| **Encode Emails** | Transform ASCII character emails into decimal entities. | Enabled |
| **Exclude Trailing Punctuation From URLs** | Exclude trailing punctuation from URLs. | Disabled |
| **GitHub Code Blocks** | Enable GitHub Flavored Markdown code blocks. | Enabled |
| **GitHub Compatible Header IDs** | Generate compatible header IDs with GitHub. | Disabled |
| **GitHub Mention Link** | Change link format for GitHub mentions. | Disabled |
| **GitHub Mentions** | Support tagging GitHub users with `@`. | Disabled |
| **GitHub Task Lists** | Support GitHub Flavored Markdown task lists. | Disabled |
| **Header Level Start** | Set the start level for headers. | 1 |
| **Mandatory Space Before Header** | Require space between heading indicator and text. | Disabled |
| **Middle Word Asterisks** | Treat asterisks in words as Markdown. | Disabled |
| **Middle Word Underscores** | Treat underscores in words as Markdown. | Disabled |
| **No Header ID** | Disable automatic header ID generation. | Disabled |
| **Parse Image Dimensions** | Support max image dimensions. | Disabled |
| **Prefix Header ID** | Define prefix for header IDs. | None |
| **Raw Header ID** | Remove spaces and certain characters from header IDs. | Disabled |
| **Raw Prefix Header ID** | Prevent modification of header prefixes. | Disabled |
| **Simple Line Breaks** | Create line breaks without double spaces. | Disabled |
| **Smart Indentation Fix** | Fix indentation issues in code blocks. | Disabled |
| **Spaces Indented Sublists** | Remove requirement for sublist indentation. | Disabled |
| **Split Adjacent Blockquotes** | Treat separate blockquotes as single or multiple. | Disabled |
| **Strikethrough** | Support strikethrough syntax. | Disabled |
| **Tables Header ID** | Add ID to table header tags. | Disabled |
| **Tables Support** | Support tables. | Disabled |

### HTML to Markdown Options

| Option | Description | Default |
| --- | --- | --- |
| **Bullet Marker** | Character for unordered lists. | \* |
| **Code Block Fence** | Characters for code blocks. | \`\`\` |
| **Emphasis Delimiter** | Character for `<em>`. | \_ |
| **Global Escape Pattern** | Overrides default escape settings. | None |
| **Ignored Elements** | Ignore specified HTML elements. | None |
| **Keep Images With Data** | Keep images with data in Markdown. | Disabled |
| **Line Start Escape Pattern** | Overrides escape settings at line start. | None |
| **Max Consecutive New Lines** | Maximum allowed consecutive new lines. | 3 |
| **Place URLs At The Bottom** | Place URLs at page bottom. | Disabled |
| **Strong Delimiter** | Characters for `<strong>`. | \*\* |
| **Style For Code Block** | Styling options for code blocks. | Fence |
| **Text Replacement Pattern** | Define text replacement pattern using regex. | None |
| **Treat As Blocks** | Specify elements to treat as blocks. | None |

## Parsers
- To convert from HTML to Markdown: [node-html-markdown](https://www.npmjs.com/package/node-html-markdown).
- To convert from Markdown to HTML: [Showdown](https://www.npmjs.com/package/showdown). Supports GitHub Flavored Markdown.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# Merge Node

Use the Merge node to combine data from multiple streams once data from all streams is available.

## Node Parameters

### Mode

You can specify how the Merge node should combine data from different data streams by choosing a Mode:

#### Append

Keep data from all inputs. Choose a Number of Inputs to output items of each input one after another. The node waits for the execution of all connected inputs.

#### Combine

Combine data from two inputs. Select an option in Combine By to determine how you want to merge the input data.

##### Matching Fields

- Compare items by field values. Enter the fields to compare in **Fields to Match**.
- Output Type settings:
  - **Keep Matches**: Inner join.
  - **Keep Non-Matches**: Merge items that don't match.
  - **Keep Everything**: Outer join.
  - **Enrich Input 1**: Left join.
  - **Enrich Input 2**: Right join.

##### Position

Combine items based on their order. The item at index 0 in Input 1 merges with the item at index 0 in Input 2.

##### All Possible Combinations

Output all possible item combinations while merging fields with the same name.

##### Combine Mode Options

- **Clash Handling**: Choose how to merge when data streams clash or have sub-fields.
- **Fuzzy Compare**: Treat `"3"` and `3` as the same (enabled) or different (default).
- **Disable Dot Notation**: Prevents accessing child fields using `parent.child`.
- **Multiple Matches**:
  - **Include All Matches**: Output all items for each match.
  - **Include First Match Only**: Keep the first item per match only.
- **Include Any Unpaired Items**: Keep or discard unpaired items when merging by position.

### SQL Query

Write a custom SQL Query to merge the data.

Example:
```sql
SELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id
```

### Choose Branch

Choose which input to keep. Options:
- The Input 1 Data
- The Input 2 Data
- A Single, Empty Item

## Best Practices

When merging data streams with uneven numbers of items, the items in Input 1 will take precedence. For example, if Input 1 has five items and Input 2 has ten, only five items are processed.

## Example

### Sample Data Set Up
1. Add a Code node and connect it to the Start node.
2. Use the following JavaScript code:
```javascript
return [
  { json: { name: 'Stefan', language: 'de' } },
  { json: { name: 'Jim', language: 'en' } },
  { json: { name: 'Hans', language: 'de' } }
];
```
3. Add a second Code node, connect it, and use this JavaScript code:
```javascript
return [
  { json: { greeting: 'Hello', language: 'en' } },
  { json: { greeting: 'Hallo', language: 'de' } }
];
```
4. Add the Merge node and connect it to both Code nodes.

### Try Out Different Merge Modes
1. **Mode > Append** 
2. **Mode > Combine**, **Combine by > Matching Fields**
3. **Mode > Combine**, **Combine by > Position**
4. **Mode > Combine**, **Combine by > All Possible Combinations** 

Refer to the various outputs from these modes to see how they affect the combined data.

### Outputs
The sample outputs for each mode can be viewed when executing the corresponding steps in the workflow.

----------------------------------------

# n8n Trigger Node

The n8n Trigger node activates when the current workflow updates or activates, or when the n8n instance starts or restarts.

## Node Parameters

The node includes a single parameter to identify the **Events** that should trigger it. Select from the following events:

- **Active Workflow Updated**: Triggers when this workflow is updated.
- **Instance Started**: Triggers when the n8n instance starts or restarts.
- **Workflow Activated**: Triggers when this workflow is activated.

You can select one or more of these events.

----------------------------------------

# n8n Node Documentation

## Overview

This node integrates with n8n itself, allowing users to consume the n8n API in workflows. 

## API Documentation

Refer to the [n8n REST API documentation](https://docs.n8n.io/api/) for the API details.

### Credentials

Authentication information is available in the [API authentication](https://docs.n8n.io/api/authentication/) documentation.

### SSL Support

This node does not support SSL. Use the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) for servers requiring SSL.

## Operations

- **Audit**
  - **Generate** a security audit
- **Credential**
  - **Create** a credential
  - **Delete** a credential
  - **Get Schema**: Retrieves credential data schema for type
- **Execution**
  - **Get** an execution
  - **Get Many** executions
  - **Delete** an execution
- **Workflow**
  - **Activate** a workflow
  - **Create** a workflow
  - **Deactivate** a workflow
  - **Delete** a workflow
  - **Get** a workflow
  - **Get Many** workflows
  - **Update** a workflow

## Operational Details

### Generate Audit

No parameters required. Options to configure:
- **Categories**: Select risk categories (Credentials, Database, Filesystem, Instance, Nodes).
- **Days Abandoned Workflow**: Set the number of days (default is `90`) for a workflow to be considered abandoned.

### Create Credential

Configure with the following parameters:
- **Name**: Name of the credential.
- **Credential Type**: Type of the credential (e.g., `githubApi`, `notionApi`, `slackApi`).
- **Data**: Valid JSON object with required properties for the credential type.

### Delete Credential

Configure with the following parameter:
- **Credential ID**: ID of the credential to delete.

### Get Credential Schema

Configure with the following parameter:
- **Credential Type**: Type of the credential.

### Get Execution

Configure with the following parameter:
- **Execution ID**: ID of the execution to retrieve.

#### Get Execution Options

- **Include Execution Details**: Include detailed execution data (on/off).

### Get Many Executions

Configure with the following parameters:
- **Return All**: Specify whether to return all results.
- **Limit**: Number of results to return if not returning all.

#### Filters for Many Executions

- **Workflow**: Filter executions by workflow (From list, By URL, By ID).
- **Status**: Filter by status (Error, Success, Waiting).

### Delete Execution

Configure with the following parameter:
- **Execution ID**: ID of the execution to delete.

### Workflow Management

The following operations require selecting the **Workflow**:
- **Activate, Deactivate, Delete**: Operate on selected workflows (From list, By URL, By ID).
- **Create Workflow**: 
  - **Workflow Object**: JSON object requiring fields (name, nodes, connections, settings).
- **Get Many Workflows**: 
  - Parameters: Return all results, limit, and associated filters for active workflows and tags.
- **Update Workflow**: 
  - **Workflow**: Select the workflow (From list, By URL, By ID).
  - **Workflow Object**: JSON object with new details.

Refer to the corresponding n8n API documentation endpoints for workflow creation and update operations for further information.

## Templates and Examples

- Example workflows available for various use cases, including quickstarts and integrations not pre-built in n8n.

----------------------------------------

# No Operation Node

## Description
The No Operation, do nothing node is utilized when no operations need to be performed in a workflow. Its purpose is to enhance readability and understanding of where the data flow stops, making the workflow easier for others to interpret visually.

## Node Details
- **Node Name**: No Operation
- **Function**: Acts as a placeholder in workflows without executing any processes.

## Best Practices
- Utilize the No Operation node to improve the clarity of complex workflows.
- Place it strategically to indicate logical breaks or stops in the data flow.

## Example Usage
```json
{
  "nodes": [
    {
      "name": "No Operation",
      "type": "n8n-nodes-base.noop",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    }
  ]
}
```

## Workflow Integration
- The No Operation node can be integrated into any workflow where clarity and process flow indication are required without executing any action.

----------------------------------------

# Read/Write Files from Disk

Use the Read/Write Files from Disk node to read and write files from/to the machine where n8n is running. This node isn't available on n8n Cloud.

## Operations

- **Read File(s) From Disk**: Retrieve one or more files from the computer that runs n8n.
- **Write File to Disk**: Create a binary file on the computer that runs n8n.

## Read File(s) From Disk Configuration

- **File(s) Selector**: Enter the path of the file to read. Use path pattern characters:
  - `*`: Matches any character zero or more times, excluding path separators.
  - `**`: Matches any character zero or more times, including path separators.
  - `?`: Matches any character except path separators one time.
  - `[]`: Matches any characters inside the brackets (e.g., `[abc]` matches `a`, `b`, or `c`).

### Read File(s) From Disk Options

- **File Extension**: Specify the extension for the file in the node output.
- **File Name**: Specify the name for the file in the node output.
- **MIME Type**: Specify the file's MIME type in the node output. Refer to Common MIME types for a list of file extensions and their MIME types.
- **Put Output File in Field**: Name the field in the output data to contain the file.

## Write File to Disk Configuration

- **File Path and Name**: Specify the destination for the file, file's name, and file's extension.
- **Input Binary Field**: Name the field in the node input data containing the binary file.

### Write File to Disk Options

- **Append**: Specify whether to append data to an existing file (turned on) or create a new file (turned off).

## File Locations

If n8n runs in Docker, commands run in the n8n container, not the Docker host. Use absolute file paths to prevent errors.

----------------------------------------

# Remove Duplicates Node Documentation

## Core Concept
The Remove Duplicates node identifies and deletes items that are:
- Identical across all fields or a subset of fields in a single execution.
- Identical to or surpassed by items seen in previous executions.

## Operation Modes
The Remove Duplicates node works based on the **operation** parameter:
- **Remove Items Repeated Within Current Input**: Identify and remove duplicate items in the current input across all fields or a subset of fields.
- **Remove Items Processed in Previous Executions**: Compare items in the current input to items from previous executions and remove duplicates.
- **Clear Deduplication History**: Wipe memory of items from previous executions.

### Remove Items Repeated Within Current Input

#### Parameters
- **Compare**: Select fields for comparison:
  - **All Fields**: Compares all fields of the input data.
  - **All Fields Except**: Excludes specified fields from comparison.
  - **Selected Fields**: Includes specified fields for comparison.
  
#### Options
- **Disable Dot Notation**: Reference child fields in the format `parent.child` (off/on).
- **Remove Other Fields**: Remove fields not used in comparison (on/off).

### Remove Items Processed in Previous Executions

#### Parameters
- **Keep Items Where**: Select criteria for keeping items:
  - **Value Is New**: Remove items matching earlier executions.
  - **Value Is Higher than Any Previous Value**: Remove items if the current value isn't higher than previous values.
  - **Value Is a Date Later than Any Previous Date**: Remove items if the current date isn't later than previous dates.
- **Value to Dedupe On**: Specify input field or fields for comparison based on chosen criteria.

#### Options
- **Scope**: Define storage for deduplication data:
  - **Node**: Stores data independently (default).
  - **Workflow**: Shares data across Remove Duplicate nodes.
- **History Size**: Number of items stored to track duplicates (default: 10,000).

### Clear Deduplication History

#### Parameters
- **Mode**: Manage key/value items stored in the database:
  - **Clean Database**: Deletes all stored duplication data.

#### Options
- **Scope**: Manage duplication database:
  - **Node**: Specific to this Remove Duplicates node instance (default).
  - **Workflow**: Shared by all Remove Duplicate node instances using workflow scope.

----------------------------------------

# Rename Keys Node

## Core Concept
The Rename Keys node in n8n is used to rename the keys of a key-value pair.

## Node Parameters
- **Current Key Name**: The existing name of the key to be renamed.
- **New Key Name**: The new name to assign to the key.

## Node Options
- **Regex**: Option to use a regular expression to identify keys for renaming.
  - **Regular Expression**: The regex pattern to match keys.
  - **Replace With**: The new name for the keys that match the regex.
  - **Case Insensitive**: Choose whether to match case (off) or be case insensitive (on).
  - **Max Depth**: Maximum depth for key replacement. Use `-1` for unlimited and `0` for top-level only.

### Regex Impacts
Using a regular expression can affect keys that match the expression, including those already renamed.

----------------------------------------

# Respond to Webhook

Use the Respond to Webhook node to control the response to incoming webhooks. This node works with the Webhook node.

## How to use Respond to Webhook

1. Add a Webhook node as the trigger node for the workflow.
2. In the Webhook node, set **Respond** to **Using 'Respond to Webhook' node**.
3. Add the Respond to Webhook node anywhere in your workflow. If you want it to return data from other nodes, place it after those nodes.

## Node parameters

### Respond With

Choose what data to send in the webhook response.

- **All Incoming Items**: Respond with all the JSON items from the input.
- **Binary File**: Respond with a binary file defined in **Response Data Source**.
- **First Incoming Item**: Respond with the first incoming item's JSON.
- **JSON**: Respond with a JSON object defined in **Response Body**.
- **JWT Token**: Respond with a JSON Web Token (JWT).
- **No Data**: No response payload.
- **Redirect**: Redirect to a URL set in **Redirect URL**.
- **Text**: Respond with text set in **Response Body**.

## Node options

- **Response Code**: Set the response code to use.
- **Response Headers**: Define the response headers to send.
- **Put Response in Field**: Available when you respond with **All Incoming Items** or **First Incoming Item**. Set the field name for the field containing the response data.

## Workflow behavior

When using the Respond to Webhook node, workflows behave as follows:

- The workflow finishes without executing the Respond to Webhook node: it returns a standard message with a 200 status.
- The workflow errors before the first Respond to Webhook node executes: the workflow returns an error message with a 500 status.
- A second Respond to Webhook node executes after the first one: the workflow ignores it.
- A Respond to Webhook node executes but there was no webhook: the workflow ignores the Respond to Webhook node.

## Output the response sent to the webhook

By default, the Respond to Webhook node has a single output branch that contains the node's input data. You can optionally enable a second output branch containing the response sent to the webhook.

To enable this secondary output, open the Respond to Webhook node on the canvas and select the **Settings** tab. Activate the **Enable Response Output Branch** option.

The node will then have two outputs:

- **Input Data**: The original output, passing on the node's input.
- **Response**: The response object sent to the webhook.

----------------------------------------

# RSS Read Node

Use the RSS Read node to read data from RSS feeds published on the internet.

## Node Parameters

- **URL**: Enter the URL for the RSS publication you want to read.

## Node Options

- **Ignore SSL Issues**: Choose whether n8n should ignore SSL/TLS verification (turned on) or not (turned off).

----------------------------------------

# RSS Feed Trigger Node

The RSS Feed Trigger node starts an n8n workflow when a new RSS feed item is published.

## Node Parameters

- **Poll Times**: 
  - **Mode**: Select to set how often to trigger the poll. This selection influences which relevant fields appear.
  
- **Feed URL**: Enter the URL of the RSS feed to poll.

### Modes

#### Every Hour Mode
- **Minute**: Trigger the poll at a specified minute (0-59).

#### Every Day Mode
- **Hour**: Trigger the poll at a specified hour (0-23).
- **Minute**: Trigger the poll at a specified minute (0-59).

#### Every Week Mode
- **Hour**: Trigger the poll at a specified hour (0-23).
- **Minute**: Trigger the poll at a specified minute (0-59).
- **Weekday**: Select the day of the week to trigger the poll.

#### Every Month Mode
- **Hour**: Trigger the poll at a specified hour (0-23).
- **Minute**: Trigger the poll at a specified minute (0-59).
- **Day of the Month**: Trigger the poll on a specified day (1-31).

#### Every X Mode
- **Value**: Enter the measurement for how often to trigger the poll in minutes or hours.
- **Unit**: Select from **Minutes** or **Hours**.

#### Custom Mode
- **Cron Expression**: Enter a custom Cron expression. Valid ranges:
  - Seconds: `0` - `59`
  - Minutes: `0` - `59`
  - Hours: `0` - `23`
  - Day of Month: `1` - `31`
  - Months: `0` - `11` (Jan - Dec)
  - Day of Week: `0` - `6` (Sun - Sat)

To generate a Cron expression, use tools like crontab guru.

### Examples
- Trigger every day at 04:08:30:
  - **Cron Expression**: `30 8 4 * * *`
  
- Trigger every day at 04:08:
  - **Cron Expression**: `8 4 * * *`

### Cron Expression Explanation
The sixth asterisk in the Cron expression represents seconds, which is optional. The node will execute even if seconds are not set.

| \* | \* | \* | \* | \* | \* |
| --- | --- | --- | --- | --- | --- |
| second | minute | hour | day of month | month | day of week |

----------------------------------------

# Schedule Trigger Node

Use the Schedule Trigger node to run workflows at fixed intervals and times, functioning similarly to the Cron utility in Unix-like systems.

## Node Parameters

Add **Trigger Rules** to determine when the trigger should run. 

**Trigger Interval** options include:

- **Seconds Trigger Interval**
  - **Seconds Between Triggers**: Enter the number of seconds (e.g., `30` for every 30 seconds).

- **Minutes Trigger Interval**
  - **Minutes Between Triggers**: Enter the number of minutes (e.g., `5` for every 5 minutes).

- **Hours Trigger Interval**
  - **Hours Between Triggers**: Enter the number of hours.
  - **Trigger at Minute**: Enter the minute past the hour (from `0` to `59`).

- **Days Trigger Interval**
  - **Days Between Triggers**: Enter the number of days.
  - **Trigger at Hour**: Select the hour of the day.
  - **Trigger at Minute**: Enter the minute past the hour.

- **Weeks Trigger Interval**
  - **Weeks Between Triggers**: Enter the number of weeks.
  - **Trigger on Weekdays**: Select the day(s) of the week.
  - **Trigger at Hour**: Select the hour of the day.
  - **Trigger at Minute**: Enter the minute past the hour.

- **Months Trigger Interval**
  - **Months Between Triggers**: Enter the number of months.
  - **Trigger at Day of Month**: Enter the day of the month (from `1` to `31`).
  - **Trigger at Hour**: Select the hour of the day.
  - **Trigger at Minute**: Enter the minute past the hour.

- **Custom (Cron) Interval**
  - Enter a custom cron **Expression** for scheduling.

### Cron Expression Examples

| Type               | Cron Expression     | Description                                     |
|---------------------|---------------------|-------------------------------------------------|
| Every X Seconds     | `*/10 * * * * *`    | Every 10 seconds.                               |
| Every X Minutes     | `*/5 * * * *`       | Every 5 minutes.                                |
| Hourly              | `0 * * * *`         | Every hour on the hour.                         |
| Daily               | `0 6 * * *`         | At 6:00 AM every day.                          |
| Weekly              | `0 12 * * 1`        | At noon every Monday.                           |
| Monthly             | `0 0 1 * *`         | At midnight on the 1st of every month.        |
| Every X Days        | `0 0 */3 * *`       | At midnight every 3rd day.                     |
| Only Weekdays       | `0 9 * * 1-5`       | At 9:00 AM Monday through Friday.              |
| Custom Hourly Range | `0 9-17 * * *`      | Every hour from 9:00 AM to 5:00 PM every day. |
| Quarterly           | `0 0 1 1,4,7,10 *`  | At midnight on the 1st of January, April, July, and October. |

### Using Variables in Cron Expressions

Variables in the scheduled trigger are evaluated when the workflow is activated. Changes in variable values after activation require setting the workflow to **Inactive** and back to **Active** for re-evaluation.

### Cron Expression Format

| (\*) | \* | \* | \* | \* | \* |
|-------|---|---|---|---|---|
| (second) | minute | hour | day of month | month | day of week (Sun-Sat) |

## Timezone Settings

The node relies on the timezone setting:
1. The workflow timezone, if set.
2. The n8n instance timezone, defaulting to `America/New York` for self-hosted instances. 

Self-hosted users can change the instance timezone using environment variables.

## Configuration Instructions

Ensure that the workflow is saved and activated when using the Schedule node as a trigger.

----------------------------------------

# Send Email Node

The Send Email node sends emails using an SMTP email server.

## Credential

Select or create an SMTP account credential for the node to use.

## Node Parameters

### Operation

The Send Email node supports the following operations:
- **Send**: Send an email.
- **Send and Wait for Response**: Send an email and pause the workflow execution until a response is received.

### From Email

Enter the email address you want to send the email from. Format: `Name <email@sample.com>`. Example: `Nathan Doe <nate@n8n.io>`.

### To Email

Enter the recipient's email address. Use a comma to separate multiple addresses. Example: `first@sample.com, "Name" <second@sample.com>`.

### Subject

Enter the subject line for the email.

### Email Format

Choose the format to send the email:
- **Text**: Plain-text format.
- **HTML**: HTML format.
- **Both**: Both formats; the recipient's client will choose the display format.

## Node Options

### Append n8n Attribution

Set whether to include the phrase `This email was sent automatically with n8n` at the end of the email (enabled/disabled).

### Attachments

Enter the names of binary properties to include as attachments. Reference embedded images or content using `cid:` in the body of the email.

### CC Email

Enter an email address for the `cc:` field.

### BCC Email

Enter an email address for the `bcc:` field.

### Ignore SSL Issues

Set whether to ignore TLS/SSL certificate validation failures (enabled/disabled).

### Reply To

Enter an email address for the Reply To field.

## Waiting for a Response

When using the **Send and Wait for Response** operation, the workflow pauses until a user confirms or provides information.

### Response Type

Choose between:
- **Approval**: Users can approve or disapprove from within the message.
- **Free Text**: Users submit responses via a form.
- **Custom Form**: Users submit responses via a customizable form.

### Approval Parameters

- **Type of Approval**: Approval only or both approval/disapproval options.
- **Button Label**: Custom labels for approval and disapproval buttons.
- **Button Style**: Button styling options.
- **Limit Wait Time**: Automatically resume after a specified time.
- **Append n8n Attribution**: Include n8n attribution (enabled/disabled).

### Free Text Parameters

- **Message Button Label**: Custom label for the response button.
- **Response Form Title**: Title of the response form.
- **Response Form Description**: Description for the response form.
- **Response Form Button Label**: Custom label for the submission button.
- **Limit Wait Time**: Automatically resume after a specified time.
- **Append n8n Attribution**: Include n8n attribution (enabled/disabled).

### Custom Form Parameters

Customize each form element as explained in the n8n Form trigger's form elements documentation. Options include:
- **Message Button Label**: Custom label for the response button.
- **Response Form Title**: Title of the response form.
- **Response Form Description**: Description for the response form.
- **Response Form Button Label**: Custom label for the submission button.
- **Limit Wait Time**: Automatically resume after a specified time.
- **Append n8n Attribution**: Include n8n attribution (enabled/disabled).

----------------------------------------

# Edit Fields (Set) Node Documentation

## Core Concept
The Edit Fields node in n8n is used to set workflow data, allowing for both the addition of new data and overwriting existing data. This is particularly useful for workflows that handle incoming data from previous nodes (e.g., Google Sheets, databases).

## Node Parameters

### Mode
- **Manual Mapping**: Edit fields using the GUI.
- **JSON Output**: Write JSON that n8n adds to the input data.

### Fields to Set
- In **Manual Mapping** mode, fields can be configured by dragging values from **INPUT**. 
- Default behavior:
  - The value's name becomes the field name.
  - The field value is an expression accessing the value.
- To use fixed values:
  1. Hover over a field to display the **Fixed | Expressions** toggle.
  2. Select **Fixed**.

### Keep Only Set Fields
- Enable to discard any input data not used in **Fields to Set**.

### Include in Output
- Choose which input data to include in the node's output.

## Node Options

### Include Binary Data
- Choose whether to include binary data from input in the output.

### Ignore Type Conversion Errors
- Available only in Manual Mapping mode. Enables n8n to ignore some data type errors when mapping fields.

### Support Dot Notation
- By default, n8n supports dot notation. For instance, if the **Name** field is set as `number.one` with the value `20`, the resulting JSON will be:
```json
{
  "number": {
    "one": 20
  }
}
```
- To prevent dot notation behavior, disable **Support Dot Notation**.

## JSON Output with Arrays and Expressions
You can construct JSON using arrays and expressions. For example:

Input data:
```json
[
  {
    "id": "23423532",
    "name": "Jay Gatsby",
    ...
  },
  ...
]
```
JSON Output field example:
```json
{
  "newKey": "new value",
  "array": [{{ $json.id }},"{{ $json.name }}"],
  "object": {
    "innerKey1": "new value",
    "innerKey2": "{{ $json.id }}",
    "innerKey3": "{{ $json.name }}"
  }
}
```
Output includes both input fields and the newly added structure.

## Best Practices
- Use **Keep Only Set Fields** to minimize unnecessary data in outputs.
- Ensure dot notation is understood if using structured keys in JSON.
- Validate data types to avoid errors when ignoring type conversion issues.

----------------------------------------

# Sort Node Documentation

Use the Sort node to organize lists of items in a desired ordering, or generate a random selection.

## Array Sort Behavior
The Sort operation uses the default JavaScript operation where elements are converted into strings and compared. For more details, refer to [Mozilla's guide to Array sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).

## Node Parameters
### Type
Configure the node using the **Type** parameter to select the sorting method.

### Simple
Performs an ascending or descending sort using the selected fields.
- Use the **Add Field To Sort By** button to input the **Field Name**.
- Select **Ascending** or **Descending** order.

#### Simple Options
- **Disable Dot Notation**: By default, n8n enables dot notation to reference child fields in the format `parent.child`. This option allows you to toggle dot notation.

### Random
Creates a random order in the list.

### Code
Input custom JavaScript code to perform the sort operation. Enter your custom JavaScript code in the **Code** input field.

## Templates and Examples
- Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel
- Transcribing Bank Statements To Markdown Using Gemini Vision AI
- Allow Users to Send a Sequence of Messages to an AI Agent in Telegram

## Related Resources
Learn more about [data structure and data flow](https://docs.n8n.io/data/) in n8n workflows.

----------------------------------------

# SSE Trigger Node

Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server using an HTTP connection. The SSE Trigger node is used to receive server-sent events.

## Node Parameters

- **URL**: Enter the URL from which to receive the server-sent events (SSE).

----------------------------------------

# Loop Over Items (Split in Batches)

The Loop Over Items node allows looping through data, saving the original incoming data and returning a set amount through the **loop** output during each iteration. After completing, it combines processed data and returns it through the **done** output.

## Node Parameters

### Batch Size
Defines the number of items to return with each call.

## Node Options

### Reset
When enabled, the node resets the input data with each loop iteration. This is useful for treating incoming data as a new set rather than a continuation from previous items. It's important to include a valid termination condition to prevent infinite loops.

You can switch the parameter representation from **Fixed** to **Expression** to adjust reset conditions based on evaluated expressions.

## Workflow Example

### Building a Workflow to Read RSS Feed from Two Sources:
1. Add a manual trigger.
2. Add a Code node with the following:

```javascript
return [
	{
		json: {
			url: 'https://medium.com/feed/n8n-io',
		}
	},
	{
		json: {
			url: 'https://dev.to/feed/n8n',
		}
	}
];
```

3. Add the Loop Over Items node and set **Batch Size** to `1`.
4. Add the RSS Feed Read node, mapping `url` to the **URL** field.
5. Test the workflow to load data.

### Expressions to Check Processing
- To verify if there are items left to process:

```javascript
{{$node["Loop Over Items"].context["noItemsLeft"]}}
```

- To retrieve the current running index of the node:

```javascript
{{$node["Loop Over Items"].context["currentRunIndex"]}}
```

----------------------------------------

# Split Out Node

The Split Out node separates a single data item containing a list into multiple items.

## Node Parameters

### Field to Split Out
- Enter the field containing the list to separate into individual items.
- For binary data inputs, use `$binary` in an expression.

### Include
Select whether and how to keep any other fields from the input data:
- **No Other Fields**: No other fields included.
- **All Other Fields**: All other fields included.
- **Selected Other Fields**: Only selected fields included.
  - **Fields to Include**: Enter a comma-separated list of fields to include.

## Node Options

### Disable Dot Notation
- Disable dot notation to reference child fields (default is enabled).

### Destination Field Name
- Enter the field in the output where the split field contents should go.

### Include Binary
- Choose whether to include binary data from the input in the new output (enabled or disabled).

----------------------------------------

# SSH Node in n8n

The SSH node is used for executing commands using the Secure Shell Protocol.

## Operations

- **Execute a command**
- **Download a file**
- **Upload a file**

### Execute Command

Configure this operation with these parameters:

- **Credential to connect with**: Select or create a new SSH credential.
- **Command**: Enter the command to execute on the remote device.
- **Working Directory**: Enter the directory where n8n should execute the command.

### Download File

- **Credential to connect with**: Select or create a new SSH credential.
- **Path**: Enter the full path for the file you want to download, including the file name.
- **File Property**: Enter the name of the object property that holds the binary data to download.

#### Download File options

- **File Name**: Override the binary data file name if needed.

### Upload File

- **Credential to connect with**: Select or create a new SSH credential.
- **Input Binary Field**: Enter the name of the input binary field that contains the file to upload.
- **Target Directory**: Specify the target directory for the upload. Use the **File Name** option to provide a different name if needed.

#### Upload File options

- **File Name**: Override the binary data file name if needed.

## Credentials

Authentication information for the SSH node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/ssh/).

----------------------------------------

# Stop And Error Node

## Core Concept
The Stop And Error node is used to display custom error messages, cause executions to fail under certain conditions, and send custom error information to error workflows.

## Operations
- Error Message
- Error Object

## Node Parameters
### Error Type
This parameter allows selection of the type of error to throw, with two operations available: **Error Message** and **Error Object**.

### Error Message Parameters
- **Error Message**: Enter the message you would like to throw.

### Error Object Parameters
- **Error Object**: Enter a JSON object that contains the error properties you'd like to throw.

## Related Resources
- This node can be used with the [Error trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.errortrigger/) node.
- Additional information about [Error workflows](https://docs.n8n.io/flow-logic/error-handling/) in n8n workflows.

----------------------------------------

# Summarize Node

Use the Summarize node to aggregate items together, similar to Excel pivot tables.

## Node Parameters

### Fields to Summarize

Use these fields to define how you want to summarize your input data.

- **Aggregation**: Select the aggregation method to use on a given field. Options include:
  - **Append**: Append values. Choose whether to **Include Empty Values**.
  - **Average**: Calculate the numeric average.
  - **Concatenate**: Combine values. Choose whether to **Include Empty Values**. 
    - **Separator**: Select the separator for concatenated values.
  - **Count**: Count total values.
  - **Count Unique**: Count unique values.
  - **Max**: Find the highest numeric value.
  - **Min**: Find the lowest numeric value.
  - **Sum**: Add numeric values.
- **Field**: Enter the name of the field for aggregation.

### Fields to Split By

Enter the name of the input fields to split the summary by (similar to a group by statement). Use a comma-separated list for multiple fields.

## Node Options

### Continue if Field Not Found

By default, if a **Field to Summarize** isn't present, the node throws an error. Use this option to continue with a single empty item (turned on) or keep the default error behavior (turned off).

### Disable Dot Notation

By default, n8n enables dot notation to reference child fields in the format `parent.child`. Use this option to disable dot notation (turned on) or continue using it (turned off).

### Output Format

Select the format for your output. Recommended if using **Fields to Split By**:
- **Each Split in a Separate Item**: Generates a separate output item for each split.
- **All Splits in a Single Item**: Generates a single item listing split fields.

## Ignore Items Without Valid Fields to Group By

Set whether to ignore input items that lack the **Fields to Split By** (turned on) or not (turned off).

----------------------------------------

# TOTP Node

The TOTP node generates a TOTP (time-based one-time password).

## Credentials
Refer to **TOTP credentials** for guidance on setting up authentication.

## Node Parameters

### Credential to connect with
Select or create a **TOTP credential** for the node to use.

### Operation
The only operation currently supported is **Generate Secret**.

## Node Options

### Algorithm
Select the HMAC hashing algorithm to use. Default is **SHA1**.

### Digits
Enter the number of digits in the generated code. Default is `6`.

### Period
Enter how many seconds the TOTP is valid for. Default is `30`.

## Templates and Examples
Browse TOTP integration templates, or search all templates.

----------------------------------------

# Wait Node

Use the Wait node to pause your workflow's execution. When the workflow pauses, it offloads the execution data to the database. When the resume condition is met, the workflow reloads the data and continues execution.

## Operations

The Wait node can resume on the following conditions:

- **After Time Interval**: The node waits for a certain amount of time. 
  - **Wait Amount**: Enter the amount of time to wait.
  - **Wait Unit**: Select the unit of measure for the Wait Amount (Seconds, Minutes, Hours, Days).

- **At Specified Time**: The node waits until a specific date and time to continue.

- **On Webhook Call**: The node waits until it receives an HTTP call.
  - The webhook URL that resumes the execution is generated at runtime using `$execution.resumeUrl`.
  - **Authentication**: Options include Basic Auth, Header Auth, JWT Auth, or None.
  - **HTTP Method**: Select the HTTP method the webhook should use.
  - **Response Code**: Enter the Response Code the webhook should return.
  - **Respond**: Options include Immediately, When Last Node Finishes, or Using 'Respond to Webhook' Node.
  - **Limit Wait Time**: Set whether the workflow will automatically resume execution after a limit type.

- **On Form Submitted**: Wait for a form submission before continuing.
  - **Form Title**: Enter the title for the form.
  - **Form Description**: Enter a description for the form.
  - **Form Fields**: Set up each field (Field Label, Field Type, Required Field).

### Form Response Options

- **Form Response**: Options to respond with Form Submitted Text or Redirect URL.
- **Webhook Suffix**: Enter a suffix to append to the resume URL.

## Time-Based Operations

- For wait times less than 65 seconds, the workflow does not offload execution data to the database; it continues to run until the specified interval passes.
- The n8n server time is always used, regardless of the timezone setting.

----------------------------------------

# Switch Node

Use the Switch node to route a workflow conditionally based on comparison operations, supporting multiple output routes.

## Node Parameters

### Mode

Select the **Mode** the node should use:
- **Rules**: Create a matching rule for each output.
- **Expression**: Write an expression to return the output index programmatically.

### Rules Configuration

To configure the node with the Rules mode, use the following parameters:

- **Routing Rules**: Define comparison conditions.
  - Use the data type dropdown to select the data type and comparison operation. Example: For dates after a particular date, select **Date & Time > is after**.
  - Fields and values to enter depend on the selected data type and comparison.
- **Rename Output**: Optionally rename the output field. Enter the desired **Output Name**.

Select **Add Routing Rule** to add more rules.

#### Rule Options

- **Fallback Output**: 
  - **None**: Ignore the item (default behavior).
  - **Extra Output**: Send items to an extra, separate output.
  - **Output 0**: Send items to the first rule matching output.
  
- **Ignore Case**: Set whether to ignore letter case when evaluating conditions (on/off).
  
- **Less Strict Type Validation**: Set whether to convert value types based on the operator (on/off).
  
- **Send data to all matching outputs**: Choose whether to send data to all matching outputs (on) or only the first matching output (off).

### Expression Configuration

To configure the node with the Expression mode, use the following parameters:

- **Number of Outputs**: Specify the number of outputs.
- **Output Index**: Create an expression to calculate which input item goes to which output. The expression must return a number.

## Available Data Type Comparisons

### String

Supports comparisons:
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- contains
- does not contain
- starts with
- does not start with
- ends with
- does not end with
- matches regex
- does not match regex

### Number

Supports comparisons:
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- is greater than
- is less than
- is greater than or equal to
- is less than or equal to

### Date & Time

Supports comparisons:
- exists
- does not exist
- is empty
- is not empty
- is equal to
- is not equal to
- is after
- is before
- is after or equal to
- is before or equal to

### Boolean

Supports comparisons:
- exists
- does not exist
- is empty
- is not empty
- is true
- is false
- is equal to
- is not equal to

### Array

Supports comparisons:
- exists
- does not exist
- is empty
- is not empty
- contains
- does not contain
- length equal to
- length not equal to
- length greater than
- length less than
- length greater than or equal to
- length less than or equal to

### Object

Supports comparisons:
- exists
- does not exist
- is empty
- is not empty

----------------------------------------

# Webhook Node Documentation

## Core Concepts
The **Webhook node** in n8n is used to create webhooks that can receive data from apps and services when an event occurs. It acts as a trigger node, starting n8n workflows. The node can also return data generated at the end of a workflow, similar to an API endpoint.

## Node Parameters

### Webhook URLs
- **Test URL**: Registers a test webhook when selected, displaying data in the workflow for testing.
- **Production URL**: Registers a production webhook when the workflow is activated, without displaying workflow data during execution.

### HTTP Method
Supports the following standard HTTP request methods:
- DELETE
- GET
- HEAD
- PATCH
- POST
- PUT

### Webhook Max Payload
The maximum payload size for the webhook is **16MB**. For self-hosted n8n, this can be changed via the environment variable `N8N_PAYLOAD_SIZE_MAX`.

### Path
The **Path** field can include a randomly generated URL path or a manually specified one, supporting formats like:
- `/:variable`
- `/path/:variable`
- `/:variable/path`
- `/:variable1/path/:variable2`
- `/:variable1/:variable2`

### Supported Authentication Methods
Authentication options available for the webhook URL:
- Basic auth
- Header auth
- JWT auth
- None

### Respond
Options for the response behavior:
- **Immediately**: Returns a response code and the message **Workflow got started**.
- **When Last Node Finishes**: Returns the response code and data output from the last executed node.
- **Using 'Respond to Webhook' Node**: Follows the definition provided in the Respond to Webhook node.

### Response Code
Customize the HTTP response code returned upon successful execution, including common response codes or custom codes.

### Response Data
Configure response body data options:
- **All Entries**: Returns all entries as an array.
- **First Entry JSON**: Returns the JSON data of the first entry as a JSON object.
- **First Entry Binary**: Returns the binary data of the first entry as a binary file.
- **No Response Body**: Returns without a body.

### Node Options
Additional configuration options include:
- **Allowed Origins (CORS)**: Specify allowed cross-origin domains (default is `*`).
- **Binary Property**: Allows reception of binary data.
- **Ignore Bots**: Ignores requests from bots.
- **IP(s) Whitelist**: Limits invoking services to specified IP addresses.
- **No Response Body**: Prevents sending a response body.
- **Raw Body**: Receives data in raw format (JSON/XML).
- **Response Content-Type**: Specifies format for the webhook body.
- **Response Data**: Sends custom data with the response.
- **Response Headers**: Adds extra headers to the response.
- **Property Name**: Returns a specific JSON key value.

| Option                  | Required node configuration                                             |
|-------------------------|-----------------------------------------------------------------------|
| Allowed Origins (CORS)  | Any                                                                   |
| Binary Property          | HTTP Method > POST / PATCH / PUT                                      |
| Ignore Bots             | Any                                                                   |
| IP(s) Whitelist         | Any                                                                   |
| Property Name           | Respond > When Last Node Finishes / Response Data > First Entry JSON |
| No Response Body        | Respond > Immediately                                                 |
| Raw Body                | Any                                                                   |
| Response Code           | Any except Respond > Using 'Respond to Webhook' Node                 |
| Response Content-Type   | Respond > When Last Node Finishes / Response Data > First Entry JSON  |
| Response Data           | Respond > Immediately                                                 |
| Response Headers        | Any                                                                   |

## Templates and Examples
Refer to the integration templates for the Webhook node or search all templates in n8n.

## Common Issues
For common questions or issues and suggested solutions, refer to the relevant section in the documentation.

----------------------------------------

# Workflow Trigger Node

The Workflow Trigger node gets triggered when a workflow is updated or activated. 

**Deprecated:**  
n8n has deprecated the Workflow Trigger node and moved its functionality to the [n8n Trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.n8ntrigger/).

## Node Parameters

The node includes a single parameter to identify the **Events** that should trigger it. Choose from these events:

- **Active Workflow Updated**: Triggers when this workflow is updated.
- **Workflow Activated**: Triggers when this workflow is activated.

You can select one or both of these events.

----------------------------------------

# XML Node in n8n

The XML node is used to convert data from and to XML format.

## Node Parameters

- **Mode**: Format for conversion.
  - **JSON to XML**: Converts data from JSON to XML.
  - **XML to JSON**: Converts data from XML to JSON.
- **Property Name**: Name of the property containing the data to convert.

## Node Options

Available options regardless of the **Mode**:

- **Attribute Key**: Prefix used to access attributes. Default: `$`.
- **Character Key**: Prefix for character content. Default: `_`.

### JSON to XML Options

Only available when **JSON to XML** mode is selected:

- **Allow Surrogate Chars**: Enable or disable the use of Unicode surrogate block characters.
- **Cdata**: Wrap text nodes in `<![CDATA[ ... ]]>` when necessary.
- **Headless**: Omit XML header if turned on.
- **Root Name**: Specify the root element name.

### XML to JSON Options

Only available when **XML to JSON** mode is selected:

- **Explicit Array**: Control whether child nodes are put in an array.
- **Explicit Root**: Decide if the root node is included in the resulting object.
- **Ignore Attributes**: Ignore all XML attributes and create only text nodes.
- **Merge Attributes**: Merge attributes and child elements as properties or keep attributes separate.
- **Normalize**: Trim whitespace inside text nodes.
- **Normalize Tags**: Normalize tag names to lowercase.
- **Trim**: Trim whitespace at the beginning and end of text nodes.

----------------------------------------

# Chat Trigger Node

Use the Chat Trigger node for AI workflows for chatbots and chat interfaces. 

## Workflow Execution
Every message to the Chat Trigger executes your workflow. Multiple messages from a single conversation count as separate executions.

## Node Parameters

### Make Chat Publicly Available
Set to enable public access or restrict to manual chat interface.

### Mode
Choose user access method:
- **Hosted Chat**: Use n8n's hosted chat interface.
- **Embedded Chat**: Create a custom chat interface and call the webhook URL in **Chat URL**.

### Authentication
Select access restriction method:
- **None**: No authentication required.
- **Basic Auth**: Requires a credential with username/password.
- **n8n User Auth**: Restricted to logged-in n8n users.

### Initial Message(s)
Configures the welcome message displayed in Hosted Chat.

## Node Options

### Hosted Chat Options

#### Allowed Origin (CORS)
Set allowed origins for non-preflight requests. Use `*` for all origins.

#### Input Placeholder, Title, and Subtitle
Customize interface text elements.

#### Load Previous Session
Select to load chat messages from a previous session. Must connect Chat trigger and Agent to a memory sub-node.

#### Response Mode
Choose response handling method:
- **When Last Node Finishes**: Returns response and data from the last executed node.
- **Using 'Respond to Webhook' Node**: Responds as defined in Respond to Webhook node.

#### Require Button Click to Start Chat
Enable or disable a **New Conversation** button.

### Embedded Chat Options
Same configuration options as Hosted Chat.

## Set the Chat Response Manually
To modify responses instead of sending direct output from an Agent or Chain node, create a parameter named either `text` or `output`.

## Common Issues
Refer to [Common Issues](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/common-issues/) for troubleshooting.

----------------------------------------

# MCP Server Trigger Node

The MCP Server Trigger node allows n8n to function as a Model Context Protocol (MCP) server, making n8n tools and workflows available to MCP clients.

## How the MCP Server Trigger Node Works

The MCP Server Trigger node serves as an entry point for MCP clients by exposing a URL for interactions to access n8n tools. Unlike traditional trigger nodes which respond to events, this node connects to and executes tool nodes.

## Node Parameters

### MCP URL

The MCP Server Trigger node has two **MCP URLs**: test and production.
- **Test**: Registers a test MCP URL when **Listen for Test Event** or **Execute workflow** is selected.
- **Production**: Registers a production MCP URL when the workflow is activated.

### Authentication

Authentication methods for clients connecting to your MCP URL:
- Bearer auth
- Header auth

For further information on setting up each credential type, refer to HTTP request credentials.

### Path

You can specify a URL path, including route parameters to avoid conflicts with other servers. The **Path** field can take the following formats:
- `/:variable`
- `/path/:variable`
- `/:variable/path`
- `/:variable1/path/:variable2`
- `/:variable1/:variable2`

## SSE and Streamable HTTP Support

The MCP Server Trigger node supports:
- **Server-Sent Events (SSE)**
- **Streamable HTTP**

## Limitations

- The MCP Server Trigger node relies on SSE or streamable HTTP, which can lead to issues when running in queue mode with multiple webhook replicas. All `/mcp*` requests must be routed to a single webhook replica for reliable connections.

## Example Configuration for nginx

When using a reverse proxy, disable proxy buffering for the MCP endpoint:

```nginx
location /mcp/ {
    proxy_http_version          1.1;
    proxy_buffering             off;
    gzip                        off;
    chunked_transfer_encoding   off;
    proxy_set_header            Connection '';
}
```

## Related Resources

- Refer to the [MCP Client Tool](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolmcp/) for connecting n8n AI agents to external tools.
- Check the [MCP documentation](https://modelcontextprotocol.io/introduction) for more details about the protocol.

----------------------------------------

# Credentials Library

This section contains essential information about authenticating the different nodes in n8n.

## Core Concepts

- **Credentials**: Credentials are necessary for authenticating requests made to external services from within n8n nodes.

## Configuration Instructions

- Refer to the [Manage Credentials](https://docs.n8n.io/credentials/) guide for creating, managing, and sharing credentials in n8n.

## Best Practices

- Store sensitive information in environment variables when possible.
- Regularly rotate credentials to enhance security.

## API Documentation (select nodes)

### Authentication Methods
- OAuth2: Used by many web services (e.g., Google, Slack).
- Basic Auth: Requires a username and password for authentication.
  
### Example of OAuth2 Configuration
```json
{
  "auth": {
    "type": "OAuth2",
    "clientId": "YOUR_CLIENT_ID",
    "clientSecret": "YOUR_CLIENT_SECRET",
    "redirectUri": "YOUR_REDIRECT_URI"
  }
}
```

### Example of Basic Auth Configuration
```json
{
  "auth": {
    "type": "basicAuth",
    "username": "YOUR_USERNAME",
    "password": "YOUR_PASSWORD"
  }
}
```

## Node & Parameter Details

- **HTTP Request Node**: Can be configured to use different types of authentication based on the external service requirements.
- **Credentials Parameter**: In each node that needs authentication, specify the credentials under the credentials field.

## Workflow Patterns

- Connect nodes that require authentication by linking them through authorized credential configurations to ensure secure data handling.

----------------------------------------

# Action Network Credentials

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need an Action Network account with API key access enabled and:
- An **API Key**

### Steps to Get an API Key:
1. Log in to your Action Network account.
2. From the **Start Organizing** menu, select **Details > API & Sync**.
3. Select the list you want to generate an API key for.
4. Generate an API key for that list.
5. Copy the **API Key** and enter it in your n8n credential.

Refer to the Action Network API Authentication instructions for more information.

## Request API Access
Each user account and group on the Action Network has a separate API key to access that user or group's data. You must explicitly request API access from Action Network, which you can do in one of two ways:
1. If you're already a paying customer, contact them to request partner access (includes API key access).
2. If you're a developer, request a developer account. Once your account request is granted, you'll have API key access.

----------------------------------------

# ActiveCampaign Credentials

## Supported Authentication Methods
- API key

## Configuration Instructions

To configure this credential, you'll need an ActiveCampaign account and:
- An **API URL**
- An **API Key**

### Steps to Obtain API Credentials:
1. In ActiveCampaign, select **Settings** (the gear cog icon) from the left menu.
2. Select **Developer**.
3. Copy the **API URL** and enter it in your n8n credential.
4. Copy the **API Key** and enter it in your n8n credential.

Refer to the ActiveCampaign documentation for more information on obtaining your API URL and Key. 

## Nodes Using ActiveCampaign Credentials
- [ActiveCampaign](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.activecampaign/)
- [Active Campaign Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.activecampaigntrigger/)

----------------------------------------

# Acuity Scheduling Credentials

## Authentication Nodes
You can use these credentials to authenticate the following node:
- **Acuity Scheduling Trigger**

## Prerequisites
- Create an Acuity Scheduling account.

## Supported Authentication Methods
- API Key
- OAuth2

## Using API Key
To configure this credential, you'll need:
- A numeric **User ID**
- An **API Key**

Refer to the Acuity API Quick Start authentication instructions to generate an API key and view your User ID.

## Using OAuth2
For n8n Cloud users:
- Users do not need to provide connection details. Select **Connect my account** to connect through your browser.
- If setting up from scratch, complete the Acuity OAuth2 Account Registration page. Use the **Client ID** and **Client Secret** provided from that registration.

----------------------------------------

# Adalo Credentials

You can use these credentials to authenticate the following node:

- Adalo

## Supported Authentication Methods

- API Key

## Using API Key

To configure this credential, you'll need an Adalo account and:

- An **API Key**
- An **App ID**

### Steps to Get API Key and App ID

1. From the app dropdown in the top navigation, select **CREATE NEW APP**.
2. Select the App Layout type and select **Next**. Adalo recommends using **Mobile Only** for new users.
3. Choose a template or select **Blank**, then select **Next**.
4. Enter an **App Name**, e.g., `n8n integration`.
5. If applicable, select the **Team** for the app.
6. Select branding colors.
7. Select **Create**. The app editor opens.
8. In the left menu, select **Settings** (the gear cog icon).
9. Select **App Access**.
10. In the **API Key** section, select **Generate Key**. If you don't have the correct plan, you'll be prompted to upgrade.
11. Copy the key and enter it as the **API Key** in your n8n credential.
12. The URL includes the **App ID** after `https://app.adalo.com/apps/`. For example, if the URL is `https://app.adalo.com/apps/b78bdfcf-48dc-4550-a474-dd52c19fc371/app-settings`, `b78bdfcf-48dc-4550-a474-dd52c19fc371` is the App ID. Copy this value and enter it in your n8n credential.

----------------------------------------

# Affinity Credentials

You can use these credentials to authenticate the following nodes:

- Affinity
- Affinity Trigger

## Prerequisites

Create an Affinity account at the Scale, Advanced, or Enterprise subscription tiers.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the documentation on obtaining your Affinity API key to get your API key.

----------------------------------------

# Agile CRM Credentials

## Supported Authentication Methods
- API key

## Configuration Instructions
To configure Agile CRM credentials, you'll need:
- An **Email Address** registered with AgileCRM
- A REST **API Key**: Access your Agile CRM API key through **Admin Settings > Developers & API > REST API key**.
- An Agile CRM **Subdomain** (e.g., `n8n`) 

## Authentication Node
- **Agile CRM**: Use the credentials to authenticate with the Agile CRM node.

----------------------------------------

# Airtable Credentials

You can use these credentials to authenticate the following nodes:
- Airtable
- Airtable Trigger

## Prerequisites
- Create an Airtable account.

## Supported Authentication Methods
- Personal Access Token (PAT)
- OAuth2

**API Key Deprecation:**  
Airtable has deprecated API key authentication as of February 2024. Replace existing API credentials with either a Personal Access Token or OAuth2 credential. n8n recommends using Personal Access Token.

## Using Personal Access Token
### Configuration Steps:
1. Go to the Airtable Builder Hub Personal access tokens page.
2. Select **+ Create new token**.
3. Enter a **Name** for your token (e.g., `n8n credential`).
4. Add **Scopes**. Recommended:
   - `data.records:read`
   - `data.records:write`
   - `schema.bases:read`
5. Select the **Access** for your token (single base, multiple bases, or all bases).
6. Select **Create token**.
7. Copy the displayed token and enter it in your n8n credential as the **Access Token**.

## Using OAuth2
### Configuration Steps:
1. Open your Airtable Builder Hub OAuth integrations page.
2. Select the **Register new OAuth integration** button.
3. Enter a name for your OAuth integration.
4. Copy the **OAuth Redirect URL** from your n8n credential.
5. Paste the redirect URL in Airtable as the **OAuth redirect URL**.
6. Select **Register integration**.
7. On the following page, copy the **Client ID** from Airtable and paste it into the **Client ID** in your n8n credential.
8. In Airtable, select **Generate client secret**.
9. Copy the client secret and paste it into the **Client Secret** in your n8n credential.
10. Select the following scopes in Airtable:
    - `data.records:read`
    - `data.records:write`
    - `schema.bases:read`
11. Select **Save changes** in Airtable.
12. In your n8n credential, select **Connect my account**.
13. Follow the instructions and select the base you want to work on (or all bases).
14. Select **Grant access** to complete the connection.

----------------------------------------

# Airtop Credentials

## Supported Nodes
- Airtop

## Prerequisites
- Create an Airtop account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, follow these steps to generate a new API key:

1. Log in to the Airtop Portal.
2. Go to API Keys.
3. Select the **+ Create new key** button.
4. Enter a name for the API key.
5. Select the generated key to copy it.
6. Enter this as the **API Key** in your n8n credential.

----------------------------------------

# AlienVault Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

Create an AlienVault account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **OTX Key**: Once you have an AlienVault account, the **OTX Key** displays in your **Settings**.

----------------------------------------

# AMQP Credentials

You can use these credentials to authenticate the following nodes:

- **AMQP Sender**
- **AMQP Trigger**

## Prerequisites

Install an AMQP 1.0-compatible message broker like ActiveMQ.

## Supported Authentication Methods

- AMQP connection

## Using AMQP Connection

To configure this credential, you'll need:

- **Hostname**: Enter the hostname of your AMQP message broker.
- **Port**: Enter the port number the connection should use.
- **User**: Enter the name of the user to establish the connection as. 
  - Example: `admin` (default username in ActiveMQ)
- **Password**: Enter the user's password.
  - Example: `admin` (default password in ActiveMQ)
- _Optional_: **Transport Type**: Enter either `tcp` or `tls`.

----------------------------------------

# Anthropic Credentials

You can use these credentials to authenticate the following node:
- Anthropic Chat Model

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need an Anthropic Console account with access to Claude.

1. In the Anthropic Console, open **Settings > API Keys**.
2. Select **+ Create Key**.
3. Give your key a **Name**, like `n8n-integration`.
4. Select **Copy Key** to copy the key.
5. Enter this as the **API Key** in your n8n credential.

----------------------------------------

# APITemplate.io Credentials

## Supported Nodes
- **APITemplate.io**: Use these credentials to authenticate the APITemplate.io node.

## Prerequisites
- Create an [APITemplate.io](https://apitemplate.io/) account.

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Once you've created an APITemplate.io account, navigate to **API Integration** to copy the **API Key**.

----------------------------------------

# Auth0 Management Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

Create an Auth0 account.

## Supported Authentication Methods

- API client secret

## Using API Client Secret

To configure this credential, you'll need:

- An Auth0 **Domain**
- A **Client ID**
- A **Client Secret**

Refer to the Auth0 Management API Get Access Tokens documentation for instructions on obtaining the Client ID and Client Secret from the application's **Settings** tab.

----------------------------------------

# Asana Credentials

## Supported Nodes
- Asana
- Asana Trigger

## Supported Authentication Methods
- Access Token
- OAuth2

## Using Access Token
To configure this credential, you will need:
- A Personal Access Token (PAT)

### Steps to Obtain PAT:
1. Open the Asana developer console.
2. In the Personal access tokens section, select Create new token.
3. Enter a Token name, for example, `n8n integration`.
4. Agree to the Asana API terms.
5. Create token.
6. Copy the token and enter it as the Access Token in your n8n credential.

## Using OAuth2
To configure this credential, you will need an Asana account.

### Note for n8n Cloud Users
- Cloud users don't need to provide connection details. Select Connect my account to connect through your browser.

### For Self-Hosting:
1. Open the Asana developer console.
2. In the My apps section, select Create new app.
3. Enter an App name, for example, `n8n integration`.
4. Select a purpose for your app.
5. Agree to the Asana API terms.
6. Create app and access the app's Basic Information.
7. Select OAuth from the left menu.
8. In n8n, copy the OAuth Redirect URL.
9. In Asana, add the redirect URL from n8n.
10. Copy the Client ID from Asana and enter it in your n8n credential.
11. Copy the Client Secret from Asana and enter it in your n8n credential.

----------------------------------------

# Automizy Credentials

## Supported Authentication Methods
- API Token

## Configuration Instructions
To configure these credentials, you will need:
- An **API Token**: Create new or access existing API tokens from the **Automizy dashboard > Settings > API Token**.

----------------------------------------

# Autopilot Credentials

## Supported Nodes
- **Autopilot**
- **Autopilot Trigger**

## Branding Change
Autopilot has become Ortto. The Autopilot credentials and nodes are only compatible with the Autopilot API.

## Prerequisites
- Create an [Autopilot](https://app.autopilothq.com/) account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Generate an API key in **Settings > Autopilot API**. Refer to [Autopilot API authentication](https://autopilot.docs.apiary.io/#reference/authentication) for more information.

----------------------------------------

# AWS Credentials

## Supported Nodes
You can use these credentials to authenticate the following nodes:
- AWS Bedrock Chat Model
- AWS Certificate Manager
- AWS DynamoDB
- AWS Elastic Load Balancing
- AWS Lambda
- AWS Rekognition
- AWS S3
- AWS SES
- AWS SNS
- AWS SNS Trigger
- AWS SQS
- AWS Textract
- AWS Transcribe
- Embeddings AWS Bedrock

## Supported Authentication Methods
- API access key

## Using API Access Key
To configure this credential, you'll need an AWS account and:
- Your AWS **Region**
- The **Access Key ID**: Generated when you create an access key.
- The **Secret Access Key**: Generated when you create an access key.

### Steps to Create Access Key
1. In your n8n credential, select your AWS **Region**.
2. Log in to the IAM console.
3. Select your user name and then select **Security credentials**.
4. In the **Access keys** section, select **Create access key**.
5. Choose your use case on the **Access key best practices & alternatives page**, or select **Other**.
6. Select **Next**.
7. Set a **description** tag value for the access key (e.g., `n8n integration`).
8. Select **Create access key**.
9. Reveal the **Access Key ID** and **Secret Access Key** and enter them in n8n.
10. To use a **Temporary security credential**, turn that option on and add a **Session token**. Refer to the AWS Temporary security credential documentation for more information on working with temporary security credentials.
11. If you use Amazon Virtual Private Cloud (VPC) to host n8n, you can establish a connection between your VPC and some apps by using **Custom Endpoints** for relevant custom endpoint(s). This setup works with the following apps:
    - Rekognition
    - Lambda
    - SNS
    - SES
    - SQS
    - S3

You can also generate access keys through the AWS CLI and AWS API. Refer to the AWS Managing Access Keys documentation for instructions on generating access keys using these methods.

----------------------------------------

# Azure Cosmos DB Credentials

## Core Concepts
Credentials are used to authenticate the Azure Cosmos DB node.

## Prerequisites
- Create an Azure subscription.
- Create an Azure Cosmos DB account.

## Supported Authentication Methods
- API Key

## Configuration Instructions
To configure the Azure Cosmos DB credentials, you need:
- **Account**: The name of your Azure Cosmos DB account.
- **Key**: A key for your Azure Cosmos DB account. Select **Overview** > **Keys** in the Azure portal.
- **Database**: The name of the Azure Cosmos DB database to connect to.

Refer to the Azure documentation for more detailed steps on obtaining your primary key.

## Common Issues
### Need Admin Approval
An error may occur when adding credentials for a Microsoft360 or Microsoft Entra account if admin approval is required. The procedure for granting permission is covered in the Microsoft Entra documentation.

----------------------------------------

# Azure OpenAI Credentials

## Supported Nodes
- **Chat Azure OpenAI**
- **Embeddings Azure OpenAI**

## Prerequisites
- Create an Azure subscription.
- Access to Azure OpenAI within that subscription.

## Supported Authentication Methods
- API key
- Azure Entra ID (OAuth2)

## Using API Key
### Required Information
- **Resource Name**: The name given to the resource.
- **API Key**: Use Key 1 from **Keys and Endpoint**.
- **API Version**: Refer to the Azure OpenAI API version documentation.

### Model Name
Use the **Deployment name** as the model name for Azure OpenAI nodes using this credential.

## Using Azure Entra ID (OAuth2)
### Note for n8n Cloud Users
Cloud users should select **Connect my account** to connect through the browser.

### Configuration Steps for Self-Hosted Users
1. Register an application with the Microsoft Identity Platform.
2. Generate a client secret for that application.

### Register an Application
1. Open the Microsoft Application Registration Portal.
2. Select **Register an application**.
3. Enter **Name** for the app.
4. Select **Supported account types**: Accounts in any organizational directory and personal Microsoft accounts.
5. Copy the **OAuth Callback URL** from n8n and paste it into the **Redirect URI** field.
6. Select **Select a platform** > **Web**.
7. Select **Register** to create the application.
8. Copy the **Application (client) ID** and paste it into n8n as the **Client ID**.

### Generate a Client Secret
1. On the Microsoft application page, select **Certificates & secrets**.
2. In **Client secrets**, select **+ New client secret**.
3. Enter a **Description** for your client secret.
4. Select **Add**.
5. Copy the **Secret** value.
6. Paste it into n8n as the **Client Secret**.
7. Select **Connect my account** in n8n to finish the setup.

## Setting Custom Scopes
Default scopes for Azure Entra ID credentials:
- `openid`
- `offline_access`
- `AccessReview.ReadWrite.All`
- `Directory.ReadWrite.All`
- `NetworkAccessPolicy.ReadWrite.All`
- `DelegatedAdminRelationship.ReadWrite.All`
- `EntitlementManagement.ReadWrite.All`
- `User.ReadWrite.All`
- `Directory.AccessAsUser.All`
- `Sites.FullControl.All`
- `GroupMember.ReadWrite.All`

To select different scopes, enable the **Custom Scopes** slider and edit the **Enabled Scopes** list.

----------------------------------------

# Azure Storage Credentials

You can use these credentials to authenticate the following node:

- Azure Storage

## Prerequisites

- Create an Azure subscription.
- Create an Azure storage account.

## Supported Authentication Methods

- OAuth2
- Shared Key

## Using OAuth2

### Steps to Configure OAuth2

1. Register an application with the Microsoft Identity Platform.
2. Generate a client secret for that application.

#### Register an Application

1. Open the Microsoft Application Registration Portal.
2. Select "Register an application."
3. Enter a name for your app.
4. In "Supported account types," select "Accounts in any organizational directory and personal Microsoft accounts."
5. Copy the OAuth Callback URL from your n8n credential.
6. Paste it into the "Redirect URI (optional)" field.
7. Select "Select a platform" > "Web."
8. Select "Register" to finish creating your application.
9. Copy the Application (client) ID and paste it into n8n as the Client ID.

#### Generate a Client Secret

1. On your Microsoft application page, select "Certificates & secrets."
2. In "Client secrets," select "+ New client secret."
3. Enter a description for your client secret, e.g., `n8n credential`.
4. Select "Add."
5. Copy the Secret in the Value column.
6. Paste it into n8n as the Client Secret.
7. Select "Connect my account" in n8n.
8. Log in to your Microsoft account and allow the app to access your info.

## Using Shared Key

### Steps to Configure Shared Key

- Account: The name of your Azure Storage account.
- Key: A shared key for your Azure Storage account. Access keys can be found under "Security + networking" and then "Access keys."

## Common Issues

### Need Admin Approval

When adding credentials for a Microsoft360 or Microsoft Entra account, you may see a message requiring admin approval. This occurs if the account attempting to grant permissions is managed by Microsoft Entra; an administrator must grant permission to the user for that application. Refer to the Microsoft Entra documentation for the procedure.

----------------------------------------

# BambooHR Credentials

## Integration Node
- **Node**: BambooHR

## Prerequisites
- Create a BambooHR account.

## Supported Authentication Methods
- API key

## API Key Configuration
To configure this credential, you will need:
- **BambooHR Subdomain**: The part between `https://` and `.bamboohr.com`
- **BambooHR API Key**: Refer to the Authentication section of [BambooHR's API documentation](https://documentation.bamboohr.com/docs/getting-started#authentication) for instructions on generating an API key.

----------------------------------------

# Bannerbear Credentials

## Core Concepts
You can use these credentials to authenticate the following node:
- **Bannerbear**

## Prerequisites
- Create a Bannerbear account.

## Supported Authentication Methods
- **API key**

## Using API Key
To configure this credential, you'll need:
- A **Project API Key**: To generate an API key, first create a Bannerbear project. Go to **Settings > API Key** to view the API key. Refer to the [Bannerbear API Authentication documentation](https://developers.bannerbear.com/#authentication) for more detailed steps.

----------------------------------------

# Baserow Credentials

## Node Authentication
You can use these credentials to authenticate the following node:
- Baserow

## Prerequisites
- Create a Baserow account on any hosted instance or a self-hosted instance.

## Supported Authentication Methods
- Basic auth

## Using Basic Auth
To configure these credentials, you'll need:
- Baserow **Host**
- **Username**
- **Password**

### Steps:
1. Enter the **Host** for the Baserow instance:
   - For a Baserow-hosted instance: leave as `https://api.baserow.io`.
   - For a self-hosted instance: set to your self-hosted instance API URL.
2. Enter the **Username** for the user account n8n should use.
3. Enter the **Password** for that user account.

Refer to Baserow's API Authentication documentation for information on creating user accounts.

----------------------------------------

# Beeminder Credentials

## Supported Node
- **Node**: Beeminder

## Prerequisites
- Create a Beeminder account.

## Supported Authentication Methods
- API user token

## Using API User Token
### Configuration Steps
1. **User Name**: Should match the user for whom the Auth Token is generated.
2. **Auth Token**: Generate using one of the following methods:
   - **In the GUI**: From the Apps & API option within Account Settings.
   - **In the API**: From hitting the `auth_token` API endpoint.

----------------------------------------

# Bitbucket Credentials

You can use these credentials to authenticate the following node:

- **Bitbucket Trigger**

## Prerequisites

- Create a Bitbucket account.

## Supported Authentication Methods

- API username and app password

## Using API Username/App Password

To configure this credential, you'll need:

- **Username**: Visible in your Bitbucket profile settings under **Personal settings > Account settings**.
- **App Password**: Refer to the Bitbucket instructions to [Create an app password](https://support.atlassian.com/bitbucket-cloud/docs/create-an-app-password/).

## App Password Permissions

Bitbucket API credentials will only work if the user account you generated the app password for has the appropriate privilege scopes for the selected app password permissions. The n8n credentials dialog will throw an error if the user account lacks the appropriate permissions for the selected scope, indicated as: 

```
Your credentials lack one or more required privilege scopes.
```

Refer to the [Bitbucket App password permissions documentation](https://support.atlassian.com/bitbucket-cloud/docs/app-password-permissions/) for more information on working with these permissions.

----------------------------------------

# Bitly Credentials for n8n

You can use these credentials to authenticate the following node:

- **Node**: Bitly

## Prerequisites

- Create a Bitly account.

## Supported Authentication Methods

- API token
- OAuth2

## Using API Token

To configure this credential, you need:

- An **Access Token**: Once logged in, visit **Settings > Developer Settings > API** to generate an Access Token.

## Using OAuth2

- Cloud users don't need to provide connection details. Select **Connect my account** to connect through your browser.
- For more details on OAuth2 configuration, refer to the [Bitly API Authentication documentation](https://dev.bitly.com/docs/getting-started/authentication/).

----------------------------------------

# Bitwarden Credentials

## Supported Authentication Methods
- **API key**

## Using API Key
To configure this credential, you'll need:
- **Client ID**: Provided when you generate an API key
- **Client Secret**: Provided when you generate an API key
- **Environment**:
  - Choose **Cloud-hosted** if you don't self-host Bitwarden. No further configuration required.
  - Choose **Self-hosted** if you host Bitwarden on your own server. Enter your **Self-hosted domain** in the appropriate field.

The Client ID and Client Secret must be for an **Organization API Key**, not a Personal API Key. Refer to the [Bitwarden Public API Authentication documentation](https://bitwarden.com/help/public-api/#authentication) for instructions on generating an Organization API Key.

----------------------------------------

# Box Credentials

## Supported Nodes
- Box
- Box Trigger

## Prerequisites
- Create a Box account.

## Supported Authentication Methods
- OAuth2

## Using OAuth2
For n8n Cloud users:  
- Select **Connect my account** to connect through your browser.

To configure OAuth2 from scratch, create a Custom App. Refer to the [Box OAuth2 Setup documentation](https://developer.box.com/guides/authentication/oauth2/oauth2-setup/) for additional details.

----------------------------------------

# Brandfetch Credentials

## Supported Authentication Methods
- **API Key**

## Configuration Instructions
To configure the Brandfetch credential, you'll need:
- An **API Key**: Generate an API key by creating a Brandfetch developer account. Refer to the [Brandfetch Create an Account documentation](https://docs.brandfetch.com/docs/apis#-create-an-account). 

## Related Resources
Refer to [Brandfetch's API documentation](https://docs.brandfetch.com/docs/apis) for more information about the service. 

## Node Details
You can use these credentials to authenticate the following node:
- **Brandfetch**: [Brandfetch Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.brandfetch/)

----------------------------------------

# Brevo Credentials

You can use these credentials to authenticate the following nodes:

- Brevo node
- Brevo Trigger node

## Prerequisites

Create a Brevo developer account.

## Supported Authentication Methods

- API key

## API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the Brevo API Quick Start documentation for instructions on creating a new API key.

----------------------------------------

# Bubble Credentials

You can use these credentials to authenticate the following nodes:

- Bubble

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Token**
- An **App Name**
- Your **Domain**, if using a custom domain

### Setup Steps

1. Go to the **Apps** page in Bubble.
2. Select **Create an app**.
3. Enter a **Name** for your app (e.g., `n8n-integration`).
4. Select **Get started**. The app's details will open.
5. In the left navigation, select **Settings**.
6. Select the **API** tab.
7. In the **Public API Endpoints** section, check the box to **Enable Data API**.
8. Copy the **Data API root URL** (e.g., `https://n8n-integration.bubbleapps.io/version-test/api/1.1/obj`).
9. Copy the part of the URL after `https://` and before `.bubbleapps.io` and enter it as the **App Name** in n8n.
10. Select **Generate a new API token**.
11. Enter an **API Token Label** (e.g., `n8n integration`).
12. Copy the **Private key** and enter it as your **API Token** in your n8n credential.
13. In n8n, select the **Environment**:
    - Select **Development** for an un-deployed app.
    - Select **Live** for a deployed app.
14. In n8n, select your **Hosting**:
    - Select **Bubble Hosting** if no custom domain is set.
    - If a custom domain is set, select **Self Hosted** and enter your custom **Domain**.

----------------------------------------

# Cal.com Credentials

You can use these credentials to authenticate the following node:

- **Cal.com Trigger**

## Prerequisites

- Create a Cal.com account.

## Supported Authentication Methods

- API Key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the Cal API Quick Start documentation for information on how to generate a new API key.
- A **Host**: If you're using the cloud version of Cal.com, leave the Host as `https://api.cal.com`. If you're self-hosting Cal.com, enter the **Host** for your Cal.com instance.

----------------------------------------

# Carbon Black Credentials

## Authentication Methods
- **API Key**

## Configuration Instructions
To configure the Carbon Black credential, you need:
- **URL**: This URL is determined by the environment/product URL you use. It can be found in the web address of your Carbon Black Cloud console. Refer to the [Carbon Black's URL Parts documentation](https://developer.carbonblack.com/reference/carbon-black-cloud/authentication#the-url-parts) for more details.
- **Access Token**: Create an API key following the guidelines in the [Carbon Black Create an API key documentation](https://developer.carbonblack.com/reference/carbon-black-cloud/authentication#carbon-black-cloud-manages-identities-and-roles). Use the **API Secret Key** as the **Access Token** in n8n.

## Related Resources
Refer to [Carbon Black's documentation](https://developer.carbonblack.com/reference/carbon-black-cloud/cb-defense/latest/rest-api/) for more information about the service. This credential is used with the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to make a [Custom API call](https://docs.n8n.io/integrations/custom-operations/). For additional context, see [Custom API operations](https://docs.n8n.io/integrations/custom-operations/).

----------------------------------------

# Calendly Credentials

You can use these credentials to authenticate the following node:

- **Calendly Trigger Node**

## Supported Calendly Plans
The Calendly Trigger node relies on Calendly webhooks. Webhook access is available in paid plans only.

## Supported Authentication Methods
- API access token
- OAuth2

## Using API Access Token

To configure this credential, you'll need:
- An API Key or **Personal Access Token**

### Steps to Get Your Access Token:
1. Go to the Calendly **Integrations & apps** page.
2. Select **API & Webhooks**.
3. In **Your Personal Access Tokens**, select **Generate new token**.
4. Enter a **Name** for your access token, e.g., `n8n integration`.
5. Select **Create token**.
6. Select **Copy token** and enter it in your n8n credential.

Refer to Calendly's API authentication documentation for more information.

## Using OAuth2

To configure this credential, you'll need:
- A **Client ID**
- A **Client Secret**

### Steps to Get Client ID and Client Secret:
1. Log in to Calendly's developer portal and go to **My apps**.
2. Select **Create new app**.
3. Enter a **Name of app**, e.g., `n8n integration`.
4. In **Kind of app**, select **Web**.
5. In **Environment type**, select **Sandbox** or **Production**. (Use Sandbox for development and create a second app for Production when ready.)
6. Copy the **OAuth Redirect URL** from n8n and enter it as a **Redirect URI** in the OAuth app.
7. Select **Save & Continue**. The app details display.
8. Copy the **Client ID** and enter it as your n8n **Client ID**.
9. Copy the **Client Secret** and enter it as your n8n **Client Secret**.
10. Select **Connect my account** in n8n and follow the on-screen prompts to finish authorizing the credential.

Refer to the documentation for more information on registering your application with Calendly.

----------------------------------------

# Chargebee Credentials

## Supported Nodes
- Chargebee
- Chargebee Trigger

## Prerequisites
- Create a Chargebee account.

## Supported Authentication Methods
- API key

## Using API Key
### Required Configuration
- **Account Name**: Your Chargebee Site Name or subdomain (e.g., for `https://n8n.chargebee.com`, the Account Name is `n8n`).
- **API Key**: Generate an API key by following the Chargebee [Creating an API key documentation](https://www.chargebee.com/docs/api_keys.html#creating-an-api-key).

Refer to Chargebee's [API authentication documentation](https://apidocs.chargebee.com/docs/api/auth?lang=curl) for further details.

----------------------------------------

# CircleCI Credentials

You can use these credentials to authenticate the following nodes:

- CircleCI

## Prerequisites

- Create a CircleCI account.

## Supported Authentication Methods

- Personal API token

## Using Personal API Token

To configure this credential, you'll need:

- A **Personal API Token**: Refer to the CircleCI Creating a Personal API token documentation for instructions on creating your token.

----------------------------------------

# Cisco Secure Endpoint Credentials

## Overview
These credentials are used to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites
- Create a Cisco DevNet developer account.
- Access to a Cisco Secure Endpoint license.

## Authentication Methods
- OAuth2

## Configuration Instructions for OAuth2
To configure this credential, you'll need:
- **Region**: Options are:
  - Asia Pacific, Japan, and China
  - Europe
  - North America
- **Client ID**: Provided when you register a SecureX API Client.
- **Client Secret**: Provided when you register a SecureX API Client.

To obtain a Client ID and Client Secret, register a SecureX API Client. Use the SecureX Client Password as the Client Secret within the n8n credential. 

For detailed instructions, refer to Cisco Secure Endpoint's authentication documentation.

----------------------------------------

# Cisco Meraki Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create a Cisco DevNet developer account.
- Access to a Cisco Meraki account.

## Authentication Methods

- **API Key**

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the Cisco Meraki Obtaining your Meraki API Key documentation for instructions on getting your API Key.

----------------------------------------

# Cisco Umbrella Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create a Cisco DevNet developer account.
- A Cisco Umbrella user account with **Full Admin** role.

## Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**
- A **Secret**: Provided when you generate an API key

Refer to the Cisco Umbrella Manage API Keys documentation for instructions on creating an Umbrella API key.

----------------------------------------

# Webex by Cisco Credentials

## Supported Nodes
- Webex by Cisco
- Webex by Cisco Trigger

## Prerequisites
- Create a Webex by Cisco account to access developer account.

## Supported Authentication Methods
- OAuth2

## Using OAuth2
- For n8n Cloud users: Enter the Credentials Name and click **Connect my account** to connect your Webex by Cisco account to n8n.
- To configure OAuth2 from scratch, create an integration. Refer to the Webex Registering your Integration documentation.

### Recommended Scopes for Integration
- `spark:rooms_read`
- `spark:messages_write`
- `spark:messages_read`
- `spark:memberships_read`
- `spark:memberships_write`
- `meeting:recordings_write`
- `meeting:recordings_read`
- `meeting:preferences_read`
- `meeting:schedules_write`
- `meeting:schedules_read`

----------------------------------------

# Clearbit Credentials

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Refer to Clearbit's API Authentication documentation for more information on creating and viewing API keys.

----------------------------------------

# ClickUp Credentials

## Supported Authentication Methods
- API access token
- OAuth2

## Using API Access Token
To configure this credential, you will need:
- A Personal API **Access Token**

### Steps to Obtain Personal API Token:
1. For ClickUp 2.0: Select your avatar in the lower-left corner, then select **Apps**. For ClickUp 3.0: Select your avatar in the upper-right corner, select **Settings**, and then select **Apps** in the sidebar.
2. Under **API Token**, select **Generate**.
3. Copy your **Personal API token** and enter it as the **Access Token** in your n8n credential.

## Using OAuth2
### Note for n8n Cloud Users
- Cloud users do not need to provide connection details. Select **Connect my account** to connect through your browser.

### Steps for Self-Hosting n8n:
1. In ClickUp, select your avatar and select **Integrations**.
2. Select **ClickUp API**.
3. Select **Create an App** and enter a **Name** for your app.
4. In n8n, copy the **OAuth Redirect URL** and enter it as your ClickUp app's **Redirect URL**.
5. Once your app is created, copy the **client_id** and **secret** and enter them in your n8n credential.
6. Select **Connect my account** and follow the on-screen prompts to finish connecting the credential.

----------------------------------------

# Clockify Credentials

## Nodes Using Clockify Credentials
- **Clockify Node:** [Clockify](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.clockify/)
- **Clockify Trigger Node:** [Clockify Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.clockifytrigger/)

## Prerequisites
- Create a **Clockify** account.

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you'll need:
- An **API Key:** Access your API key from your **Clockify Profile Settings**. 

## Related Resources
- Refer to [Clockify's API documentation](https://docs.developer.clockify.me/) for more information about the service.

----------------------------------------

# Cloudflare Credentials

## Core Concepts
These credentials authenticate the following node:
- Cloudflare node

## Prerequisites
- Create a Cloudflare account.
- Add a domain.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Follow the Cloudflare documentation to create an API token.

----------------------------------------

# Cockpit Credentials

## Supported Authentication Methods
- API access token

## Configuration Instructions
To configure the Cockpit credential in n8n, you will need:
- **Cockpit URL**: The URL you use to access your Cockpit instance.
- **Access Token**: Refer to the Cockpit [Managing tokens documentation](https://getcockpit.com/documentation/core/api/authentication/#managing-tokens) for instructions on creating an API token. Use the API token as the n8n Access Token.

## Related Resources
Refer to Cockpit's [API documentation](https://getcockpit.com/documentation/core/api/introduction) for more information about the service.

----------------------------------------

# Coda Credentials

## Supported Nodes
- **Coda**: This credential is used to authenticate the Coda node in n8n.

## Prerequisites
- Create a Coda account.

## Supported Authentication Methods
- **API Access Token**

## Using API Access Token
To configure this credential, you'll need:
- An API **Access Token**: Generate an API access token in your Coda account settings.

----------------------------------------

# Cohere Credentials

## Supported Nodes
You can use these credentials to authenticate the following nodes:
- Cohere
- Reranker Cohere
- Embeddings Cohere

## Prerequisites
- Create a Cohere account.
- For the Trial API, you need User or Owner permissions.
- For Production API, you need Owner permissions.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: To generate a Cohere API key, go to the API Keys section of your Cohere dashboard.

----------------------------------------

# Contentful Credentials

You can use these credentials to authenticate the following nodes:

- Contentful

## Prerequisites

- Create a Contentful account.
- Create a Contentful space.

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need:

- **Space ID**: The Space ID displays as you generate the tokens; refer to the Contentful Find space ID documentation to view the Space ID.
- **Content Delivery API Access Token**: Required for use with the Content Delivery API. Leave blank if not using this API.
- **Content Preview API Access Token**: Required for use with the Content Preview API. Leave blank if not using this API.

View and generate access tokens in Contentful in **Settings > API keys**. Contentful generates tokens for both the Content Delivery API and Content Preview API as part of a single key. Refer to Contentful Creating and managing API keys for detailed instructions.

----------------------------------------

# ConvertAPI Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Supported Authentication Methods

- **API Token**

## Using API Token

To configure this credential, you will need a ConvertAPI account and:

- An **API Token** to authenticate requests to the service.

Refer to ConvertAPI's API documentation for more information about authenticating to the service.

----------------------------------------

# ConvertKit Credentials

## Core Concepts
These credentials are used to authenticate the following nodes:
- ConvertKit
- ConvertKit Trigger

## Prerequisites
- Create a ConvertKit account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you will need:
- An **API Secret**: Access your ConvertKit API key in **Account Settings > Advanced**. Add this key as the **API Secret** in n8n.

----------------------------------------

# Copper Credentials

You can use these credentials to authenticate the following nodes:
- Copper
- Copper Trigger

## Prerequisites
Create a Copper account at the **Professional** or **Business** plan level.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- **API Key**: Refer to the Copper API documentation for generating an API key.
- **Email Address**: Use the API key creator's email address.

----------------------------------------

# Cortex Credentials

## Supported Nodes
- **Cortex**: Authenticate using these credentials.

## Prerequisites
- Install **Cortex** on your server.

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you will need:
- An **API Key**: Refer to the Cortex API Authentication documentation for instructions on generating API keys.
- The URL/Server Address for your **Cortex Instance** (defaults to `http://<your_server_address>:9001/`)

----------------------------------------

# CrateDB Credentials

You can use these credentials to authenticate the following node:
- **CrateDB**

## Prerequisites
- An available instance of CrateDB.

## Supported Authentication Methods
- Account connection.

## Using Account Connection
To configure this credential, you'll need:
- **Host** name
- **Database** name
- **User** name
- User **Password**
- **SSL** parameter options:
  - Allow
  - Disable
  - Require
- **Port** number

Refer to the CrateDB documentation for detailed instructions on these fields and their default values.

----------------------------------------

# crowd.dev Credentials

You can use these credentials to authenticate the following nodes:
- crowd.dev
- crowd.dev Trigger

## Prerequisites
Create a working instance of crowd.dev.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- **URL**:
  - Default for crowd.dev: `https://app.crowd.dev`
  - For self-hosted instances, use the URL for your crowd.dev instance.
- **Tenant ID**: Displayed in the Settings section of the crowd.dev app.
- **API Token**: Displayed in the Settings section of the crowd.dev app.

Refer to the crowd.dev API documentation for more detailed instructions.

----------------------------------------

# CrowdStrike Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create a CrowdStrike account.

## Authentication Methods

- OAuth2

## Using OAuth2

To configure this credential, you'll need:

- The **URL** of your CrowdStrike instance
- A **Client ID**: Generated by creating a new API Client in Crowdstrike in Support > API Clients and Keys.
- A **Client Secret**: Generated by creating a new API Client in Crowdstrike in Support > API Clients and Keys.

## Notes

- This is a credential-only node.

----------------------------------------

# Customer.io Credentials

## Overview
Use Customer.io credentials to authenticate the following nodes:

- Customer.io
- Customer.io Trigger

## Prerequisites
- Create a Customer.io account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:

- **Tracking API Key**: Used with the Track API at `https://track.customer.io/api/v1/`.
- **Region**: Choose from:
  - **Global region**: Default URLs for all non-EU countries/regions.
  - **EU region**: Track API subdomain `track-eu` and App API subdomain `api-eu`; use only if in the EU.
- **Tracking Site ID**: Required with your Tracking API Key.
- **App API Key**: Used with the App API at `https://api.customer.io/v1/api/`.

Refer to the Customer.io [Finding and managing your API credentials documentation](https://customer.io/docs/accounts-and-workspaces/managing-credentials/) for instructions on creating both Tracking API and App API keys.

## API Endpoints
- Track API: `https://track.customer.io/api/v1/`
- App API: `https://api.customer.io/v1/api/`

The Track API requires a Tracking Site ID; the App API does not. Based on the operation, n8n uses the correct API key and its corresponding endpoint.

----------------------------------------

# Datadog Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create a Datadog account.

## Credential Configuration

To configure this credential, you'll need:

- Your Datadog instance **Host**
- An **API Key**
- An **App Key**

Refer to the Datadog API documentation for more information about authenticating with the service.

----------------------------------------

# DeepL Credentials

You can use these credentials to authenticate the following node:
- **DeepL**: [DeepL Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.deepl/)

## Prerequisites
- Create a [DeepL developer](https://www.deepl.com/pro-api) account. n8n supports both Free and Pro API Plans.

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Refer to [DeepL's Authentication documentation](https://developers.deepl.com/docs/getting-started/auth#authentication) for details on obtaining your API key.
- Identify which **API Plan** you are on. DeepL has different API endpoints for each plan:
  - Pro Plan
  - Free Plan

----------------------------------------

# DeepSeek Credentials

You can use these credentials to authenticate the following nodes:

- Chat DeepSeek

## Prerequisites

- Create a DeepSeek account.

## Supported Authentication Methods

- API key

## Configuration Instructions

To configure this credential, you'll need:

- An **API Key**

To generate your API Key:

1. Login to your DeepSeek account or create an account.
2. Open your API keys page.
3. Select **Create new secret key** to create an API key, optionally naming the key.
4. Copy your key and add it as the **API Key** in n8n.

Refer to DeepSeek's API documentation for more information about the service.

----------------------------------------

# Demio Credentials

## Supported Nodes
- **Demio**

## Prerequisites
- Create a Demio account.

## Supported Authentication Methods
- **API Key**

## Configuration Instructions
To configure the Demio credential, you will need:
- An **API Key**
- An **API Secret**

**Requirement:** You must have Owner status in Demio to generate API keys and secrets. 

**Steps to Generate API Keys and Secrets:**
1. Go to **Account Settings > API**.
2. Refer to the **Demio Account Owner Settings documentation** for detailed steps. 

## Dependencies
- Ensure to refer to **Demio's API documentation** for more information about the service.

----------------------------------------

# DFIR-IRIS Credentials

## Usage
These credentials are for authenticating with the **HTTP Request node** in n8n when making a **Custom API call**.

## Prerequisites
- An accessible instance of **DFIR-IRIS**.

## Configuration
To configure this credential, you'll need:
- An **API Key**: Refer to **DFIR-IRIS's API documentation** for instructions on obtaining your API key.
- The **Base URL** of your DFIR-IRIS instance.

----------------------------------------

# DHL Credentials

## Supported Authentication Methods
- **API Key**

## Using API Key

1. Create a DHL Developer account.
2. In the DHL Developer portal, select the user icon to open your User Apps.
3. Select **+ Create App**.
4. Enter an **App name**, e.g., `n8n integration`.
5. Enter a **Machine name**, e.g., `n8n_integration`.
6. In **SELECT APIs**, select **Shipment Tracking - Unified**.
7. In the **Add API to app** section, select the **+** next to **Shipment Tracking - Unified** API.
8. Select **Create App**. The **Apps** page opens, displaying the created app.
9. Select the app to view its details.
10. Select **Show key** next to **API Key**.
11. Copy the **API Key** and enter it in your n8n credential.

Refer to DHL's documentation for detailed information on creating an app.

----------------------------------------

# Discord Credentials

You can use these credentials to authenticate the following node:

- Discord

## Prerequisites

- Create a Discord account.
- For Bot and OAuth2 credentials:
  - Set up your local developer environment.
  - Create an application and a bot user.
- For webhook credentials, create a webhook.

## Supported Authentication Methods

- Bot
- OAuth2
- Webhook

## Using Bot

To configure Bot credentials, you'll need:

- **Bot Token**: Generated once you create an application with a bot.

### Steps to Create a Bot

1. Create an app in the developer portal.
2. Enter a **Name** for your app and select **Create**.
3. Select **Bot** from the left menu.
4. Under **Token**, select **Reset Token** to generate a new bot token.
5. Copy the token and add it to your n8n credential.
6. In **Bot > Privileged Gateway Intents**, add any privileged intents you want your bot to have (recommended: SERVER MEMBERS INTENT).
7. In **Installation > Installation Contexts**, select:
   - **Guild Install** for server-installed apps.
   - **User Install** for user-installed apps.
8. In **Installation > Install Link**, select **Discord Provided Link** if it's not already selected.
9. In **Default Install Settings**, select `applications.commands` and `bot` scopes.
10. Add permissions on the **Bot > Bot Permissions** page (recommended: Manage Roles, Manage Channels, Read Messages/View Channels, Send Messages, etc.).
11. Add the app to your server:
    1. Go to **Installation > Install Link** and copy the link.
    2. Paste the link in your browser and hit Enter.
    3. Select **Add to server** in the installation prompt.

## Using OAuth2

To configure OAuth2 credentials, you'll need:

- **Client ID**
- **Client Secret**
- Choose whether to send **Authentication** in the **Header** or **Body**
- A **Bot Token**

### Steps

1. Copy the **Bot Token** and add it to your n8n credential.
2. Open the **OAuth2** page in your Discord application to access your **Client ID** and generate a **Client Secret**.
3. From n8n, copy the **OAuth Redirect URL** and add it to the Discord application in **OAuth2 > Redirects**.

## Using Webhook

To configure webhook credentials, you'll need:

- **Webhook URL**: Generated once you create a webhook.

### Steps to Create a Webhook

1. Open your Discord **Server Settings** and go to the **Integrations** tab.
2. Select **Create Webhook**.
3. Give your webhook a **Name** and select an avatar.
4. Select the channel for the webhook to post to.
5. Select **Copy Webhook URL** to copy the URL and enter this in your n8n credential.

## Choose an Authentication Method

- **Webhook**: Simple installation; sends messages without requiring a bot user.
- **Bot**: Interactive; allows complex workflows and management of server roles.
- **OAuth2**: Similar to a bot but simplifies installation for users.

----------------------------------------

# Discourse Credentials

## Overview
Use these credentials to authenticate the Discourse node in n8n.

## Prerequisites
- Host an instance of Discourse.
- Create an account on your hosted instance and ensure you are an admin.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you will need:
- **URL**: The URL of your Discourse instance, e.g., `https://community.n8n.io`
- **API Key**: Create an API key through the Discourse admin panel. Refer to the Discourse create and configure an API key documentation for instructions.
- **Username**: Use your own name, `system`, or another user.

Refer to the Authentication section of the Discourse API documentation for examples.

----------------------------------------

# Disqus Credentials

You can use these credentials to authenticate the following node:

- Disqus

## Prerequisites

- Create a Disqus account.
- Register an API application.

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need:

- An **Access Token**: Once you've registered an API application, copy the **API Key** and add it to n8n as the **Access Token**.

----------------------------------------

# Drift Credentials

## Overview
Use these credentials to authenticate the Drift node in n8n.

## Prerequisites
- Create a [Drift](https://www.drift.com/) account.
- [Create and install a Drift app](https://devdocs.drift.com/docs/quick-start#3-install-it-to-your-drift-account-).

## Supported Authentication Methods
- API personal access token
- OAuth2

## Using API Personal Access Token
To configure this credential, you will need:
- A **Personal Access Token**: Generate this by creating a Drift app. Install the app to obtain the OAuth Access token, then add it to the n8n credential as your **Personal Access Token**.

## Using OAuth2
**Note for n8n Cloud users**: 
Cloud users can select **Connect my account** to authenticate via the browser without needing to provide connection details.

For a manual OAuth2 setup or more detailed information about the OAuth web flow, refer to the [Drift Authentication and Scopes documentation](https://devdocs.drift.com/docs/authentication-and-scopes).

----------------------------------------

# Dropbox Credentials

## Supported Authentication Methods

- **API Access Token**: Recommended for testing with your user account and for a limited number of users.
- **OAuth2**: Recommended for production or testing with more than 50 users.

## Using Access Token

### Requirements
- **Access Token**: Generated after creating a Dropbox app.
- **App Access Type**

### Setup Instructions
1. Open the [App Console](https://www.dropbox.com/developers/apps) in the Dropbox developer portal.
2. Select **Create app**.
3. In **Choose an API**, select **Scoped access**.
4. In **Choose the type of access you need**, select:
   - **App Folder** for access to a specific folder.
   - **Full Dropbox** for access to all files and folders.
5. Name your app (e.g., `n8n integration`).
6. Agree to the **Dropbox API Terms and Conditions**.
7. Select **Create app**. The app's **Settings** will open.
8. In the **OAuth 2** section, click **Generate** to create an access token.
9. Copy the access token and enter it as the **Access Token** in your n8n credentials.
10. In n8n, select the same **App Access Type** as chosen for your app.

## Using OAuth2

### Notes for n8n Cloud Users
- No connection details needed; select **Connect my account** to authenticate via browser.
- Choose the **App Access Type**:
  - **App Folder** for access to a specific folder.
  - **Full Dropbox** for full access.

### Self-Hosting Configuration
1. Open the [App Console](https://www.dropbox.com/developers/apps) in the Dropbox developer portal.
2. Select **Create app**.
3. In **Choose an API**, select **Scoped access**.
4. In **Choose the type of access you need**, select as appropriate (similar to Access Token setup).
5. Name your app (e.g., `n8n integration`).
6. Agree to the **Dropbox API Terms and Conditions**.
7. Select **Create app**. The app's **Settings** will open.
8. Copy the **App key** and enter it as the **Client ID** in your n8n credentials.
9. Copy the **Secret** and enter it as the **Client Secret** in your n8n credentials.
10. Copy the **OAuth Redirect URL** and enter it in the Dropbox **Redirect URIs**.
11. Select the same **App Access Type** in n8n.

## User Limits
- You can link additional users to your app. Upon linking 50 users, apply for and receive production status approval within two weeks to avoid being frozen from linking additional users.

----------------------------------------

# Dropcontact Credentials

## Supported Authentication Methods
- API Key

## Prerequisites
- Create a developer account in Dropcontact at [Dropcontact Signup](https://app.dropcontact.com/signup).

## Using API Key
### Steps to Configure:
1. Obtain an **API Key**.
2. Go to the **API** section in Dropcontact to view your API key: [Dropcontact API](https://app.dropcontact.com/api).
3. For further details, refer to the [Dropcontact API Key Documentation](https://support.dropcontact.com/article/237-how-to-use-the-dropcontact-api-key).

----------------------------------------

# Dynatrace Credentials

You can use these credentials to authenticate when using the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to make a Custom API call.

## Prerequisites

- Create a Dynatrace account.

## Using Access Token

To configure this credential, you'll need:

- An **Access Token**

Refer to [Access Tokens](https://docs.dynatrace.com/docs/manage/identity-access-management/access-tokens-and-oauth-clients/access-tokens) on Dynatrace's website for more information.

----------------------------------------

# E-goi Credentials

## Supported Nodes
- E-goi

## Prerequisites
- Create an E-goi account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Refer to E-goi's API key documentation for instructions on generating and viewing an API key.

----------------------------------------

# Elasticsearch Credentials

## Supported Authentication Methods
- Basic auth

## Configuration Instructions

To configure the Elasticsearch credential, you will need:
- **Username**
- **Password**
- Elasticsearch application's **Base URL** (application endpoint)

### Setup Steps:
1. Enter your Elasticsearch **Username**.
2. Enter your Elasticsearch **Password**.
3. Go to **Deployments** in Elasticsearch.
4. Select your deployment.
5. Click on **Manage this deployment**.
6. In the **Applications** section, copy the endpoint of the **Elasticsearch** application.
7. Enter this value in n8n as the **Base URL**.
8. By default, n8n connects only if SSL certificate validation succeeds. To connect even if SSL validation fails, enable **Ignore SSL Issues**.

## Custom Endpoint Aliases

If you add a custom endpoint alias to a deployment, update your n8n credential **Base URL** with the new endpoint.

----------------------------------------

# Elastic Security Credentials

## Overview
These credentials are used to authenticate the following node:
- **Elastic Security** Node

## Prerequisites
- Create an Elastic Security account.
- Deploy an application.

## Supported Authentication Methods
- Basic Auth
- API Key

## Using Basic Auth
To configure this credential, you'll need:
- **Username**: For the user account that logs into Elasticsearch.
- **Password**: For the user account that logs into Elasticsearch.
- **Base URL**: The endpoint of the Elasticsearch application. 

### Steps:
1. In Elasticsearch, select **Manage this deployment**.
2. In the **Applications** section, copy the endpoint of the Elasticsearch application.
3. Add this in n8n as the **Base URL**.

### Custom Endpoint Aliases
If you add a custom endpoint alias to a deployment, update your n8n credential **Base URL** with the new endpoint.

## Using API Key
To configure this credential, you'll need:
- **API Key**: For the user account that logs into Elasticsearch. Refer to Elasticsearch's documentation on creating API keys for more information.
- **Base URL**: The endpoint of the Elasticsearch application.

### Steps:
1. In Elasticsearch, select **Manage this deployment**.
2. In the **Applications** section, copy the endpoint of the Elasticsearch application.
3. Add this in n8n as the **Base URL**.

----------------------------------------

# Emelia Credentials

You can use these credentials to authenticate the following nodes:
- Emelia
- Emelia Trigger

## Prerequisites
- Create an Emelia account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: To generate an API Key in Emelia, access your **API Keys** by selecting the avatar in the top right (your **Settings**). Refer to the Authentication section of Emelia's API documentation for more information.

----------------------------------------

# ERPNext Credentials

## Core Concepts
These credentials are used to authenticate the ERPNext node in n8n.

## Supported Authentication Methods
- API Key

## Configuration Instructions
To configure ERPNext credentials, you will need:
- **API Key**: Generate this from your ERPNext user account in **Settings > My Settings > API Access**.
- **API Secret**: Generated with the API key.
- Your ERPNext **Environment**:
  - For **Cloud-hosted**:
    - **Subdomain**: The string between `https://` and `.erpnext.com` or `frappe.cloud`.
    - **Domain**: Choose between `erpnext.com` and `frappe.cloud`.
  - For **Self-hosted**:
    - The fully qualified **Domain** where you host ERPNext.
- Option to **Ignore SSL Issues**: Selecting this option allows n8n to connect even if SSL certificate validation is unavailable.

## Best Practices
If you are an ERPNext System Manager, you can generate API keys and secrets for other users. Refer to the ERPNext documentation for adding users for detailed instructions. 

## Example
To use the API key and secret, ensure you've configured the parameters as described and properly connect the ERPNext node within your workflows.

----------------------------------------

# Eventbrite Credentials

You can use these credentials to authenticate the following nodes:

- Eventbrite Trigger

## Prerequisites

Create an Eventbrite account.

## Supported Authentication Methods

- API private key
- OAuth2

## Using API Private Key

To configure this credential, you'll need:

- A **Private Key**: Refer to the Eventbrite API Authentication Get a Private Token documentation for detailed steps to generate a Private Token. Use this private token as the **Private Key** in the n8n credential.

## Using OAuth2

For n8n Cloud users, connection details are not needed. Select **Connect my account** to connect through your browser.

For manual OAuth2 configuration, refer to the instructions in the Eventbrite API authentication For App Partners documentation.

----------------------------------------

# F5 Big-IP Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create an F5 Big-IP account.

## Authentication Methods

- Account login.

## Using Account Login

To configure this credential, you'll need:

- **Username**: Use the username you use to log in to F5 Big-IP.
- **Password**: Use the user password you use to log in to F5 Big-IP.

----------------------------------------

# Facebook App Credentials

## Supported Authentication Methods
- App access token

## Configuration Instructions

### Create a Meta App
1. Go to the Meta Developer App Dashboard and select **Create App**.
2. Select the appropriate business portfolio option or skip it and select **Next**.
3. Select **Other**, then select **Next**.
4. Select **Business** and **Next**.
5. Complete the essential information:
    - Add an **App name**
    - Add an **App contact email**
6. Select **Create app**.
7. Select **App settings > Basic** from the left menu.
8. Enter a **Privacy Policy URL** (Required to take the app "Live").
9. Select **Save changes**.
10. Toggle the **App Mode** from **Development** to **Live**.
11. Select **Add Product**, then select **Webhooks**.

Refer to Meta's documentation for additional setup details.

### Generate an App Access Token
1. Open the Graph API explorer.
2. Select the **Meta App** in the **Access Token** section.
3. In **User or Page**, select **Get App Token**.
4. Select **Generate Access Token**.
5. Follow on-screen prompts to log in and grant access.
6. Copy the token and enter it in your n8n credential as the **Access Token**.

### Configure the Facebook Trigger
1. Copy the **App ID** from the navigation bar in your Meta app.
2. Open your Facebook Trigger node in n8n.
3. Paste the **App ID** into the **APP ID** field.
4. Select **Execute step** to shift the trigger into listening mode.
5. **Subscribe** to the desired objects in the Meta app's **Webhooks** configuration.
   - Enter the **Webhook URL** as the **Callback URL**.
   - Enter the **Access Token** as the **Verify token** and select **Verify and save**. 

### Optional: Add an App Secret
1. Select **App settings > Basic** in Meta and select **Show** next to the **App secret** field.
2. Re-enter your credentials to view the App Secret.
3. Copy the App Secret and paste it into your n8n credential as the **App Secret**.

### App Review
- Required if your app will be used by those without a role in the app or business.
- May require advanced access for webhook subscriptions.

## Common Issues

### Unverified Apps Limit
- Facebook limits developer roles on a maximum of 15 unverified apps. Refer to Meta's documentation for specifics if you're over that limit.

----------------------------------------

# Facebook Graph API Credentials

You can use these credentials to authenticate the following nodes:

- Facebook Graph API
- Facebook Trigger

## Supported Authentication Methods

- App access token

## Usage Instructions

### Create a Meta App

1. Go to the Meta Developer App Dashboard and select **Create App**.
2. Choose to connect to a business portfolio or select **I don’t want to connect a business portfolio yet**.
3. Select the **Use case** that aligns with your usage of the Facebook Graph API and proceed.
4. Select **Business** and continue.
5. Provide essential app information:
    - App name
    - App contact email
6. Create the app.
7. Navigate to **App settings > Basic**.
8. Enter a **Privacy Policy URL** (required for live apps).
9. Save your changes.
10. Toggle **App Mode** from **Development** to **Live**.
11. Select **Add Product** and configure products as needed.

### Generate an App Access Token

1. Open the Graph API explorer.
2. Select the Meta App you created in the **Access Token** section.
3. In **User or Page**, select **Get App Token**.
4. Select **Generate Access Token**.
5. If prompted, log in and grant access.
6. Copy the generated token and enter it as the **Access Token** in your n8n credential.

For additional information:
- Refer to Meta's documentation on [Creating an app](https://developers.facebook.com/docs/development/create-an-app).
- More details on generating tokens can be found in the instructions for [Your First Request](https://developers.facebook.com/docs/graph-api/get-started#get-started).

----------------------------------------

# Facebook Lead Ads Credentials

You can use these credentials to authenticate the following node:

- **Facebook Lead Ads Trigger**

## Supported Authentication Methods

- **OAuth2**

## Using OAuth2

To configure this credential, you'll need a Meta for Developers account and:

- A **Client ID**
- A **Client Secret**

### Steps to Create Meta App with Facebook Login for Business

1. Go to the Meta Developer App Dashboard and select **Create App**.
2. Select your business portfolio or opt not to connect it and click **Next**.
3. Select **Other**, then click **Next**.
4. Select **Business** and click **Next**.
5. Fill in the required information:
    - **App Name**
    - **App Contact Email**
6. Click **Create App**. The **Add Products to Your App** page will open.
7. Select **Facebook Login for Business**. This opens the **Settings** page for this product.
8. Copy the **OAuth Redirect URL** from your n8n credential.
9. In your Meta app settings under **Client OAuth settings**, paste the URL as the **Valid OAuth Redirect URIs**.
10. Go to **App Settings > Basic** and copy the **App ID** into the **Client ID** field in your n8n credential.
11. Copy the **App Secret** into the **Client Secret** field in your n8n credential.

### Final Steps to Take Your App Live

1. In your Meta app, go to **App Settings > Basic**.
2. Enter a **Privacy Policy URL** (required to take the app live).
3. Click **Save Changes**.
4. Toggle the **App Mode** from **Development** to **Live**.
5. Request **Advanced Access** for `public_profile` by going to **App Review > Permissions and Features**.
6. Search for `public_profile` and select **Request Advanced Access**.
7. Complete the steps for **business verification**.
8. Use the **Lead Ads Testing Tool** to trigger demo form submissions and test your workflow.

For more information about creating an app, required fields, App modes, and switching to live mode, refer to Meta's documentation on creating an app and App Modes.

----------------------------------------

# Figma Credentials for n8n

## Supported Nodes
- Figma Trigger (Beta)

## Prerequisites
- Create a Figma account (admin or owner level required).

## Supported Authentication Methods
- API key

## Using API Key
### Configuration Instructions
To configure this credential, you'll need:
- A Personal Access Token (PAT). Refer to the Figma API Access Tokens documentation for instructions on generating a Personal Access Token.

----------------------------------------

# FileMaker Credentials

## Core Concepts
You can use these credentials to authenticate the following node:
- **FileMaker** Node

## Prerequisites
- Create a user account on a FileMaker Server with the `fmrest` extended privilege to access the FileMaker Data API.
- Ensure the FileMaker Server can use the FileMaker Data API:
  1. Prepare your database for FileMaker Data API access using FileMaker Pro. This includes creating a new database or preparing an existing one.
  2. Write code that calls FileMaker Data API methods to manage records (find, create, edit, duplicate, delete).
  3. Host your solution with FileMaker Data API access enabled.
  4. Test that FileMaker Data API access is functioning.
  5. Monitor the hosted solution using Admin Console.

## Supported Authentication Methods
- Database connection

## Using Database Connection
To configure this credential:
1. Enter the **Host** name or IP address of your FileMaker Server.
2. Enter the **Database** name, matching the name as it appears in the Databases list within FileMaker.
3. Enter the user account **Login** for the account with the `fmrest` extended privilege.
4. Enter the **Password** for that user account.

----------------------------------------

# Filescan Credentials

These credentials are used to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

Create a Filescan account.

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Generate your API key from your profile settings > API Key. Refer to the Filescan FAQ for more information.

----------------------------------------

# Flow Credentials

## Supported Nodes
- **Flow**: [Flow Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.flow/)
- **Flow Trigger**: [Flow Trigger Node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.flowtrigger/)

## Prerequisites
- Create a Flow account.

## Supported Authentication Methods
- API Key

## Configuration Instructions
### Using API Key
To configure this credential, you'll need:
- Numeric **Organization ID**
- **Access Token**

Refer to the [Flow API Getting Started documentation](https://developer.getflow.com/#getting-started) for instructions on generating your Access Token and viewing your Organization ID.

----------------------------------------

# Form.io Trigger Credentials

Use these credentials to authenticate the following node:

- **Form.io Trigger**

## Supported Authentication Methods

- Basic auth

## Using Basic Auth

To configure this credential, you'll need a Form.io account and:

- Your **Environment**
- Your login **Email address**
- Your **Password**

### Setup Steps

1. Select your **Environment**:
   - Choose **Cloud hosted** if you aren't hosting Form.io yourself.
   - Choose **Self-hosted** if you're hosting Form.io yourself. Then add:
     - Your **Self-Hosted Domain**. Use only the domain itself. For example, if you view a form at `https://yourserver.com/yourproject/manage/view`, the Self-Hosted Domain is `https://yourserver.com`.
2. Enter the **Email address** you use to log in to Form.io.
3. Enter the **Password** you use to log in to Form.io.

----------------------------------------

# Formstack Trigger Credentials

## Supported Authentication Methods
- API Access Token
- OAuth2

## Prerequisites
- Create a Formstack account.

## Using API Access Token
### Configuration Steps
1. Generate an API **Access Token** by creating a new application in Formstack:
   - **Redirect URI**:
     - For cloud n8n instances: `https://oauth.n8n.cloud/oauth2/callback`
     - For self-hosted n8n instances: `https://<n8n_url>/rest/oauth2-credential/callback` (e.g., `https://localhost:5678/rest/oauth2-credential/callback`)
   - **Platform**: Select **Website**.

2. Copy the access token from the applications list or application details.

### Access Token Permissions
- Access tokens are tied to a Formstack user and follow in-app user permissions.

## Using OAuth2
### Configuration Steps
1. Generate a **Client ID** and **Client Secret** by creating a new application in Formstack:
   - **Redirect URI**: Copy the **OAuth Redirect URL** from the n8n credential.
   - **Platform**: Select **Website**.

2. Once the application is created, obtain the **Client ID** and **Client Secret** from the application details and add them to n8n.

3. Select the **Connect my account** button to initiate the OAuth2 flow for authorization.

### Access Token Permissions
- Access tokens are tied to a Formstack user and follow in-app user permissions.

----------------------------------------

# Fortinet FortiGate Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create a Fortinet FortiGate account.

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need:
- An API **Access Token**: To generate an access token, create a REST API administrator.

Refer to the Fortinet FortiGate Using APIs documentation for more information about token-based authentication in FortiGate.

----------------------------------------

# Freshdesk Credentials

## Supported Authentication Methods
- API key

## Configuration Instructions
To configure this credential, you'll need:
- **API Key**: Refer to the Freshdesk API authentication documentation for detailed instructions on getting your API key.
- **Domain**: Use the subdomain of your Freshdesk account, part of the URL (e.g., `https://<subdomain>.freshdesk.com`). For a URL like `https://n8n.freshdesk.com`, enter `n8n` as your **Domain**. 

## Node Details
These credentials can be used to authenticate the following node:
- Freshdesk Node

----------------------------------------

# Freshservice Credentials

## Supported Nodes
- Freshservice

## Prerequisites
- Create a Freshservice account.

## Supported Authentication Methods
- API key

## Using API Key
### Configuration Requirements
- **API Key**: Refer to the Freshservice API authentication documentation for instructions on obtaining your API key.
- **Freshservice Domain**: Use the subdomain of your Freshservice account. For example, if your Freshservice URL is `https://n8n.freshservice.com`, enter `n8n` as your Domain.

----------------------------------------

# Freshworks CRM Credentials

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- **API Key**: Refer to the Freshworks CRM API authentication documentation for detailed instructions on acquiring your API key.
- **Domain**: Use the subdomain of your Freshworks CRM account. For example, if you access Freshworks CRM through `https://n8n.myfreshworks.com`, enter `n8n` as your **Domain**.

----------------------------------------

# FTP Credentials

You can use these credentials to authenticate the following nodes:

- FTP Node

## Prerequisites

Create an account on a File Transfer Protocol (FTP) server.

## Supported Authentication Methods

- **FTP Account**: For FTP servers that don't support SSH tunneling or encrypted connections.
- **SFTP Account**: For FTP servers that support SSH tunneling and encrypted connections.

## Using FTP Account

To configure this credential, you'll need to:

1. Enter the **Host** (name or IP address of your FTP server).
2. Enter the **Port** number for the connection.
3. Enter the **Username** for connection.
4. Enter the user's **Password**.

## Using SFTP Account

To configure this credential, you'll need to:

1. Enter the **Host** (name or IP address of your FTP server).
2. Enter the **Port** number for the connection.
3. Enter the **Username** for connection.
4. Enter the user's **Password**.
5. For the **Private Key**, enter a string for key-based or host-based authentication.
   - Use your Private Key in OpenSSH format, commonly generated with `ssh-keygen -o -a 100 -t ed25519`.
6. If the **Private Key** is encrypted, enter the **Passphrase** for decryption.
   - Leave blank if it doesn't use a passphrase.

----------------------------------------

# GetResponse Credentials

## Supported Authentication Methods
- API key
- OAuth2

## Configure API Key
- An **API Key**: View or generate an API key at **Integrations and API > API**.

## Configure OAuth2
- **Client ID**: Generated upon registering your application.
- **Client Secret**: Generated upon registering your application as the **Client Secret Key**.
- **OAuth Redirect URL**: Copy the **OAuth Redirect URL** from n8n to use as the **Redirect URL** in GetResponse.
  
### Redirect URL Configuration
GetResponse does not accept localhost callback URLs. Use a domain URL, such as `https://mytemplatemaker.example.com/gr_callback`.

### Configure OAuth2 for Local Environment
1. Use [ngrok](https://ngrok.com/) to expose the local server running on port `5678`:
   ```bash
   ngrok http 5678
   ```
2. Set the webhook URL:
   ```bash
   export WEBHOOK_URL=<YOUR-NGROK-URL>
   ```
3. Follow the OAuth2 configuration steps using this URL as your **Redirect URL**.

## Node Details
- **GetResponse** Node: Authenticate actions using GetResponse API.
- **GetResponse Trigger** Node: Trigger workflows based on GetResponse events.

----------------------------------------

# Ghost Credentials

## Supported Authentication Methods
- **Admin API Key**
- **Content API Key**

## Using Admin API Key
To configure this credential, obtain:
- **URL**: The Ghost admin domain (e.g., `*.ghost.io` for Ghost(Pro) blogs).
- **API Key**: Generate a new API key via Custom Integration. Refer to the Ghost Admin API Token Authentication documentation for detailed instructions.

## Using Content API Key
To configure this credential, obtain:
- **URL**: The Ghost admin domain (e.g., `*.ghost.io` for Ghost(Pro) blogs).
- **API Key**: Generate a new API key via Custom Integration. Refer to the Ghost Content API Key documentation for detailed instructions.

----------------------------------------

# Git Credentials

You can use these credentials to authenticate the following node:

- **Git**

## Prerequisites

- Create an account on GitHub, GitLab, or similar platforms.

## Supported Authentication Methods

- **Basic auth**

## Using Basic Auth

To configure this credential, you'll need:

- A **Username** for GitHub, GitLab, or a similar platform
- A **Password** for GitHub, GitLab, or a similar platform

----------------------------------------

# GitHub Credentials

## Nodes Utilizing GitHub Credentials
- **GitHub**
- **GitHub Trigger**
- **GitHub Document Loader**: This node doesn't support OAuth.

## Prerequisites
- Create a GitHub account.

## Supported Authentication Methods
- **API Access Token**: Use with any GitHub nodes.
- **OAuth2**: Use with GitHub and GitHub Trigger nodes only; don't use with GitHub Document Loader.

## Using API Access Token
To configure this credential, you'll need a GitHub account. Steps to set up:

1. Generate a GitHub personal access token.
2. Set up the credential.

### Generate Personal Access Token
Recommended access token type: **Personal Access Token (classic)**.

Steps to generate:
1. Verify your email address with GitHub.
2. Open your GitHub profile Settings.
3. Select **Developer settings**.
4. Under **Personal access tokens**, select **Tokens (classic)**.
5. Select **Generate new token (classic)**.
6. Enter a descriptive name for your token in the **Note** field.
7. Select the desired token **Expiration** or choose **No expiration**.
8. Select **Scopes** for your token. Add the `repo` scope for most n8n GitHub nodes.
9. Select **Generate token**.
10. Copy the token.

### Set Up the Credential
1. If not using GitHub Enterprise Server, don't change the **GitHub server** URL.
   - For GitHub Enterprise Server, update the **GitHub server** to match the server URL.
2. Enter your **User** name as it appears in your GitHub profile.
3. Enter the **Access Token** you generated.

## Using OAuth2
### For n8n Cloud Users
Cloud users do not need to provide connection details. Select **Connect my account**.

### For Self-Hosted n8n Users
Steps to create a new GitHub OAuth app:
1. Open your GitHub profile Settings.
2. Select **Developer settings**.
3. Select **OAuth apps**.
4. Select **New OAuth App**.
5. Enter an **Application name**.
6. Enter the **Homepage URL** for your app's website.
7. Optionally add an **Application description**.
8. Copy the **OAuth Redirect URL** from n8n and paste into GitHub **Authorization callback URL**.
9. Select **Register application**.
10. Copy the **Client ID** and **Client Secret** and add them to your n8n credential.

----------------------------------------

# GitLab Credentials

You can use these credentials to authenticate the following nodes:
- GitLab
- GitLab Trigger

## Supported Authentication Methods
- API access token
- OAuth2 (Recommended)

## Using API Access Token

### Configuration Steps
1. In GitLab, select your avatar, then select **Edit profile**.
2. In the left sidebar, select **Access tokens**.
3. Select **Add new token**.
4. Enter a **Name** for the token, like `n8n integration`.
5. Enter an **expiry date** for the token. If you don't enter an expiry date, GitLab automatically sets it to 365 days later.
6. Select the desired **Scopes**. Use the `api` scope for full functionality or refer to [Personal access token scopes](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#personal-access-token-scopes) for specific functions.
7. Select **Create personal access token**.
8. Copy the access token and enter it as the **Access Token** in your n8n credential.
9. Enter the URL of your **GitLab Server** in your n8n credential.

## Using OAuth2

### Note for n8n Cloud Users
Cloud users don't need to provide connection details. Select **Connect my account** to connect through your browser.

### Configuration Steps for Self-Hosting
1. In GitLab, select your avatar, then select **Edit profile**.
2. In the left sidebar, select **Applications**.
3. Select **Add new application**.
4. Enter a **Name** for your application, like `n8n integration`.
5. Enter the **OAuth Redirect URL** from n8n as the GitLab **Redirect URI**.
6. Select the desired **Scopes**. Use the `api` scope for full functionality or refer to [Personal access token scopes](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#personal-access-token-scopes).
7. Select **Save application**.
8. Copy the **Application ID** and enter it as the **Client ID** in your n8n credential.
9. Copy the **Secret** and enter it as the **Client Secret** in your n8n credential.

----------------------------------------

# Gong Credentials

## Supported Authentication Methods

- API access token
- OAuth2

## Using API Access Token

To configure this credential, you need:

- An **Access Key**
- An **Access Key Secret**

You can create these items on the Gong API Page (you must be a technical administrator in Gong to access this resource).

## Using OAuth2

To configure this credential, you need:

- A **Client ID**: Generated when you create an OAuth app for Gong.
- A **Client Secret**: Generated when you create an OAuth app for Gong.

If you're self-hosting n8n, you will need to create an app to configure OAuth2.

----------------------------------------

# Google Credentials in n8n

## Authentication Methods
There are two authentication methods available for Google services nodes:

- **OAuth2**: Recommended for its wide availability and ease of setup.
- **Service Account**: Refer to [Google documentation: Understanding service accounts](https://cloud.google.com/iam/docs/understanding-service-accounts) for guidance on usage.

## Compatible Nodes
Once configured, you can use your credentials to authenticate the following nodes. Most nodes are compatible with OAuth2 authentication. Support for Service Account authentication is limited.

| Node | OAuth | Service Account |
| --- | --- | --- |
| [Google Ads](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googleads/) | ✅ | ❌ |
| [Gmail](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gmail/) | ✅ | ⚠ |
| [Google Analytics](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googleanalytics/) | ✅ | ❌ |
| [Google BigQuery](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlebigquery/) | ✅ | ✅ |
| [Google Books](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlebooks/) | ✅ | ✅ |
| [Google Calendar](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecalendar/) | ✅ | ❌ |
| [Google Chat](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlechat/) | ❌ | ✅ |
| [Google Cloud Storage](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecloudstorage/) | ✅ | ❌ |
| [Google Contacts](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecontacts/) | ✅ | ❌ |
| [Google Cloud Firestore](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecloudfirestore/) | ✅ | ✅ |
| [Google Cloud Natural Language](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecloudnaturallanguage/) | ✅ | ❌ |
| [Google Cloud Realtime Database](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecloudrealtimedatabase/) | ✅ | ❌ |
| [Google Docs](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledocs/) | ✅ | ✅ |
| [Google Drive](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive/) | ✅ | ✅ |
| [Google Drive Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.googledrivetrigger/) | ✅ | ✅ |
| [Google Perspective](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googleperspective/) | ✅ | ❌ |
| [Google Sheets](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets/) | ✅ | ✅ |
| [Google Slides](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googleslides/) | ✅ | ✅ |
| [Google Tasks](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googletasks/) | ✅ | ❌ |
| [Google Translate](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googletranslate/) | ✅ | ✅ |
| [Google Workspace Admin](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gsuiteadmin/) | ✅ | ❌ |
| [YouTube](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.youtube/) | ✅ | ❌ |

## Best Practice
For the Gmail node, n8n recommends using OAuth2 authentication instead of a Service Account due to the complexities and limitations involved with the latter.

----------------------------------------

# Google Gemini(PaLM) Credentials

## Supported Nodes
- **Embeddings Google Gemini**
- **Google Gemini Chat Model**
- **Embeddings Google PaLM**

## Prerequisites
- Create a Google Cloud account.
- Create a Google Cloud Platform project.

## Supported Authentication Methods
- Gemini(PaLM) API key

## Using Gemini(PaLM) API Key

### Configuration Requirements
- **API Host URL**: `https://generativelanguage.googleapis.com`
- **API Key**: Create a key in Google AI Studio.

### Steps to Create an API Key
1. Go to the API Key page in Google AI Studio: [Google AI Studio API Key](https://makersuite.google.com/app/apikey)
2. Select **Create API Key**.
3. Choose to **Create API key in new project** or select an existing Google Cloud project to **Create API key in existing project**.
4. Copy the generated API key and add it to your n8n credential.

**Note**: Custom hosts are not supported; the API must use `https://generativelanguage.googleapis.com`.

----------------------------------------

# Gotify Credentials in n8n

## Supported Nodes
- **Gotify**: Authenticate using these credentials.

## Prerequisites
- Install **Gotify** on your server.

## Supported Authentication Methods
- **API Token**

## Using API Token
To configure this credential, you'll need:
- **App API Token**: Required for creating messages. Generate it by creating an application from the **Apps** menu. Refer to Gotify's Push messages documentation for more information.
- **Client API Token**: Required for all actions other than creating messages (e.g., deleting or retrieving messages). Generate it by creating a client from the **Clients** menu.
- **URL**: The host URL for Gotify.

----------------------------------------

# GoToWebinar Credentials

## Overview
Use these credentials to authenticate the GoToWebinar node in n8n.

## Prerequisites
- Create a GoToWebinar account with Developer Center access.

## Supported Authentication Methods
- OAuth2

## OAuth2 Configuration
To configure this credential, you'll need:
- **Client ID**: Provided upon creating an OAuth client.
- **Client Secret**: Provided upon creating an OAuth client.

### Steps
1. Create an OAuth client as per the [Create an OAuth client documentation](https://developer.goto.com/guides/Get%20Started/02_HOW_createClient/).
2. Copy the **OAuth Callback URL** from n8n to use as the **Redirect URI** in your OAuth client. 
3. The Client ID and Client Secret will be provided once the client setup is complete.

## Related Resources
Refer to [GoToWebinar's API documentation](https://developer.goto.com/GoToWebinarV2) for more information about authenticating with the service.

----------------------------------------

# Grafana Credentials

You can use these credentials to authenticate the following nodes:

- Grafana Node

## Prerequisites

- Create a Grafana account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the Create an API key documentation for detailed instructions on creating an API key.
- The **Base URL** for your Grafana instance, for example: 
  ```
  https://n8n.grafana.net
  ```

----------------------------------------

# Grist Credentials

## Supported Nodes
- Grist

## Prerequisites
- Create a Grist account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- An **API Key**. Refer to Grist API authentication documentation for instructions on creating an API key.
- Select your Grist **Plan Type**:
  - Free
  - Paid: Provide your Grist **Custom Subdomain** (the portion before `.getgrist.com`).
  - Self-Hosted: Provide your Grist **Self-Hosted URL** (the full URL).

----------------------------------------

# Groq Credentials

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**

To obtain your API key:
1. Go to the **API Keys** page of your Groq console.
2. Select **Create API Key**.
3. Enter a **display name** for the key, such as `n8n integration`, and select **Submit**.
4. Copy the key and paste it into your n8n credential.

**Note:** Groq binds API keys to the organization, not the user.

----------------------------------------

# Gumroad Credentials

## Supported Nodes
- **Gumroad Trigger**: Authenticates using Gumroad credentials.

## Prerequisites
- Create a Gumroad account.

## Supported Authentication Methods
- **API Access Token**

## Configuration Instructions for API Access Token
1. Obtain an API **Access Token** by creating an application on Gumroad.
2. Refer to [Gumroad's API documentation](https://help.gumroad.com/article/280-create-application-api) for detailed instructions on generating an access token.

----------------------------------------

# HaloPSA Credentials

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:

- **Hosting Type**:
  - **On Premise Solution**: If hosting the Halo application on your own server.
  - **Hosted Solution Of Halo**: If your application is hosted by Halo. Provide your **Tenant** if selected.
  
- **HaloPSA Authorisation Server URL**: Found in HaloPSA under **Configuration > Integrations > Halo API**.
  
- **Resource Server URL**: Found in HaloPSA under **Configuration > Integrations > Halo API**.
  
- **Client ID**: Obtained by registering the application in the Halo API settings. Use `Client Credentials` as your **Authentication Method** and `all` permission.
  
- **Client Secret**: Obtained by registering the application in the Halo API settings.
  
- **Tenant Name**: Must provide tenant name if **Hosted Solution of Halo** is selected. Found in HaloPSA under **Configuration > Integrations > Halo API**.

**Note**: HaloPSA uses application permissions and the agent's permissions to determine API access.

----------------------------------------

# Harvest Credentials

You can use these credentials to authenticate the following nodes:

- Harvest

## Prerequisites

- Create a Harvest account.

## Supported Authentication Methods

- API access token
- OAuth2

## Using API Access Token

To configure this credential, you'll need:

- A Personal **Access Token**: Refer to the Harvest Personal Access Token Authentication documentation for instructions on creating a personal access token.

## Using OAuth2

Cloud users don't need to provide connection details. Select **Connect my account** to connect through your browser.

For configuring OAuth2 from scratch, refer to the instructions in the Harvest OAuth2 documentation to set up OAuth.

----------------------------------------

# Help Scout Credentials

## Supported Nodes
- **Help Scout**
- **Help Scout Trigger**

## Prerequisites
- Create a Help Scout account.

## Supported Authentication Methods
- **OAuth2**

## Using OAuth2
For n8n Cloud users, connection details are not needed. Select **Connect my account** to authenticate via your browser.

To configure OAuth2 manually, create a Help Scout app. Follow the instructions in the Help Scout OAuth documentation [here](https://developer.helpscout.com/mailbox-api/overview/authentication/#oauth2-application).

----------------------------------------

# HighLevel Credentials

You can use these credentials to authenticate the following nodes:

- HighLevel node

## Prerequisites

- Create a HighLevel developer account.

## Supported Authentication Methods

- **API Key**: Use with API v1
- **OAuth2**: Use with API v2

**Note**: API v1 is deprecated; use OAuth2 to set up new credentials.

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the HighLevel API 1.0 Welcome documentation for instructions on getting your API key.

## Using OAuth2

To configure this credential, you'll need:

- A **Client ID**
- A **Client Secret**

To generate both, create an app in **My Apps > Create App**. Use these settings:

1. Set **Distribution Type** to **Sub-Account**.
2. Add these **Scopes**:
   - `locations.readonly`
   - `contacts.readonly`
   - `contacts.write`
   - `opportunities.readonly`
   - `opportunities.write`
   - `users.readonly`
3. Copy the **OAuth Redirect URL** from n8n and add it as a **Redirect URL** in your HighLevel app.
4. Copy the **Client ID** and **Client Secret** from HighLevel and add them to your n8n credential.
5. Add the same scopes added above to your n8n credential in a space-separated list:

```
locations.readonly contacts.readonly contacts.write opportunities.readonly opportunities.write users.readonly
```

Refer to HighLevel's API Authorization documentation for more details. Refer to HighLevel's API Scopes documentation for more information about available scopes.

----------------------------------------

# Home Assistant Credentials

You can use these credentials to authenticate the following nodes:

- Home Assistant

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need to:

- Your **Host**
- The **Port**
- A Long-Lived **Access Token**

### Steps to Generate an Access Token and Set Up the Credential:

1. Log in to Home Assistant and open your User profile.
2. In the **Long-Lived Access Tokens** section, generate a new token.
3. Copy this token and enter it in n8n as your **Access Token**.
4. Enter the URL or IP address of your Home Assistant **Host**, without `http://` or `https://`, e.g., `your.awesome.home`.
5. For the **Port**, enter the appropriate port:
   - Default for HTTP: `8123`
   - Default for HTTPS: `443`
   - Specific port if configured.
6. If SSL is enabled in Home Assistant, turn on the **SSL** toggle in n8n. If uncertain, enable this if accessing the Home Assistant UI via `https://`.

----------------------------------------

# HubSpot Credentials

You can use these credentials to authenticate the following nodes:

- HubSpot
- HubSpot Trigger

## Supported Authentication Methods

- **App Token**: Use with the HubSpot node.
- **Developer API Key**: Use with the HubSpot Trigger node.
- **OAuth2**: Use with the HubSpot node.

**API Key Deprecation**: HubSpot deprecated the API Key authentication method. Refer to HubSpot's [Migrate an API key integration to a private app](https://developers.hubspot.com/docs/api/migrate-an-api-key-integration-to-a-private-app) guide to set up an app token.

## Using App Token

To configure this credential, you'll need a HubSpot account and:

- An **App Token**

To generate an app token, create a private app in HubSpot:

1. In your HubSpot account, select the **settings icon** in the main navigation bar.
2. Go to **Integrations > Private Apps**.
3. Select **Create private app**.
4. Enter your app's **Name** in the **Basic Info** tab.
5. Upload a square image for your app's logo.
6. Enter a **Description** for your app.
7. In the **Scopes** tab, add the required scopes.
8. Select **Create app**.
9. Review your app's access token and select **Continue creating**.
10. Select **Show token** to reveal the token.
11. Copy this token and enter it in your n8n credential.

Refer to HubSpot's [Private Apps documentation](https://developers.hubspot.com/docs/api/private-apps) for more information.

## Using Developer API Key

To configure this credential, you'll need a HubSpot developer account and:

- A **Client ID**: Generated when creating a public app.
- A **Client Secret**: Generated when creating a public app.
- A **Developer API Key**: Generated from your Developer Apps dashboard.
- An **App ID**: Generated when creating a public app.

To create the public app and configure the credential:

1. Log into your HubSpot developer account.
2. Select **Apps**.
3. Select **Get HubSpot API key** and copy the key.
4. Enter the key in n8n as the **Developer API Key**.
5. Select **Create app**.
6. Add an **App name**, **Description**, and **Logo**.
7. Copy the **App ID**, **Client ID**, and **Client Secret** and enter them in n8n.
8. Add the required scopes for your app.
9. Copy the n8n **OAuth Redirect URL** and enter it as the **Redirect URL** in your HubSpot app.
10. Select **Create app**.

Refer to HubSpot's [Public Apps documentation](https://developers.hubspot.com/docs/api/creating-an-app) for detailed instructions.

### Required Scopes for HubSpot Trigger Node

If you're creating an app for use with the HubSpot Trigger node, start with these scopes:

| **Element** | **Object** | **Permission** | **Scope Name** |
| --- | --- | --- | --- |
| n/a | n/a | n/a | `oauth` |
| CRM | Companies | Read | `crm.objects.companies.read` |
| CRM | Companies schemas | Read | `crm.schemas.companies.read` |
| CRM | Contacts | Read | `crm.objects.contacts.read` |
| CRM | Contacts schemas | Read | `crm.schemas.contacts.read` |
| CRM | Deals | Read | `crm.objects.deals.read` |
| CRM | Deals schemas | Read | `crm.schemas.deals.read` |

## Using OAuth2

For n8n Cloud users, select **Connect my account** to connect through your browser.

For self-hosting, configure OAuth2 by creating a new public app:

1. Log into your HubSpot developer account.
2. Select **Apps** and choose **Create app**.
3. Add an **App name**, **Description**, and **Logo**.
4. Copy the **App ID**, **Client ID**, and **Client Secret** and enter them in n8n.
5. Add the required scopes.
6. Copy the n8n **OAuth Redirect URL** and enter it as the **Redirect URL** in your HubSpot app.
7. Select **Create app**.

Refer to the [HubSpot Working with OAuth documentation](https://developers.hubspot.com/docs/api/working-with-oauth) for more details.

### Required Scopes for HubSpot Node

If you're creating an app for use with the HubSpot node, start with these scopes:

| **Element** | **Object** | **Permission** | **Scope Name(s)** |
| --- | --- | --- | --- |
| n/a | n/a | n/a | `oauth` |
| n/a | n/a | n/a | `forms` |
| n/a | n/a | n/a | `tickets` |
| CRM | Companies | Read <br> Write | `crm.objects.companies.read`<br>`crm.objects.companies.write` |
| CRM | Companies schemas | Read | `crm.schemas.companies.read` |
| CRM | Contacts | Read <br> Write | `crm.objects.contacts.read`<br>`crm.objects.contacts.write` |
| CRM | Deals | Read <br> Write | `crm.objects.deals.read`<br>`crm.objects.deals.write` |
| CRM | Owners | Read | `crm.objects.owners.read` |
| CRM | Lists | Write | `crm.lists.write` |

**HubSpot Old Accounts**: Some accounts may not have access to all scopes. Consider creating a fresh developer account if you cannot find all required scopes.

----------------------------------------

# Hugging Face Credentials

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need a Hugging Face account and:
- An **API Key**: Hugging Face refers to these as API tokens.

To get your API token:
1. Open your Hugging Face profile and go to the **Tokens** section.
2. Copy the token listed there. It should begin with `hf_`.
3. Enter this API token as your n8n credential **API Key**.

----------------------------------------

# Humantic AI Credentials

You can use these credentials to authenticate the following nodes:

- **Humantic AI**

## Prerequisites

- Create a **Humantic AI** account.
- Obtain an API key from the **Humantic AI API** page.

## Supported Authentication Methods

- **API Key**

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Get an API key from the **Humantic AI API** page.

----------------------------------------

# HTTP Request Credentials

## Supported Authentication Methods
- Predefined credential type
- Basic auth (generic credential type)
- Custom auth (generic credential type)
- Digest auth (generic credential type)
- Header auth (generic credential type)
- Bearer auth (generic credential type)
- OAuth1 (generic credential type)
- OAuth2 (generic credential type)
- Query auth (generic credential type)

## Using Predefined Credential Type
1. Open your HTTP Request node or add a new one to your workflow.
2. In **Authentication**, select **Predefined Credential Type**.
3. In **Credential Type**, select the API you want to use.
4. In **Credential for `<API name>`**:
   - Select an existing credential if available.
   - Select **Create New** to create a new credential.

## Using Basic Auth
To configure this credential, enter:
- **Username**: Username for the app/service.
- **Password**: Password associated with the username.

## Using Digest Auth
To configure this credential, enter:
- **Username**: Username for the app/service.
- **Password**: Password associated with the username.

## Using Header Auth
To configure this credential, enter:
- **Name**: The header name to pass to the app/service.
- **Value**: The value for the header.

## Using Bearer Auth
To configure this credential, enter:
- **Bearer Token**: The token to pass to the app/service.

## Using OAuth1
To configure this credential, enter:
- **Authorization URL**: URL for the resource owner authorization.
- **Access Token URL**: URI for initial request for temporary credentials.
- **Consumer Key**: Specifies the `oauth_consumer_key`.
- **Consumer Secret**: Specifies the client secret.
- **Request Token URL**: URI for switching to long-lived credentials.
- **Signature Method**: Options include:
  - **HMAC-SHA1**
  - **HMAC-SHA256**
  - **HMAC-SHA512**

## Using OAuth2
Requirements for configuration depend on **Grant Type**:
### Authorization Code Grant Type
- **Authorization URL**
- **Access Token URL**
- **Client ID**
- **Client Secret**
- _Optional:_ **Scope** and **Auth URI Query Parameters**.
- **Authentication type**: Options include **Header** or **Body**.
- _Optional:_ Choose to **Ignore SSL Issues**.

### Client Credentials Grant Type
- **Access Token URL**
- **Client ID**
- **Client Secret**
- _Optional:_ **Scope** and **Authentication type**: Options include **Header** or **Body**.
- _Optional:_ Choose to **Ignore SSL Issues**.

### PKCE Grant Type
- **Authorization URL**
- **Access Token URL**
- **Client ID**
- **Client Secret**
- _Optional:_ **Scope** and **Auth URI Query Parameters**.
- **Authentication type**: Options include **Header** or **Body**.
- _Optional:_ Choose to **Ignore SSL Issues**.

## Using Query Auth
To configure this credential, enter:
- **Name**: The query parameter key.
- **Value**: The query parameter value.

## Using Custom Auth
Custom Auth expects JSON data. Examples:
### Sending Two Headers
```json
{
	"headers": {
		"X-AUTH-USERNAME": "username",
		"X-AUTH-PASSWORD": "password"
	}
}
```
### Body
```json
{
	"body": {
		"user": "username",
		"pass": "password"
	}
}
```
### Query String
```json
{
	"qs": {
		"appid": "123456",
		"apikey": "my-api-key"
	}
}
```
### Sending Header and Query String
```json
{
	"headers": {
		"api-version": "202404"
	},
	"qs": {
		"apikey": "my-api-key"
	}
}
```

## Provide an SSL Certificate
1. In HTTP Request node **Settings**, turn on **SSL Certificates**.
2. Add existing SSL Certificate credential or create a new one.
3. Configure the SSL Certificates credential with:
   - **CA** bundle
   - **Certificate** (CRT)
   - **Private Key** (KEY)
   - _Optional:_ **Passphrase** if the private key is encrypted.

----------------------------------------

# Hunter Credentials

## Supported Authentication Methods
- API key

## Configuration Instructions
To configure this credential, you'll need:
- An **API Key**: Generate an API key from your profile in the dashboard. Refer to the Hunter API Authentication documentation for more information.

----------------------------------------

# Hybrid Analysis Credentials

## Prerequisites
- Create a Hybrid Analysis account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Refer to the Hybrid Analysis API documentation for instructions on generating an API key.

## Additional Resources
- Refer to Hybrid Analysis' [API documentation](https://www.hybrid-analysis.com/docs/api/v2) for more information about the service.

----------------------------------------

# Imperva WAF credentials

## Core Concepts
Imperva WAF credentials are used to authenticate when using the HTTP Request node to make a custom API call.

## Prerequisites
- Create an Imperva WAF account.

## Supported Authentication Methods
- **API key**

## Using API Key
To configure this credential, you will need:
- An **API ID**
- An **API Key**

Refer to Imperva WAF's API Key Management documentation for instructions on generating and viewing API Keys and IDs.

----------------------------------------

# Intercom Credentials

You can use these credentials to authenticate the following node:

- **Intercom**

## Prerequisites

- Create an Intercom developer account.
- Create an app in your developer hub.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Intercom automatically generates an **Access Token** when you create an app. Use this **Access Token** as your n8n **API Key**. Refer to the Intercom documentation for detailed instructions on obtaining your Access Token.

----------------------------------------

# IMAP Credentials for n8n

## Core Concepts
**Internet Message Access Protocol (IMAP)**: A standard protocol for receiving email that allows the retrieval of emails from a remote server.

## Node Details
- **Node**: IMAP Email
  - URL: [IMAP Email Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.emailimap/)

## Prerequisites
- An email account on a service with IMAP support.

## Supported Authentication Methods
- User account

## Credential Configuration
To configure this credential, you will need:
- **User Name**: The email address for retrieving email.
- **Password**: The password or an app password, as instructed by the email provider.
- **Host**: The IMAP host address, usually in the format `imap.<provider>.com`.
- **Port Number**: Default is `993`; use unless instructed otherwise.
- **SSL/TLS**: Choose whether to use SSL/TLS.
- **Allow Self-Signed Certificates**: Option to permit self-signed certificates.

## Provider Instructions
Refer to the quickstart guides for specific email providers:
- **Gmail**: [Gmail IMAP Instructions](https://docs.n8n.io/integrations/builtin/credentials/imap/gmail/)
- **Outlook.com**: [Outlook.com IMAP Instructions](https://docs.n8n.io/integrations/builtin/credentials/imap/outlook/)
- **Yahoo**: [Yahoo IMAP Instructions](https://docs.n8n.io/integrations/builtin/credentials/imap/yahoo/)
- **Other Providers**: Search for their `IMAP settings` or `IMAP instructions` if not listed above.

----------------------------------------

# Invoice Ninja Credentials

You can use these credentials to authenticate the following nodes:

- Invoice Ninja
- Invoice Ninja Trigger

## Prerequisites

Create an Invoice Ninja account. Only the Pro and Enterprise plans support API integrations.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- A **URL**: If Invoice Ninja hosts your installation, use either of the default URLs mentioned. If you're self-hosting, use the URL of your Invoice Ninja instance.
- An **API Token**: Generate an API token in **Settings > Account Management > API Tokens**.
- An optional **Secret**, available only for v5 API users.

----------------------------------------

# Iterable Credentials

## Supported Nodes
- **Iterable**: This credential can be used to authenticate the Iterable node in n8n.

## Prerequisites
- Create an Iterable account.

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you will need:
- An **API Key**: Refer to Iterable's documentation for instructions on creating API keys [here](https://support.iterable.com/hc/en-us/articles/360043464871-API-Keys#creating-api-keys).

----------------------------------------

# Jenkins Credentials

## Overview
These credentials are used to authenticate the Jenkins node in n8n.

## Prerequisites
- Create an account on a Jenkins instance.

## Supported Authentication Methods
- API token

## Using API Token
To configure this credential, you'll need:
- **Jenkins Username**: The user whom the token belongs to.
- **Personal API Token**: Generate from the user's profile details via **Configure > Add new token**.
- **Jenkins Instance URL**: The URL of the Jenkins server.

### Important Notes
- Use a non-legacy API token if working with older Jenkins instances.
- For more information, refer to the [Jenkins Remote Access API](https://www.jenkins.io/doc/book/using/remote-access-api/) and the blog post on [Security Hardening: New API token system in Jenkins 2.129+](https://www.jenkins.io/blog/2018/07/02/new-api-token-system/).

----------------------------------------

# Jina AI Credentials

You can use these credentials to authenticate the Jina AI node in n8n.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- **API key**: A Jina AI API key. Obtain your free API key without creating an account by following these steps:
  1. Visit the Jina AI website.
  2. Select API.
  3. Select API KEY & BILLING in the API app widget.
  4. Copy the key labeled "This is your unique key. Store it securely!".

Jina AI API keys start with 10 million free tokens for non-commercial use. To top up your key or use commercially, select the top-up option under the API KEY & BILLING tab in the API widget.

----------------------------------------

# Jira Credentials

## Supported Nodes
- Jira
- Jira Trigger

## Prerequisites
- Create a Jira Software Cloud or Server account.

## Supported Authentication Methods
- SW Cloud API token: For Jira Software Cloud.
- SW Server account: For Jira Software Server.

## Using SW Cloud API Token
1. Log in to your Atlassian profile > Security > API tokens page.
2. Select Create API Token.
3. Enter a Label for your token, like `n8n integration`.
4. Select Create.
5. Copy the API token.
6. In n8n, enter the Email address associated with your Jira account.
7. Paste the API token as your API Token.
8. Enter the Domain you access Jira on, e.g., `https://example.atlassian.net`.

**Note**: New tokens may take up to a minute before they work. If credential verification fails, wait a minute before retrying.

## Using SW Server Account
1. Enter the Email address associated with your Jira account.
2. Enter your Jira account Password.
3. Enter the Domain you access Jira on.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

# JotForm Credentials

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you need:
- An **API Key**
- The **API Domain**

### Setup Instructions
1. Go to **Settings > API**.
2. Select **Create New Key**.
3. Enter a meaningful **Name**, like `n8n integration`.
4. Copy the **API Key** and enter it in your n8n credential.
5. Select the **API Domain** based on your forms:
   - **api.jotform.com**: Default.
   - **eu-api.jotform.com**: For JotForm EU Safe Forms.
   - **hipaa-api.jotform.com**: For JotForm HIPAA forms.

Refer to the JotForm API documentation for more information on creating keys and API domains.

----------------------------------------

# JWT Credentials

## Supported Nodes
- JWT Node
- Webhook Node

## Supported Authentication Methods
- **Passphrase**: Signed with a secret using HMAC algorithm.
- **Private Key (PEM Key)**: For use with Private Key JWT, utilizing RSA or ECDSA algorithms.

## Configuration Instructions

### Using Passphrase
1. Select the **Key Type** of **Passphrase**.
2. Enter the Passphrase **Secret**.
3. Select the **Algorithm** used to sign the assertion. Refer to the **Available algorithms** section for a list of supported algorithms.

### Using Private Key (PEM Key)
1. Select the **Key Type** of **PEM Key**.
2. Enter a **Private Key** obtained from generating a Key Pair. Refer to the documentation for **Generate RSA Key Pair** for an example.
3. Enter a **Public Key** obtained from generating a Key Pair. Refer to the documentation for **Generate RSA Key Pair** for an example.
4. Select the **Algorithm** used to sign the assertion. Refer to the **Available algorithms** section for a list of supported algorithms.

## Available Algorithms
The n8n JWT credentials support the following algorithms:
- `HS256`
- `HS384`
- `HS512`
- `RS256`
- `RS384`
- `RS512`
- `ES256`
- `ES384`
- `ES512`
- `PS256`
- `PS384`
- `PS512`
- `none`

----------------------------------------

# Keap Credentials

You can use these credentials to authenticate the following nodes:

- **Keap Node**: [Keap](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.keap/)
- **Keap Trigger Node**: [Keap Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.keaptrigger/)

## Prerequisites

- Create a [Keap](https://developer.keap.com/) developer account.

## Supported Authentication Methods

- OAuth2

## Using OAuth2

Note for n8n Cloud users: Cloud users don't need to provide connection details. Select **Connect my account** to connect through your browser.

If you need to configure OAuth2 from scratch or need more detail on what's happening in the OAuth web flow, refer to the instructions in the [Getting Started with OAuth2 documentation](https://developer.keap.com/getting-started-oauth-keys/).

----------------------------------------

# Kibana Credentials

You can use these credentials to authenticate when using the [HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/) to make a Custom API call.

## Prerequisites

- Create an Elasticsearch account.
- Load sample data into Kibana if creating a new account. Refer to the Kibana quick start for more information.

## Supported Authentication Methods

- Basic auth

## Using Basic Auth

To configure this credential, you'll need:

- **URL**: The URL you use to access Kibana, for example:  
  ```plaintext
  http://localhost:5601
  ```
- **Username**: Use the same username that you use to log in to Elastic.
- **Password**: Use the same password that you use to log in to Elastic.

----------------------------------------

# Kitemaker Credentials

You can use these credentials to authenticate the following nodes:

- **Kitemaker Node**

## Prerequisites

Create a Kitemaker account.

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need:

- A **Personal Access Token**: Generate a personal access token from **Manage > Developer settings**. Refer to [API Authentication](https://kitemakerhq.github.io/rest-docs/#documentationauthentication) for more detailed instructions.

----------------------------------------

# KoboToolbox Credentials

## Supported Nodes
- **KoboToolbox Trigger**
- **KoboToolbox**

## Prerequisites
- Create a KoboToolbox account.

## Supported Authentication Methods
- API Token

## Using API Token
### Configuration
To configure this credential, you'll need:
- **API Root URL**: 
  - For the Global KoboToolbox Server: `https://kf.kobotoolbox.org`
  - For the European Union KoboToolbox Server: `https://eu.kobotoolbox.org`
- **API Token**: Displayed in your Account Settings. Refer to the KoboToolbox API documentation for more information on obtaining your API token.

----------------------------------------

# LDAP Credentials

You can use these credentials to authenticate the following node:

- LDAP Node

## Prerequisites

Create a server directory using Lightweight Directory Access Protocol (LDAP). Common LDAP providers include:
- Jumpcloud
- Azure ADDS
- Okta

## Supported Authentication Methods

- LDAP server details

## Using LDAP Server Details

To configure this credential, you'll need:

- **LDAP Server Address**: IP address or domain of your LDAP server.
- **LDAP Server Port**: Port number used to connect to the LDAP server.
- **Binding DN**: Binding Distinguished Name (Bind DN) for your LDAP server (e.g., `cn=administrator, cn=Users, dc=n8n, dc=io`). 
- **Binding Password**: Password for the Binding DN user.
- **Connection Security**: Options include:
  - `None`
  - `TLS`
  - `STARTTLS`
- **Connection Timeout**: (Optional) Numeric value in seconds to set connection timeout.

----------------------------------------

# Lemlist Credentials

You can use these credentials to authenticate the following nodes:

- **Lemlist**
- **Lemlist Trigger**

## Prerequisites

Create an account on a Lemlist instance.

## Supported Authentication Methods

- **API Key**

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Access your API key in **Settings > Integrations**. Refer to the API Authentication documentation for more information.

----------------------------------------

# Kafka Credentials

You can use these credentials to authenticate the following nodes:
- Kafka
- Kafka Trigger

## Supported Authentication Methods
- Client ID

## Using Client ID

To configure this credential, you'll need a running Kafka environment and:
- A **Client ID**
- A list of relevant **Brokers**
- Username/password authentication details if your Kafka environment uses authentication

### Setup Instructions:
1. Enter the `CLIENT-ID` of the client or consumer group in the **Client ID** field in your credential.
2. Enter a comma-separated list of relevant **Brokers** in the format `<broker-service-name>:<port>`. 
   - Example: `kafka-1:9092,kafka-2:9092`
3. If your Kafka environment doesn't use SSL, turn off the **SSL** toggle.
4. If you've enabled authentication using SASL in your Kafka environment, turn on the **Authentication** toggle, then add:
   - The **Username**
   - The **Password**
   - Select the broker's configured **SASL Mechanism**. Options include:
     - `Plain`
     - `scram-sha-256`
     - `scram-sha-512`

----------------------------------------

# Line Credentials

**Deprecated**: End of service. LINE Notify is discontinuing service as of April 1st, 2025. This node will no longer function after this date.

## Supported Authentication Methods

- **Notify OAuth2**

## Using Notify OAuth2

To configure this credential, you'll need a Line account and:

- A **Client ID**
- A **Client Secret**

### Steps to Generate Client ID and Client Secret:

1. Open the Line Notify page to add a new service.
2. Enter a **Service name**. This name displays when someone tries to connect to the service.
3. Enter a **Service description**.
4. Enter a **Service URL**.
5. Enter your **Company/Enterprise**.
6. Select your **Country/region**.
7. Enter your name or team name as the **Representative**.
8. Enter a valid **Email address**. Line will verify this email before the service is fully registered. Use an email address you have ready access to.
9. Copy the **OAuth Redirect URL** from your n8n credential and enter it as the **Callback URL** in Line Notify.
10. Select **Agree and continue** to agree to the terms of service.
11. Verify the information you entered is correct and select **Add**.
12. Check your email and open the Line Notify Registration URL to verify your email address.
13. Once verification is complete, open **My services**.
14. Select the service you just added.
15. Copy the **Client ID** and enter it in your n8n credential.
16. Select the option to **Display** the **Client Secret**. Copy and enter it in your n8n credential.
17. In n8n, select **Connect my account** and follow the on-screen prompts to finish the credential.

Refer to the Authentication section of Line Notify's API documentation for more information.

----------------------------------------

# Linear Credentials

## Supported Nodes
- Linear Trigger
- Linear

## Prerequisites
- Create a Linear account.

## Supported Authentication Methods
- API key
- OAuth2

## Using API Key
To configure this credential, you'll need:
- A personal **API Key**: Create an API key in your **Settings > API**.

## Using OAuth2
To configure this credential, you'll need:
- **Client ID**: Generated when you create a new OAuth2 application.
- **Client Secret**: Generated when you create a new OAuth2 application.
- **Actor**: Defines how the OAuth2 application should create issues and changes. Options include:
  - **User**: Creates resources as the authorizing user.
  - **Application**: Creates resources as itself.
- Enable the **Include Admin Scope** toggle for the Linear Trigger node.

Use the n8n **OAuth Redirect URL** as the **Redirect callback URL** in your Linear OAuth2 application.

----------------------------------------

# LingvaNex Credentials

## Supported Authentication Methods
- **API Key**

## Configuration Instructions
To configure this credential, you'll need:
- An **API Key**: Generate an API key from your **Account** page. Refer to [Where can I get the authorization key?](https://docs.lingvanex.com/reference/translator-service-faq#where-can-i-get-the-authorization-key) for more detailed instructions.

## Related Resources
Refer to [Lingvanex's Cloud API documentation](https://docs.lingvanex.com/reference/overview) for more information about the service.

----------------------------------------

# LinkedIn Credentials

You can use these credentials to authenticate the following node:

- **LinkedIn Node**

## Prerequisites

- Create a LinkedIn account.
- Create a LinkedIn Company Page.

## Supported Authentication Methods

- **Community Management OAuth2**: For new LinkedIn users or creating a new LinkedIn app.
- **OAuth2**: For older LinkedIn apps and user accounts.

## API Version

This credential works with API version `202404`.

## Using Community Management OAuth2

### Configuration Requirements

- **Client ID**: Generated after creating a new developer app.
- **Client Secret**: Generated after creating a new developer app.

### Steps to Create a New Developer App

1. Log into LinkedIn and create a new developer app.
2. Enter an **App name** for your app, like `n8n integration`.
3. For the **LinkedIn Page**, enter a LinkedIn Company Page, or create one.
4. Add an **App logo**.
5. Agree to the **Legal agreement**.
6. Select **Create app**.
7. Go to the **Products** tab. Select the following products/APIs:
    - **Share on LinkedIn**
    - **Sign In with LinkedIn using OpenID Connect**
8. Open the **Auth** tab.
9. Copy the **Client ID** and enter it in your n8n credential.
10. Copy the **Primary Client Secret** and enter it in your n8n credential as the **Client Secret**.

### Posting from Organization Accounts

To post as an organization, put your app through LinkedIn's Community Management App Review process.

Refer to LinkedIn's documentation for more information on scopes and permissions.

## Using OAuth2

### Note for n8n Cloud Users

- Cloud users don't need to provide connection details; select **Connect my account**.
- All users must select:
    - **Organization Support**: Requests permission to post as an organization using the `w_organization_social` scope. Requires Community Management App Review.
    - **Legacy**: Uses legacy scopes for `r_liteprofile` and `r_emailaddress` instead of the newer scopes.

### Steps to Configure OAuth2 for Self-Hosting

1. Log into LinkedIn and create a new developer app.
2. Enter an **App name** for your app, like `n8n integration`.
3. For the **LinkedIn Page**, enter a LinkedIn Company Page, or create one.
4. Add an **App logo**.
5. Agree to the **Legal agreement**.
6. Select **Create app**.
7. Go to the **Products** tab. Select the following products/APIs:
    - **Share on LinkedIn**
    - **Sign In with LinkedIn using OpenID Connect**
8. Open the **Auth** tab.
9. Copy the **Client ID** and enter it in your n8n credential.
10. Copy the **Primary Client Secret** and enter it in your n8n credential as the **Client Secret**.

### Posting from Organization Accounts

To post as an organization, put your app through LinkedIn's Community Management App Review process.

Refer to LinkedIn's documentation for more information on scopes and permissions.

----------------------------------------

# LoneScale Credentials

You can use these credentials to authenticate the following nodes:

- LoneScale
- LoneScale Trigger

## Prerequisites

Create a LoneScale account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Refer to LoneScale's [Generate an API Key documentation](https://help-center.lonescale.com/en/articles/6454360-lonescale-public-api) to generate your key.

----------------------------------------

# Magento 2 Credentials

## Core Concepts

You can use these credentials to authenticate the following node:
- Magento 2

## Prerequisites
- Create a Magento account.
- Set your store to **Allow OAuth Access Tokens to be used as standalone Bearer tokens**:
  - Go to **Admin > Stores > Configuration > Services > OAuth > Consumer Settings**.
  - Set the **Allow OAuth Access Tokens to be used as standalone Bearer tokens** option to **Yes**.
  - You can enable this setting from the CLI using the command:
    ```bash
    bin/magento config:set oauth/consumer/enable_integration_as_bearer 1
    ```

## Supported Authentication Methods
- API access token

## Using API Access Token
To configure this credential, you'll need:
- **Host**: Enter the address of your Magento store.
- **Access Token**: Get an access token from the Admin Panel by performing the following steps:
  1. Go to **System > Extensions > Integrations**.
  2. Add a new Integration.
  3. Go to the **API** tab and select the Magento resources you'd like the n8n integration to access.
  4. From the **Integrations** page, **Activate** the new integration.
  5. Select **Allow** to display your access token for copying into n8n.

----------------------------------------

# Mailcheck Credentials

## Supported Nodes
- Mailcheck

## Prerequisites
- Create a Mailcheck account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Generate an API Key in the API section of your dashboard. Refer to Mailcheck's documentation for detailed instructions.

----------------------------------------

# Mailchimp Credentials

## Supported Authentication Methods
- API Key
- OAuth2

## Using API Key
To configure this credential, you'll need:
- **API Key**: Generate an API key in the API keys section of your Mailchimp account. Refer to Mailchimp's documentation for detailed instructions on generating your API key.

## Using OAuth2
For n8n Cloud users, no connection details are required. Select **Connect my account** to connect through your browser. If configuring OAuth2 from scratch, register an application. Refer to Mailchimp's OAuth2 documentation for more information.

## Selecting an Authentication Method
Mailchimp suggests using an API key if you're accessing your own Mailchimp account's data. Use OAuth2 for accessing someone else's Mailchimp account's data.

----------------------------------------

# MailerLite Credentials

## Nodes
You can use these credentials to authenticate the following nodes:
- MailerLite
- MailerLite Trigger

## Prerequisites
- Create a MailerLite account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Generate an API key from the **Integrations** menu. Refer to the API Authentication documentation for more detailed instructions.

Enable the **Classic API** toggle if the API key is for a MailerLite Classic account instead of the newer MailerLite experience.

**Note:** Most new MailerLite accounts and all free accounts should disable the **Classic API** toggle. You can find out which version of MailerLite you are using and learn more about the differences between the two in the MailerLite FAQ.

----------------------------------------

# Mailgun Credentials

You can use these credentials to authenticate the following node:

- Mailgun

## Prerequisites

- Create a Mailgun account.
- Add and verify a domain in Mailgun or use the provided sandbox domain for testing.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- **API Domain**: If your Mailgun account is based in Europe, select **api.eu.mailgun.net**; otherwise, select **api.mailgun.net**. Refer to Mailgun Base URLs for more information.
- **Email Domain**: Enter the email sending domain you're working with. If you have multiple sending domains, refer to Working with multiple email domains for more information.
- **API Key**: View your API key in **Settings > API Keys**. Refer to Mailgun's API Authentication documentation for more detailed instructions.

## Working with Multiple Email Domains

If your Mailgun account includes multiple sending domains, create a separate credential for each email domain you're working with.

----------------------------------------

# Mailjet Credentials

You can use these credentials to authenticate the following nodes:

- Mailjet
- Mailjet Trigger

## Prerequisites

Create a Mailjet account.

## Supported Authentication Methods

- **Email API key**: For use with Mailjet's Email API
- **SMS token**: For use with Mailjet's SMS API

## Using Email API Key

To configure this credential, you'll need:

- An **API Key**: View and generate API keys in your Mailjet API Key Management page.
- A **Secret Key**: View your API Secret Keys in your Mailjet API Key Management page.
- _Optional_: Select whether to use **Sandbox Mode** for calls made using this credential. When turned on, all API calls use Sandbox mode: the API will still validate the payloads but won't deliver the actual messages.

For this credential, you can use either:

- Mailjet's primary API key and secret key
- A subaccount API key and secret key

## Using SMS Token

To configure this credential, you'll need:

- An access **Token**: Generate a new token from Mailjet's SMS Dashboard.

----------------------------------------

# Malcore Credentials

## Overview
Malcore credentials are used to authenticate when utilizing the HTTP Request node to make a Custom API call.

## Prerequisites
- Create a Malcore account.

## Required Credentials
To configure Malcore credentials, you need:
- **API Key**: Obtain an API Key from your Account > API.

## Additional Resources
Refer to the following documentation for more information:
- [Malcore's API Documentation](https://malcore.readme.io/reference/)
- [Using the Malcore API](https://support.malcore.io/hc/en-au/articles/17711707070617-Using-the-Malcore-API) for further details on API usage.

----------------------------------------

# Mandrill Credentials

## Supported Nodes
- **Mandrill**: Use these credentials to authenticate the Mandrill node.

## Prerequisites
- Create a Mailchimp Transactional email account.
- Log in to Mandrill with your Mailchimp account.
- Enable Transactional Emails within your Mailchimp account if on a Standard plan or higher.

## Supported Authentication Methods
- **API Key**

## API Key Configuration
To configure the Mandrill credential, you'll need:
- An **API Key**: Generate an API key from the Mandrill Settings. Refer to Mailchimp's documentation for details on generating your API key.

----------------------------------------

# Marketstack Credentials

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: View and generate API keys in your Marketstack account dashboard.
- Select whether to **Use HTTPS**: 
  - Free plan: Turn off **Use HTTPS**
  - All other plans: Turn on **Use HTTPS**

----------------------------------------

# Matrix Credentials

## Supported Nodes
- Matrix

## Prerequisites
- Create an account on a Matrix server.

## Supported Authentication Methods
- API access token

## Using API Access Token
To configure this credential, you'll need:
- **Access Token**: Tied to the account used to log into Matrix.
- **Homeserver URL**: URL of the homeserver entered during account creation. n8n prepopulates with matrix.org; adjust if using another server.

Details for obtaining these values depend on the client used to access the server. Commonly found in **Settings > Help & About > Advanced**, refer to your client's documentation for specifics.

----------------------------------------

# Mattermost Credentials

## Supported Authentication Methods
- API access token

## Using API Access Token
To configure this credential, you'll need:
- A personal **Access Token**
- Your Mattermost **Base URL**

### Setup Steps
1. In Mattermost, go to **Profile > Security > Personal Access Tokens**.
2. Select **Create Token**.
3. Enter a **Token description**, e.g., `n8n integration`.
4. Select **Save**.
5. Copy the **Token ID** and enter it as the **Access Token** in your n8n credential.
6. Enter your Mattermost URL as the **Base URL**.
7. To connect even if SSL certificate validation fails, turn on **Ignore SSL Issues**.

## Enable Personal Access Tokens
If you don’t see the **Personal Access Tokens** option:
1. Log in to Mattermost as an admin.
2. Go to **System Console > Integrations > Integration Management**.
3. Confirm **Enable personal access tokens** is set to **true**. Change if necessary.
4. Go to **System Console > User Management > Users**.
5. Search for the user account and select the **Actions** dropdown.
6. Check **Allow this account to generate personal access tokens** and **Save**.

----------------------------------------

# Mautic Credentials

You can use these credentials to authenticate the following nodes:

- Mautic
- Mautic Trigger

## Supported Authentication Methods

- Basic Auth
- OAuth2

## Using Basic Auth

### Requirements
- Your Mautic instance must have the API enabled.

### Configuration Steps
1. In Mautic, go to **Configuration > API Settings**.
2. Change **Enable HTTP basic auth?** to **Yes** and save.
3. In n8n, enter the Base **URL** of your Mautic instance.
4. Enter your Mautic **Username**.
5. Enter your Mautic **Password**.

## Using OAuth2

### Requirements
- Your Mautic instance must have the API enabled.

### Configuration Steps
1. In Mautic, go to **Configuration > Settings**.
2. Select **API Credentials**. If the option is not available, ensure the API is enabled; try clearing the cache if necessary.
3. Select the option to **Create new client**.
4. Choose **OAuth 2** as the **Authorization Protocol**.
5. Enter a **Name** for your credential (e.g., `n8n integration`).
6. In n8n, copy the **OAuth Callback URL** and enter it as the **Redirect URI** in Mautic.
7. Select **Apply**.
8. Copy the **Client ID** from Mautic and enter it in your n8n credential.
9. Copy the **Client Secret** from Mautic and enter it in your n8n credential.
10. Enter the Base **URL** of your Mautic instance.

## Enable the API

### Steps to Enable the API
1. Go to **Settings > Configuration**.
2. Select **API Settings**.
3. Set **API enabled?** to **Yes**.
4. Save your changes.

----------------------------------------

# Medium Credentials

You can use these credentials to authenticate the Medium node in n8n. However, note that Medium has stopped supporting the Medium API, which means you cannot configure new integrations using them.

## Prerequisites

- Create an account on Medium.
- For OAuth2, request access to credentials by emailing yourfriends@medium.com.

## Supported Authentication Methods

- API access token
- OAuth2

## Using API Access Token

To configure this credential, you'll need:

- An API **Access Token**: Generate a token in **Settings > Security and apps > Integration tokens**. Use the integration token generated as your n8n **Access Token**.

Refer to the Medium API [Self-issued access tokens documentation](https://github.com/Medium/medium-api-docs?tab=readme-ov-file#21-self-issued-access-tokens) for more information.

## Using OAuth2

To configure this credential, you'll need:

- A **Client ID**
- A **Client Secret**

To generate a **Client ID** and **Client Secret**, you'll need access to the **Developers** menu. From there, create a new application to generate the Client ID and Secret.

Use these settings for your new application:

- Select **OAuth 2** as the **Authorization Protocol**
- Copy the **OAuth Callback URL** from n8n and use this as the **Callback URL** in Medium.

----------------------------------------

# MessageBird Credentials

## Supported Authentication Methods
- API Key

## Configuration Instructions
To configure the MessageBird credentials, you will need:
- An **API Key**: Generate an appropriate key by visiting the [Access Keys](https://app.bird.com/settings/access-keys) page in MessageBird. Refer to the [API Authorization Documentation](https://docs.bird.com/api/api-access/api-authorization) for detailed instructions.

## Nodes Utilizing MessageBird Credentials
- [MessageBird Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.messagebird/)

----------------------------------------

# Metabase Credentials

You can use these credentials to authenticate the following nodes:

- Metabase node

## Prerequisites

Create a Metabase account with access to a Metabase instance.

## Supported Authentication Methods

- Basic auth

## Using Basic Auth

To configure this credential, you'll need:

- A **URL**: Enter the base URL of your Metabase instance. If you're using a custom domain, use that URL.
- A **Username**: Enter your Metabase username.
- A **Password**: Enter your Metabase password.

----------------------------------------

# Microsoft SQL Credentials

## Supported Nodes
- Microsoft SQL

## Prerequisites
- Create a user account on a Microsoft SQL server database.

## Supported Authentication Methods
- SQL database connection

## Configuration Instructions
To configure these credentials, you will need the following information:
- **Server Name**
- **Database Name**
- **User Account/ID**
- **Password**
- **Port**
- **Domain Name**
- **TLS Option**
- **Ignore SSL Issues Option**
- **Connect Timeout**
- **Request Timeout**
- **TDS Version**

### Setup Steps
1. Enter the SQL Server Host Name as the **Server**. The format is `HOSTNAME\INSTANCENAME`.
2. Enter the SQL Server Instance Name as the **Database** name. Default instance name is `MSSQLSERVER`.
3. Enter your **User** account name or ID.
4. Enter your **Password**.
5. For the **Port**, default is `1433`. Check error logs for the correct port if connection fails.
6. Enter the **Domain** name if necessary. You can retrieve it with the following SQL query:
   ```sql
   SELECT DEFAULT_DOMAIN()[DomainName];
   ```
7. Select whether to use **TLS**.
8. Select whether to **Ignore SSL Issues**.
9. Enter the **Connect Timeout** in milliseconds.
10. Enter the **Request Timeout** in milliseconds.
11. Select the **TDS Version** from the dropdown, options include:
    - **7_4** (SQL Server 2012 ~ 2019)
    - **7_3_B** (SQL Server 2008R2)
    - **7_3_A** (SQL Server 2008)
    - **7_2** (SQL Server 2005)
    - **7_1** (SQL Server 2000)

----------------------------------------

# Microsoft Credentials

## Supported Nodes
You can use Microsoft credentials to authenticate the following nodes:
- Microsoft Dynamics CRM
- Microsoft Excel
- Microsoft Graph Security
- Microsoft OneDrive
- Microsoft Outlook
- Microsoft SharePoint
- Microsoft Teams
- Microsoft Teams Trigger
- Microsoft To Do

## Prerequisites
- Create a Microsoft Azure account.
- Create at least one user account with access to the appropriate service.
- If the user account is managed by a corporate Microsoft Entra account, the administrator must enable “User can consent to apps accessing company data on their behalf” for this user.

## Supported Authentication Methods
- OAuth2

## Using OAuth2
For n8n Cloud users:
- Select **Connect my account** to connect through your browser.

For self-hosted users, configure OAuth2:
1. [Register an application](https://docs.n8n.io/integrations/builtin/credentials/microsoft/#register-an-application) with the Microsoft Identity Platform.
2. [Generate a client secret](https://docs.n8n.io/integrations/builtin/credentials/microsoft/#generate-a-client-secret) for that application.

### Register an Application
1. Open the [Microsoft Application Registration Portal](https://aka.ms/appregistrations).
2. Select **Register an application**.
3. Enter a **Name** for your app.
4. In **Supported account types**, select:
   - **Accounts in any organizational directory (Any Azure AD directory - Multi-tenant)** and **personal Microsoft accounts**.
5. Copy the **OAuth Callback URL** from your n8n credential.
6. Paste it into the **Redirect URI (optional)** field.
7. Select **Select a platform** > **Web**.
8. Select **Register**.
9. Copy the **Application (client) ID** and paste it into n8n as the **Client ID**.

### Generate a Client Secret
1. On your Microsoft application page, select **Certificates & secrets**.
2. In **Client secrets**, select **+ New client secret**.
3. Enter a **Description** for your client secret.
4. Select **Add**.
5. Copy the **Secret** in the **Value** column and paste it into n8n as the **Client Secret**.
6. Complete other fields in n8n as needed.
7. Select **Connect my account** in n8n to finish setup.

## Service-Specific Settings
### Dynamics 
- Enter your Dynamics **Domain**.
- Select the Dynamics data center **Region**.

### General Microsoft
- Provide a space-separated list of **Scopes** required for this credential.

### Outlook
- Turn on **Use Shared Inbox** and enter the target user's UPN or ID as the **User Principal Name**.

### SharePoint
- Enter the **Subdomain** from your SharePoint URL.

## Common Issues
### Need Admin Approval
When adding credentials for a Microsoft360 or Microsoft Entra account, if you receive a message requiring admin approval, the administrator must grant permission for the user. Refer to the [Microsoft Entra documentation](https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/grant-admin-consent) for the procedure.

----------------------------------------

# Microsoft Azure Monitor Credentials

You can use these credentials to authenticate when using the **HTTP Request node** to make a **Custom API call**.

## Prerequisites

- A Microsoft Azure account or subscription
- An app registered in Microsoft Entra ID

## Supported Authentication Methods

- OAuth2

## Using OAuth2

To configure this credential, you'll need a Microsoft Azure account and the following:

- **Client ID**
- **Client Secret**
- **Tenant ID**
- The **Resource** you plan to access

Refer to Microsoft Azure Monitor's API documentation for more information about authenticating to the service.

----------------------------------------

# Milvus Credentials

You can use these credentials to authenticate the following node:

- Milvus Vector Store

## Prerequisites

Create and run a Milvus instance. Refer to the Install Milvus documentation for more information.

## Supported Authentication Methods

- Basic auth

## Using Basic Auth

To configure this credential, you'll need:

- **Base URL**: The base URL of your Milvus instance. The default is `http://localhost:19530`.
- **Username**: The username to authenticate to your Milvus instance. The default value is `root`.
- **Password**: The password to authenticate to your Milvus instance. The default value is `Milvus`.

----------------------------------------

# Mindee Credentials

You can use these credentials to authenticate the following nodes:

- Mindee

## Prerequisites

Create a Mindee account.

## Supported Authentication Methods

- **Invoice API Key**: For use with the Invoice OCR API.
- **Receipt API Key**: For use with the Receipt OCR API.

## Using Invoice API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the Mindee Create & Manage API Keys documentation for instructions on creating API keys.

## Using Receipt API Key

To configure this credential, you'll need:

- An **API Key**: Refer to the Mindee Create & Manage API Keys documentation for instructions on creating API keys.

----------------------------------------

# Miro Credentials

## Overview
Miro credentials are used to authenticate when utilizing the HTTP Request node to make a Custom API call.

## Prerequisites
- Create a Miro account.

## Supported Authentication Methods
- OAuth2

## OAuth2 Configuration
To configure Miro credentials using OAuth2, you will need:
- **Client ID**: Generated during the creation of a new OAuth2 application.
- **Client Secret**: Generated during the creation of a new OAuth2 application.

### Notes
- For n8n Cloud users: Select **Connect my account** to connect through your browser; no connection details are needed.
- For self-hosted n8n users: Create an app to configure OAuth2 and refer to Miro's OAuth documentation for configuration details.

----------------------------------------

# Microsoft Entra ID Credentials

## Supported Nodes
- Microsoft Entra ID

## Prerequisites
- Microsoft Entra ID account or subscription.
- If using a corporate account, the administrator must enable “User can consent to apps accessing company data on their behalf.”

## Supported Authentication Methods
- OAuth2

## Using OAuth2

### Configuration Steps for Self-Hosted Users
1. **Register an Application**
   - Go to the [Microsoft Application Registration Portal](https://aka.ms/appregistrations).
   - Select **Register an application**.
   - Enter a **Name** for your app.
   - Select **Accounts in any organizational directory (Any Azure AD directory - Multi-tenant) and personal Microsoft accounts**.
   - Copy the **OAuth Callback URL** from your n8n credential and paste it into the **Redirect URI (optional)** field.
   - Select **Select a platform** > **Web**.
   - Select **Register**.
   - Copy the **Application (client) ID** as the **Client ID** in n8n.

2. **Generate a Client Secret**
   - On the Microsoft application page, select **Certificates & secrets**.
   - In **Client secrets**, select **+ New client secret**.
   - Enter a **Description** for the client secret, e.g., `n8n credential`.
   - Select **Add**.
   - Copy the **Secret** value and paste it as the **Client Secret** in n8n.
   - Select **Connect my account** in n8n to complete the setup and allow app permissions.

### Setting Custom Scopes
Default scopes include:
- `openid`
- `offline_access`
- `AccessReview.ReadWrite.All`
- `Directory.ReadWrite.All`
- `NetworkAccessPolicy.ReadWrite.All`
- `DelegatedAdminRelationship.ReadWrite.All`
- `EntitlementManagement.ReadWrite.All`
- `User.ReadWrite.All`
- `Directory.AccessAsUser.All`
- `Sites.FullControl.All`
- `GroupMember.ReadWrite.All`

Enable **Custom Scopes** to edit the **Enabled Scopes** list.

## Common Issues

### Need Admin Approval
If a user's action requires admin approval, the administrator must grant permission to the user for the application. More details can be found in the Microsoft Entra documentation.

----------------------------------------

# MISP Credentials

## Overview
MISP credentials are used to authenticate the MISP node in n8n.

## Prerequisites
- Install and run a MISP instance.

## Supported Authentication Methods
- API key

## Configuration Steps

### Using API Key
To configure this credential, you'll need:
- **API Key**: In MISP, referred to as Automation keys. Obtain this from **Event Actions > Automation**. Refer to MISP's automation keys documentation for generating more keys.
- **Base URL**: Your MISP URL.
- **Allow Unauthorized Certificates**: Option to connect even if SSL certificate validation fails.

----------------------------------------

# Mist Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create a Mist account and organization.

## Supported Authentication Methods

- API token

## Using API Token

To configure this credential, you'll need:

- **API Token**: Use either a User API token or an Org API token. 
  - [How to generate a user API token](https://www.mist.com/documentation/using-postman/)
  - [Org API token](https://www.mist.com/documentation/org-api-token/)
- **Region** selection:
  - **Europe**: If your cloud environment is in any of the EMEA regions.
  - **Global**: If your cloud environment is in any of the global regions.

----------------------------------------

# Mistral Cloud Credentials

## Supported Nodes
- Mistral Cloud
- Embeddings Mistral Cloud

## Prerequisites
- Create a Mistral La Plateforme account.
- Add payment information in **Workspace > Billing** and activate payments to enable API keys.

## Supported Authentication Methods
- API key

## Configuration of API Key
To configure this credential, you'll need:
- An **API Key**

Steps to obtain the API key:
1. Sign in to your Mistral account.
2. Go to the **API Keys** page.
3. Select **Create new key**.
4. Copy the API key and enter it in your n8n credential.

## Notes
- A paid account is required to use API keys. Ensure payment information is added and activated.

----------------------------------------

# Mocean Credentials

## Nodes Supported
- Mocean

## Prerequisites
- Create a Mocean account.

## Supported Authentication Methods
- API key.

## Using API Key
To configure this credential, you'll need:
- An **API Key**
- An **API Secret**

Both the key and secret are accessible in your Mocean Dashboard. Refer to [API Authentication](https://moceanapi.com/docs/#authentication) for more information.

----------------------------------------

# monday.com Credentials

## Supported Nodes
- **monday.com**: Requires authentication with credentials.

## Minimum Required Version
- n8n version 1.22.6 or above.

## Supported Authentication Methods
- API token
- OAuth2

## Using API Token
To configure this credential, you need:
- An API **Token V2**

### Steps to Get Your Token
1. In your monday.com account, select your profile picture.
2. Select **Developers**.
3. In the Developer Center, select **My Access Tokens > Show**.
4. Copy your personal token and enter it in your n8n credential as **Token V2**.

## Using OAuth2
To configure this credential, you need:
- A **Client ID**
- A **Client Secret**

### Steps to Generate Client ID and Client Secret
1. In your monday.com account, select your profile picture.
2. Select **Developers**.
3. In the Developer Center, select **Build app**.
4. Enter a **Name** for your app (e.g., `n8n integration`).
5. Copy the **Client ID** and enter it in your n8n credential.
6. **Show** the **Client Secret**, copy it, and enter it in your n8n credential.
7. In the left menu, select **OAuth**.
8. For **Scopes**, select `boards:write` and `boards:read`.
9. Select **Save Scopes**.
10. Select the **Redirect URLs** tab.
11. Copy the **OAuth Redirect URL** from n8n and enter it as the **Redirect URL**.
12. **Save** your changes in monday.com.
13. In n8n, select **Connect my account** to finish the setup.

## References
- [monday.com API Authentication](https://developer.monday.com/api-reference/docs/authentication)
- [Create an app](https://developer.monday.com/apps/docs/create-an-app)
- [OAuth and permissions](https://developer.monday.com/apps/docs/oauth)

----------------------------------------

# MongoDB Credentials

## Nodes Supporting MongoDB Credentials
- MongoDB
- MongoDB Atlas Vector Store
- MongoDB Chat Memory

## Prerequisites
- Create a user account with appropriate permissions on a MongoDB server.
- Add n8n IP addresses to the IP Access List Entries in the project's **Network Access**.

## Supported Authentication Methods
- Database connection - Connection string
- Database connection - Values

## Using Database Connection - Connection String
1. Select **Connection String** as the **Configuration Type**.
2. Enter your MongoDB **Connection String**.
   - Example: `mongodb+srv://yourName:yourPassword@clusterName.mongodb.net/?retryWrites=true&w=majority`
3. Replace `<password>` and `<username>` in the connection string with the database user's credentials.
4. Enter the **Database** name.
5. Select whether to **Use TLS**. If yes, provide:
   - **CA Certificate**
   - **Public Client Certificate**
   - **Private Client Key**
   - **Passphrase**

## Using Database Connection - Values
1. Select **Values** as the **Configuration Type**.
2. Enter the database **Host** name or address.
3. Enter the **Database** name.
4. Enter the **User**.
5. Enter the user's **Password**.
6. Enter the **Port** number.
7. Select whether to **Use TLS**. If yes, provide:
   - **CA Certificate**
   - **Public Client Certificate**
   - **Private Client Key**
   - **Passphrase**

----------------------------------------

# Monica CRM Credentials

## Supported Nodes
- **Monica CRM**

## Prerequisites
- Sign up for a Monica CRM account or self-host an instance.

## Supported Authentication Methods
- **API Token**

## Configuration Instructions
To configure this credential, you'll need:
- **Environment**:
  - Select **Cloud-Hosted** if you access your Monica instance through Monica.
  - Select **Self-Hosted** if you have self-hosted Monica on your own server. Provide your **Self-Hosted Domain**.
- **API Token**: Generate a token in **Settings > API**.

----------------------------------------

# Motorhead Credentials

You can use these credentials to authenticate the following nodes:

- Motorhead

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need a Motorhead account and:

- Your **Host** URL
- An **API Key**
- A **Client ID**

To set it up, you'll generate an API key:

1. If you're self-hosting Motorhead, update the **Host** URL to match your Motorhead URL.
2. In Motorhead, go to **Settings > Organization**.
3. In the **API Keys** section, select **Create**.
4. Enter a **Name** for your API Key, like `n8n integration`.
5. Select **Generate**.
6. Copy the **apiKey** and enter it in your n8n credential.
7. Return to the API key list.
8. Copy the **clientID** for the key and enter it as the **Client ID** in your n8n credential.

Refer to the resource for more information: Generate an API key.

----------------------------------------

# MQTT Credentials

You can use these credentials to authenticate the following nodes:

- **MQTT**
- **MQTT Trigger**

## Prerequisites

Install an MQTT broker.

## Supported Authentication Methods

- Broker connection

## Using Broker Connection

To configure this credential, you'll need:

- MQTT broker's **Protocol**
- **Host**
- **Port**
- **Username** and **Password**
- SSL certificates and keys if using **SSL**

### Setup Steps:

1. Select the broker's **Protocol**:
   - **Mqtt**: Use `mqtt:` protocol.
   - **Mqtts**: Use `mqtts:` protocol.
   - **Ws**: Use `ws:` protocol.
2. Enter your broker **Host**.
3. Enter the **Port** number.
4. Enter the **Username**.
5. Enter the **Password**.
6. Turn off **Clean Session** if you want to receive QoS 1 and 2 messages while offline.
7. Enter a **Client ID**. If left blank, n8n will generate one. It’s recommended to include `n8n` for easier auditing.
8. If using SSL, turn on the **SSL** toggle and configure:
   1. Option for **Passwordless** connection.
   2. Select whether to **Reject Unauthorized Certificate**.
   3. Add SSL **Client Certificate**.
   4. Add SSL **Client Key**.
   5. One or more SSL **CA Certificates**. 

Refer to your MQTT broker provider's documentation for more detailed configuration instructions.

----------------------------------------

# MSG91 Credentials

You can use these credentials to authenticate the following nodes:

- MSG91

## Prerequisites

Create a MSG91 account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **Authentication Key**: To get your Authentication Key, go to the user menu and select **Authkey**.

## IP Security

MSG91 enables IP Security by default for authkeys.

For the n8n credentials to function with this setting enabled, add all the n8n IP addresses as whitelisted IPs in MSG91. You can add them in one of two places, depending on your desired security level:

- To allow any/all authkeys in the account to work with n8n, add the n8n IP addresses in the **Company's whitelisted IPs** section of the **Authkey** page.
- To allow only specific authkeys to work with n8n, add the n8n IP addresses in the **Whitelisted IPs** section of an authkey's details.

----------------------------------------

# MySQL Credentials

## Supported Nodes
- **MySQL**
- **Agent** (Note: Agent node doesn't support SSH tunnels)

## Prerequisites
- Create a user account on a MySQL server database.

## Supported Authentication Methods
- Database connection

## Configuration Instructions
To configure the MySQL credentials, you will need:
- **Host**: Database's hostname or IP address.
- **Database**: The name of the database.
- **User**: Username for database access.
- **Password**: Password for the user.
- **Port**: Port number used by MySQL server (default is `3306`).
- **Connect Timeout**: Milliseconds before the connection times out (default is `10000`).
- **SSL**: Enable if using SSL and provide certificate details.
- **SSH Tunnel**: Optionally enable for SSH connection.

### Database Connection Setup
1. **Host**:
   ```sql
   SHOW VARIABLES WHERE Variable_name = 'hostname';
   ```
   
2. **Database Name**:
   ```sql
   SHOW DATABASES;
   ```
   
3. **User Permissions**: Ensure the user has appropriate permissions.
   
4. **Password**: Enter the user password.
   
5. **Port Confirmation**:
   ```sql
   SHOW VARIABLES WHERE Variable_name = 'port';
   ```
   
6. **Connect Timeout**: You may use:
   ```sql
   SHOW VARIABLES WHERE Variable_name = 'connect_timeout';
   ```
   Multiply the result by `1000` for milliseconds.
   
7. **SSL**: If applicable, add SSL certificate details:
   - **CA Certificate**: Enter `ca.pem` file contents.
   - **Client Private Key**: Enter `client-key.pem` file contents.
   - **Client Certificate**: Enter `client-cert.pem` file contents.

8. **SSH Tunnel Configuration**:
   - **SSH Authenticate with**: Choose between Password or Private Key.
   - **SSH Host**: Format as `[user@]host:port`.
   - **SSH Port**: Specify the port.
   - **SSH User**: Specify user for SSH connection.
   - If using Password:
     - Enter **SSH Password**.
   - If using Private Key:
     - Add the contents of the **Private Key**.
     - If the Private Key requires a passphrase, enter it.

### Additional References
- [MySQL | Creating SSL and RSA Certificates and Keys](https://dev.mysql.com/doc/refman/8.0/en/creating-ssl-rsa-files.html)
- [MySQL | Using an SSH Tunnel](https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-connection-ssh.html)

----------------------------------------

# NASA Credentials

You can use these credentials to authenticate the following nodes:

- NASA Node

## Supported Authentication Methods

- API key

## Using an API Key

To configure this credential, you'll need:

- An **API Key**

To generate an API key:

1. Go to the [NASA Open APIs](https://api.nasa.gov/) page.
2. Complete the fields in the **Generate API Key** section.
3. Copy the **API Key** and enter it in your n8n credential.

----------------------------------------

# Netlify Credentials

You can use these credentials to authenticate the following nodes:

- Netlify
- Netlify Trigger

## Prerequisites

- Create a Netlify account.

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need:

- An **Access Token**: Generate an Access Token in **Applications > Personal Access Tokens**. Refer to Netlify API Authentication for detailed instructions.

----------------------------------------

# Netscaler ADC Credentials

You can use these credentials to authenticate the Netscaler ADC node.

## Prerequisites

Install a NetScaler/Citrix ADC appliance.

## Supported Authentication Methods

- Basic auth

## Using Basic Auth

To configure this credential, you'll need:

- A **URL**: Enter the URL of your NetScaler/Citrix ADC instance.
- A **Username**: Enter your NetScaler/Citrix ADC username.
- A **Password**: Enter your NetScaler/Citrix ADC password.

----------------------------------------

# Nextcloud Credentials

You can use these credentials to authenticate the following node:

- **Nextcloud**

## Supported Authentication Methods

- Basic auth
- OAuth2

## Using Basic Authentication

To configure this credential, you'll need a Nextcloud account and:

- Your **Web DAV URL**
- Your **User** name
- Your **Password** or an app password

### Setup Steps:

1. Create your **Web DAV URL**:
   - For Nextcloud in the root of your domain: `https://your-domain.com/remote.php/webdav`
   - For Nextcloud in a subdirectory: `https://your-domain.com/<subdirectory>/remote.php/webdav/`
2. Enter your **User** name.
3. For the **Password**, use an app password:
   - In the Nextcloud Web interface, select your avatar and go to **Personal settings**.
   - Choose **Security** in the left menu.
   - Create a new app password and enter it as your **Password** in n8n.

## Using OAuth2

To configure this credential, you'll need a Nextcloud account and:

- An **Authorization URL**: `https://your-domain.com/apps/oauth2/authorize`
- An **Access Token URL**: `https://your-domain.com/apps/oauth2/api/v1/token`
- A **Client ID**: Generated in **Administrator Security Settings**
- A **Client Secret**: Generated in **Administrator Security Settings**
- A **Web DAV URL**: Similar to the basic auth setup.

### Setup Steps:

1. Open your **Administrator Security Settings** in Nextcloud.
2. In the **OAuth 2.0 clients** section, enter a **Name** (e.g., `n8n integration`).
3. Set the **Redirection URI** with the OAuth Callback URL from n8n.
4. Replace the **Authorization URL** and **Access Token URL** to match your Nextcloud URL.
   - If using Pretty URLs, no additional changes are required.
   - If not, include `/index.php/` in the URLs.
5. Enter your **Client ID** and **Client Secret** in n8n.
6. Create your **Web DAV URL** as described in the basic auth setup.

Refer to Nextcloud's documentation for more detailed instructions on OAuth2 configuration.

----------------------------------------

# Notion Credentials

You can use these credentials to authenticate the following nodes:
- Notion
- Notion Trigger

## Prerequisites
- Create a Notion account with admin level access.

## Supported Authentication Methods
- **API Integration Token**: Used for internal integrations.
- **OAuth2**: Used for public integrations.

## Using API Integration Token
To configure this credential, you'll need:
- An **Internal Integration Secret**: Generated once you create a Notion integration.

To generate an integration secret:
1. Go to your Notion integration dashboard.
2. Select the **+ New integration** button.
3. Enter a **Name** for your integration (e.g., `n8n integration`). Optionally, add a **Logo**.
4. Select **Submit** to create your integration.
5. Open the **Capabilities** tab and select these capabilities:
   - `Read content`
   - `Update content`
   - `Insert content`
   - `User information without email addresses`
6. **Save changes**.
7. Select the **Secrets** tab.
8. Copy the **Internal Integration Token** and add it as your n8n **Internal Integration Secret**.

### Share Notion Page(s) with the Integration
1. Visit the page in your Notion workspace.
2. Select the triple dot menu at the top right of a page.
3. In **Connections**, select **Connect to**.
4. Use the search bar to find and select your integration.

## Using OAuth2
To configure this credential, you'll need:
- A **Client ID**: Generated once you configure a public integration.
- A **Client Secret**: Generated once you configure a public integration.

1. Go to your Notion integration dashboard.
2. Select the **+ New integration** button.
3. Enter a **Name** for your integration (e.g., `n8n integration`). Optionally, add a **Logo**.
4. Select **Submit** to create your integration.
5. Open the **Capabilities** tab and select these capabilities:
   - `Read content`
   - `Update content`
   - `Insert content`
   - `User information without email addresses`
6. **Save changes**.
7. Go to the **Distribution** tab and turn on the **Do you want to make this integration public?** control.
8. Enter your company name and website in the **Organization Information** section.
9. Copy the n8n **OAuth Redirect URL** and add it as a **Redirect URI**.
10. Go to the **Secrets** tab.
11. Copy the **Client ID** and **Client Secret** and add them to your n8n credential.

## Internal vs. Public Integrations
**Internal Integrations**
- Specific to a single workspace.
- Accessible only to members of that workspace.
- Ideal for custom workspace enhancements.

**Public Integrations**
- Usable across multiple, unrelated Notion workspaces.
- Accessible by any Notion user, regardless of their workspace.
- Require a Notion security review before publishing. 

Internal integrations use a simpler authentication process and do not require any security review before publishing.

----------------------------------------

# npm Credentials

You can use these credentials to authenticate the following node:

- npm Node

## Prerequisites

Create an npm account.

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need:

- **Access Token**: Create an access token by selecting **Access Tokens** from your profile menu. Refer to npm's Creating and Viewing Access Tokens documentation for more detailed instructions.
- **Registry URL**: If using a custom npm registry, update the **Registry URL** to that custom registry; otherwise, keep the public registry value.

----------------------------------------

# Odoo Credentials

You can use these credentials to authenticate the following nodes:

- Odoo

## Supported Authentication Methods

- API key (Recommended)
- Password

## Using API Key

To configure this credential, you'll need a user account on an Odoo database and:

- **Site URL**
- **Username**
- **API key**
- **Database name**

To set up the credential with an API key:

1. Enter your Odoo server or site URL as the **Site URL**.
2. Enter your **Username** from the **Change password** screen in Odoo.
3. Go to **Your Profile > Preferences > Account Security > Developer API Keys**.
   - If this option is not available, you may need to upgrade your Odoo plan.
4. Select **New API Key**.
5. Enter a **Description** for the key, like `n8n integration`.
6. Select **Generate Key**.
7. Copy the key and enter it as the **Password or API key** in your n8n credential.
8. Enter your Odoo **Database name**.

## Using Password

To configure this credential, you'll need a user account on an Odoo database and:

- **Site URL**
- **Username**
- **Password**
- **Database name**

To set up the credential with a password:

1. Enter your Odoo server or site URL as the **Site URL**.
2. Enter your **Username** from the **Change password** screen in Odoo.
3. Enter your user password in the **Password or API key** field.
4. Enter your Odoo **Database name**.

### Password Compatibility

If password authentication fails, switch to an API key, as certain modules require it.

## Required Plan Type

Access to the external API is only available on a **Custom** Odoo plan. Other plans do not provide access.

----------------------------------------

# Okta Credentials

You can use these credentials to authenticate the following node:

- **Okta**

## Prerequisites

- Create an Okta admin account on an existing Okta organization or sign up for a free trial.

## Supported Authentication Methods

- **SSWS API Access Token**

## Using SSWS API Access Token

To configure this credential, you'll need:

- **URL**: The base URL of your Okta org (unique subdomain).
  - In the Admin Console, select your **Profile**, hover over the domain listed below your username, and select the **Copy** icon. Paste this into n8n, ensuring to add `https://` before it.
  - Alternatively, copy the base URL of your Admin Console URL (e.g., `https://dev-123456-admin.okta.com`). Paste it into n8n and remove `-admin` (e.g., `https://dev-123456.okta.com`).
  
- **SSWS Access Token**: Create a token by navigating to **Security > API > Tokens > Create token**. Refer to the Okta documentation for more information on creating API tokens.

----------------------------------------

# Ollama Credentials

You can use these credentials to authenticate the following nodes:
- Ollama
- Chat Ollama
- Embeddings Ollama

## Prerequisites

Create and run an Ollama instance with one user. Refer to the Ollama Quick Start for more information.

## Supported Authentication Methods
- Instance URL

## Using Instance URL

To configure this credential, you'll need:
- The **Base URL** of your Ollama instance.

The default **Base URL** is `http://localhost:11434`, but if you've set the `OLLAMA_HOST` environment variable, enter that value. If you have issues connecting to a local n8n server, try `127.0.0.1` instead of `localhost`.

## Ollama and Self-Hosted n8n

If you're self-hosting n8n on the same machine as Ollama, you may run into issues if they're running in different containers. 

For this setup, open a specific port for n8n to communicate with Ollama by setting the `OLLAMA_ORIGINS` variable or adjusting `OLLAMA_HOST` to an address the other container can access.

----------------------------------------

# One Simple API Credentials

## Overview
These credentials are used to authenticate the One Simple API node in n8n.

## Prerequisites
- Create a One Simple API account.

## Supported Authentication Methods
- API token

## Using API Token
To configure this credential, you'll need:
- An **API token**: Create a new API token on the API Tokens page. Ensure to select appropriate permissions for the token. Access the API Tokens page via Profile > API Tokens.

----------------------------------------

# Onfleet Credentials

You can use these credentials to authenticate the following nodes:

- Onfleet
- Onfleet Trigger

## Prerequisites

Create an Onfleet administrator account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API key**: To create an API key, log into your organization's administrator account. Select **Settings > API & Webhooks**, then select **+** to create a new key. Refer to Onfleet's Creating an API key documentation for more information.

----------------------------------------

# OpenAI Credentials

You can use these credentials to authenticate the following nodes:
- OpenAI
- Chat OpenAI
- Embeddings OpenAI
- LM OpenAI

## Prerequisites

Create an OpenAI account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:
- An **API Key**
- An **Organization ID**: Required if you belong to multiple organizations; otherwise, leave this blank.

### To Generate Your API Key:
1. Login to your OpenAI account or create an account.
2. Open your API keys page.
3. Select **Create new secret key** to create an API key, optionally naming the key.
4. Copy your key and add it as the **API Key** in n8n.

Refer to the [API Quickstart Account Setup documentation](https://platform.openai.com/docs/quickstart/account-setup) for more information.

### To Find Your Organization ID:
1. Go to your Organization Settings page.
2. Copy your Organization ID and add it as the **Organization ID** in n8n.

Refer to [Setting up your organization](https://platform.openai.com/docs/guides/production-best-practices/setting-up-your-organization) for more information. Note that API requests made using an Organization ID will count toward the organization's subscription quota.

----------------------------------------

# OpenCTI Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

Create an OpenCTI developer account.

## Authentication Methods

- API Key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: To get your API key, go to your **Profile > API access**. Refer to the OpenCTI Integrations Authentication documentation for more information.

----------------------------------------

# OpenRouter Credentials

You can use these credentials to authenticate the following node:

- Chat OpenRouter

## Prerequisites

- Create an OpenRouter account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**

To generate your API Key:

1. Log in to your OpenRouter account or create an account.
2. Open your API keys page.
3. Select **Create new secret key** to create an API key, optionally naming the key.
4. Copy your key and add it as the **API Key** in n8n.

----------------------------------------

# OpenWeatherMap Credentials

You can use these credentials to authenticate the following node:

- **OpenWeatherMap**

## Supported Authentication Method

- API access token

## Using API Access Token

To configure this credential, you'll need an OpenWeatherMap account and:

- An **Access Token**

### Steps to Obtain Access Token

1. After you verify your email address, OpenWeatherMap includes an **API Key** in your welcome email.
2. Copy that key and enter it in your n8n credential.

#### Creating a New API Key

1. To create a new key, go to **Account > API Keys**.
2. In the **Create Key** section, enter an **API Key Name**, like `n8n integration`.
3. Select **Generate** to generate your key.
4. Copy the generated key and enter it in your n8n credential.

----------------------------------------

# Oura Credentials

## Supported Authentication Methods
- API access token

## Using API Access Token
### Configuration Steps
1. **Personal Access Token**: To generate a personal access token, visit the [Personal Access Tokens](https://cloud.ouraring.com/personal-access-tokens) page and select **Create A New Personal Access Token**.
2. Refer to [How to Generate Personal Access Tokens](https://support.ouraring.com/hc/en-us/articles/4415266939155-The-Oura-API#h_01H5B94SP4P9YHG9ZKN1H69E7Z) for more information.

----------------------------------------

# Paddle Credentials

## Supported Nodes
- Paddle

## Prerequisites
- Create a Paddle account.

## Supported Authentication Methods
- API access token (Classic)

### Paddle Classic API
- This credential works with Paddle Classic's API only. Users who joined Paddle after August 2023 should use the Paddle Billing API.

## Using API Access Token (Classic)
### Required Information
- **Vendor Auth Code**: Created when you generate an API key.
- **Vendor ID**: Displayed when you generate an API key.
- **Use Sandbox Environment API**: When enabled, nodes will use the Sandbox API endpoint instead of the live API endpoint.

### Instructions
1. Go to **Paddle > Developer Tools > Authentication > Generate Auth Code**.
2. Select **Reveal Auth Code** to display the Auth Code.
3. Refer to the [API Authentication](https://developer.paddle.com/classic/api-reference/zg9joji1mzuzotg5-api-authentication) documentation for more information.

----------------------------------------

# PagerDuty Credentials

You can use these credentials to authenticate the following nodes:
- PagerDuty

## Prerequisites
- Create a PagerDuty account.

## Supported Authentication Methods
- API token
- OAuth2

## Using API Token
To configure this credential, you'll need:
- A general access **API Token**: To generate an API token, go to **Integrations > Developer Tools > API Access Keys > Create New API Key**. Refer to [Generate a General Access REST API key](https://support.pagerduty.com/docs/api-access-keys#generate-a-general-access-rest-api-key) for more information.

## Using OAuth2
Note for n8n Cloud users:
- Cloud users don't need to provide connection details. Select **Connect my account** to connect through your browser.

If you need to configure OAuth2 from scratch, register a new PagerDuty app with the following settings:
- In the **Category** dropdown list, select **Infrastructure Automation**.
- In the **Functionality** section, select **OAuth 2.0**.

Once you have saved your app, open the app details and configure it using these settings:
- In the **OAuth 2.0** section, select **Add**.
- Copy the **OAuth Callback URL** from n8n and paste it into the **Redirect URL** field.
- Copy the **Client ID** and **Client Secret** from PagerDuty and add these to your n8n credentials.
- Select **Read/Write** from the **Set Permission Scopes** dropdown list.

Refer to the instructions in [App functionality](https://developer.pagerduty.com/docs/b25fd1b8acb1b-app-functionality) for more information on available functionality. Refer to the PagerDuty [OAuth Functionality documentation](https://developer.pagerduty.com/docs/f59fdbd94ceab-o-auth-functionality) for more information on the OAuth flow.

----------------------------------------

# PayPal Credentials

## Supported Nodes
- **PayPal**
- **PayPal Trigger**

## Prerequisites
- Create a PayPal developer account.

## Supported Authentication Methods
- API client and secret.

## Using API Client and Secret
### Configuration Requirements:
- **Client ID**: Generated when you create an app.
- **Secret**: Generated when you create an app.
- **Environment**: Select **Live** or **Sandbox**.

### Steps to Generate Client ID and Secret:
1. Log in to your PayPal developer dashboard.
2. Go to **Apps & Credentials > Rest API apps > Create app**.
3. Refer to the [Get client ID and client secret](https://developer.paypal.com/api/rest/#link-getclientidandclientsecret) documentation for further information.

----------------------------------------

# Peekalink Credentials

You can use these credentials to authenticate the following node:

- **Peekalink**

## Prerequisites

Create a Peekalink account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: To get your API key, access your Peekalink dashboard and copy the key in the **Your API Key** section. Refer to the documentation for more information on obtaining your API key.

----------------------------------------

# Perplexity Credentials

You can use these credentials to authenticate the following node:

- **Perplexity**

## Supported Authentication Methods

- **API key**

## Configuration Instructions

To configure this credential, you will need:

- **A Perplexity API key**: Follow the instructions in the Perplexity API getting started guide to create an API key.

Refer to the [Perplexity API documentation](https://docs.perplexity.ai/api-reference/) for more information about the service and how to authenticate.

----------------------------------------

# PhantomBuster Credentials

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: To obtain an API key, navigate to **Workspace settings > Third party API keys** and select **+ Add API Key**. For further details, refer to the [How to find my API key](https://hub.phantombuster.com/docs/api#how-to-find-my-api-key).

----------------------------------------

# Philips Hue Credentials

You can use these credentials to authenticate the following node:

- Philips Hue

## Prerequisites

Create a Philips Hue account.

## Supported Authentication Methods

- OAuth2

## Using OAuth2

### Note for n8n Cloud Users

Cloud users don't need to provide connection details. Select **Connect my account** to connect through your browser.

If you're using the built-in OAuth connection, you don't need to enter an **APP ID**.

### Configuration Steps

1. Create a new remote app on the [Add new Hue Remote API app](https://developers.meethue.com/add-new-hue-remote-api-app/) page.
2. Use these settings for your app:
   - Copy the **OAuth Callback URL** from n8n and add it as a **Callback URL**.
   - Copy the **AppId**, **ClientId**, and **ClientSecret** and enter these in the corresponding fields in n8n.

----------------------------------------

# Pinecone Credentials

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you will need a Pinecone account and:
- An **API Key**

### Steps to Obtain an API Key:
1. Open your Pinecone console.
2. Select the project you want to create an API key for. If you don't have any existing projects, create one.
3. Go to **API Keys**.
4. Copy the API Key displayed there and enter it in your n8n credential.

Refer to Pinecone's API authentication documentation for more information.

----------------------------------------

# Pipedrive Credentials for n8n

## Supported Nodes
- Pipedrive
- Pipedrive Trigger

## Supported Authentication Methods
- API Token
- OAuth2

## Using API Token
1. Open API Personal Preferences.
2. Copy Your personal API token and enter it in your n8n credential.
3. For multiple companies:
   - Select the correct company.
   - Go to Company Settings -> Personal Preferences -> API tab.
   - Copy Your personal API token and enter it in your n8n credential.

## Using OAuth2
1. Register a new app in Pipedrive Developer Hub.
2. Create a public app.
3. Enter an App name (e.g., `n8n integration`) and set OAuth Redirect URL as the app's Callback URL.
4. Save the app and configure appropriate Scopes.
5. Copy the Client ID and Client Secret for n8n credential setup.

### Pipedrive Node Scopes
| **Object**      | **Node Action**                                      | **UI Scope**                   | **Actual Scope**          |
|------------------|-----------------------------------------------------|-------------------------------|--------------------------|
| Activity         | Get, Create, Delete, Update                         | Activities: Read only / Full  | `activities:read` / `activities:full` |
| Deal             | Get, Create, Delete, Duplicate, Update             | Deals: Read only / Full       | `deals:read` / `deals:full` |
| Lead             | Get, Create, Delete, Update                         | Leads: Read only / Full       | `leads:read` / `leads:full` |
| Organization     | Get, Create, Delete, Update                         | Contacts: Read Only / Full    | `contacts:read` / `contacts:full` |
| Person           | Get, Create, Delete, Update                         | Contacts: Read Only / Full    | `contacts:read` / `contacts:full` |
| Product          | Get data of all products                            | Products: Read Only           | `products:read`         |

### Pipedrive Trigger Node Scopes
- Webhooks: Full access (`webhooks:full`)

----------------------------------------

# Plivo Credentials

## Overview
These credentials authenticate the following node:
- Plivo 

## Prerequisites
- Create a Plivo account.

## Supported Authentication Methods
- Basic auth

## Using Basic Auth
To configure this credential, you'll need:
- **Auth ID**: Username, copied from the Overview page of the Plivo console.
- **Auth Token**: Password, copied from the Overview page of the Plivo console.

Refer to Plivo's support for more detailed instructions on changing your Auth ID or Auth Token.

----------------------------------------

# Postgres Credentials

You can use these credentials to authenticate the following nodes:
- Postgres
- Agent
- Postgres Chat Memory
- PGVector Vector Store

## Prerequisites
- Create a user account on a Postgres server.

## Supported Authentication Methods
- Database connection

## Using Database Connection

To configure this credential, you'll need:
- **Host**: Domain name for the server.
- **Database**: Name of the database.
- **User**: Username for the connection.
- **Password**: User's password.
- **Ignore SSL Issues**: Set whether the credential connects if SSL validation fails.
- **SSL**: Choose whether to use SSL in your connection. Options include:
  - **Allow**: Sets `ssl-mode` parameter to `allow`.
  - **Disable**: Sets `ssl-mode` parameter to `disable`.
  - **Require**: Sets `ssl-mode` parameter to `require`.
- **Port**: Port number for the connection.
- **SSH Tunnel**: Configure if you want to use SSH to encrypt the network connection.

### Setup Steps
1. Enter the **Host** for the Postgres server. To confirm the hostname, run:
   ```sql
   SELECT inet_server_addr();
   ```

2. Enter the **Database** name. To confirm, run:
   ```sql
   /conninfo
   ```

3. Enter the **User** name.
4. Enter the **Password**.
5. **Ignore SSL Issues**: Enable to connect even if SSL validation fails.
6. **SSL**: Choose SSL settings based on requirements.
7. Enter the **Port**. Confirm by running:
   ```sql
   SELECT inet_server_port();
   ```

8. **SSH Tunnel Configuration**:
   - Enable SSH Tunnel.
   - Select **SSH Authenticate with**:
     - **Password**: Connect to SSH using a password.
     - **Private Key**: Connect using a private key and passphrase.
   - Enter **SSH Host**: Remote bind address.
   - **SSH Port**: Local port number for the SSH tunnel.
   - **SSH Postgres Port**: Remote port number for the database server.
   - **SSH User**: Username for SSH.
   - If **Password** is chosen, enter the user's **SSH Password**.
   - If **Private Key** is chosen:
     - Add the contents of the **Private Key**.
     - Enter the **Passphrase** if it exists.

### SSH Tunnel Limitations
Only use the **SSH Tunnel** setting if:
- Using with the Postgres node (Agent node doesn't support SSH tunnels).
- An SSH server is running on the same machine as the Postgres server.
- You have a user account that can log in using `ssh`.

----------------------------------------

# PostHog Credentials

## Supported Nodes
- PostHog

## Prerequisites
- Create a PostHog account or host PostHog on your server.

## Supported Authentication Methods
- API key

## Credential Configuration
To configure the PostHog credential, you will need:

### API URL
- **US Cloud**: 
  - Public POST-only endpoints: `https://us.i.posthog.com`
  - Private endpoints: `https://us.posthog.com`
  
- **EU Cloud**: 
  - Public POST-only endpoints: `https://eu.i.posthog.com`
  - Private endpoints: `https://eu.posthog.com`
  
- **Self-hosted**: Use your self-hosted domain.

### API Key
- For public POST-only endpoints, use a [Project API key](https://app.posthog.com/project/settings) from your project's General Settings.
- For private endpoints, use a [Personal API key](https://app.posthog.com/settings/user-api-keys) from your User account's Personal API Keys Settings. Refer to [How to obtain a personal API key](https://posthog.com/docs/api#private-endpoint-authentication) for more information.

----------------------------------------

# Postmark Credentials

## Supported Nodes
- Postmark Trigger

## Prerequisites
- Create a Postmark account on a Postmark server.

## Supported Authentication Methods
- API token

## Using API Token
To configure this credential, you'll need:
- A **Server API Token**: Accessible by Account Owners, Account Admins, and users with Server Admin privileges. Obtain it from the **API Tokens** tab under your Postmark server. For more details, refer to the Postmark API Authentication documentation.

----------------------------------------

# ProfitWell Credentials

## Supported Nodes
- ProfitWell

## Prerequisites
- Create a ProfitWell account.

## Supported Authentication Methods
- API token

## Configuration Instructions
To configure the credential, you'll need:
- An **API Token**: Go to **Account Settings > Integrations** and select **ProfitWell API** to obtain the API token.

----------------------------------------

# Pushbullet Credentials

## Nodes that use Pushbullet Credentials
- [Pushbullet](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.pushbullet/)

## Prerequisites
- Create a Pushbullet account.

## Supported Authentication Methods
- OAuth2

## Configuration Instructions for OAuth2

### Required Parameters
- **Client ID**: Generated when you create a Pushbullet app (OAuth client).
- **Client Secret**: Generated when you create a Pushbullet app (OAuth client).

### Steps to Generate Client ID and Client Secret
1. Go to the [create client](https://www.pushbullet.com/create-client) page.
2. Copy the **OAuth Redirect URL** from n8n and set it as your **redirect_uri** in the app/client settings.
3. Use the **client_id** and **client_secret** available in your OAuth Client within n8n credentials.

### Important Note
- Pushbullet offers a test link during the client creation process that is not compatible with n8n. Use the **Connect my account** button in n8n to ensure authentication works.

## Additional Resources
- Refer to Pushbullet's [OAuth2 Guide](https://docs.pushbullet.com/#oauth2) for further details.

----------------------------------------

# Pushcut Credentials

## Supported Nodes
- Pushcut
- Pushcut Trigger

## Prerequisites
- Download the Pushcut app.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: To generate an API key, go to **Account > Integrations > Add API Key**. Refer to Pushcut's documentation for more information.

----------------------------------------

# Pushover Credentials

You can use these credentials to authenticate the following nodes:

- Pushover

## Prerequisites

Create a Pushover account.

## Supported Authentication Methods

- API Key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Generated when you register an application. Refer to [Application Registration](https://pushover.net/api#registration) for more information.

----------------------------------------

# Qdrant Credentials

## Supported Authentication Methods
- API key

## Using API Key

To configure this credential, you'll need a Qdrant cluster and:
- An **API Key**
- Your **Qdrant URL**

### Setup Instructions:
1. Go to the Cloud Dashboard.
2. Select **Access Management** to display available API keys (or go to the **API Keys** section of the **Cluster detail** page).
3. Select **Create**.
4. Select the cluster you want the key to have access to in the dropdown.
5. Select **OK**.
6. Copy the API Key and enter it in your n8n credential.
7. Enter the URL for your Qdrant cluster in the **Qdrant URL**.

Refer to Qdrant's authentication documentation for more information on creating and using API keys.

----------------------------------------

# QRadar Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

- Create a QRadar account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Also known as an authorized service token. Use the **Manage Authorized Services** window on the **Admin** tab to create an authentication token. Refer to the documentation for more information on creating an authentication token.

----------------------------------------

# Qualys Credentials

Use these credentials to authenticate with the **HTTP Request node** for **Custom API calls**.

## Prerequisites

- Create a Qualys user account with any user role except Contact.

## Supported Authentication Methods

- **Basic Auth**

## Configuration Instructions

To configure this credential, you'll need:

- A **Username**
- A **Password**
- A **Requested With** string: Enter a user description (like a user agent) or keep the default `n8n application`. This sets the required `X-Requested-With` header.

----------------------------------------

# QuestDB Credentials

## Supported Authentication Methods

- Database connection

## Configuration Instructions

To configure the QuestDB credentials, the following parameters are required:

- **Host**: The host name or IP address for the server.
- **Database**: The database name, for example `qdb`.
- **User**: The username for the user account as configured in `pg.user` or `pg.readonly.user` property in `server.conf`. Default value is `admin`.
- **Password**: The password for the user account as configured in `pg.password` or `pg.readonly.password` property in `server.conf`. Default value is `quest`.
- **SSL**: Select whether the connection should use SSL, which sets the `sslmode` parameter. Options include:
  - **Allow**
  - **Disable**
  - **Require**
- **Port**: The port number to use for the connection. Default is `8812`.

Refer to the QuestDB [List of Supported Connection Properties](https://questdb.io/docs/reference/api/postgres/#list-of-supported-connection-properties) for more information.

----------------------------------------

# Quick Base Credentials

## Supported Nodes
- Quick Base

## Prerequisites
- Create a Quick Base account.

## Supported Authentication Methods
- API key

## Configuration Instructions
To configure the Quick Base credential, you will need:
- **Hostname**: The string of characters located between `https://` and `/db` in your Quick Base URL.
- **User Token**: To generate a token, select your **Profile > My preferences > My User Information > Manage my user tokens**. Refer to [Creating and using user tokens](https://helpv2.quickbase.com/hc/en-us/articles/4570374095124-Creating-and-using-user-tokens) for detailed instructions.

----------------------------------------

# QuickBooks Credentials

## Overview
These credentials are used to authenticate the QuickBooks node in n8n.

## Prerequisites
- Create an Intuit developer account.

## Supported Authentication Methods
- OAuth2

## Configuration Instructions for OAuth2
To configure the QuickBooks credential, the following are required:
- **Client ID**: Generated when creating an app.
- **Client Secret**: Generated when creating an app.
- **Environment**: Choose between **Production** or **Sandbox**.

### Steps to Generate Client ID and Client Secret
1. Create an app on [Intuit's developer portal](https://developer.intuit.com/app/developer/qbo/docs/get-started/start-developing-your-app#create-an-app).
2. Select appropriate scopes for your app (see [Learn about scopes](https://developer.intuit.com/app/developer/qbo/docs/learn/scopes)).
3. Enter the **OAuth Redirect URL** from n8n as a **Redirect URI** in the app's **Development > Keys & OAuth** section.
4. Copy the **Client ID** and **Client Secret** from the app's **Development > Keys & OAuth** section for use in n8n. More information can be found in [Get the Client ID and Client Secret for your app](https://developer.intuit.com/app/developer/qbo/docs/get-started/get-client-id-and-client-secret).
5. Refer to Intuit's [Set up OAuth 2.0 documentation](https://developer.intuit.com/app/developer/qbo/docs/develop/authentication-and-authorization/oauth-2.0) for additional setup information.

## Environment Selection
If creating a new app from scratch, start with the **Sandbox** environment. Production apps must satisfy all of Intuit's requirements. For more information, refer to Intuit's [Publish your app documentation](https://developer.intuit.com/app/developer/qbo/docs/go-live/publish-app).

----------------------------------------

# RabbitMQ Credentials

## Supported Authentication Methods
- User connection

## Using User Connection
To configure this credential, you'll need to have a RabbitMQ broker installed and:

1. Enter the **Hostname** for the RabbitMQ broker.
2. Enter the **Port** the connection should use.
3. Enter a **User** the connection should use to log in as.
   - Default is `guest`. RabbitMQ recommends using a different user in production environments.
4. Enter the user's **Password**.
   - Default password for the `guest` user is `guest`.
5. Enter the [virtual host](https://www.rabbitmq.com/docs/vhosts) as the **Vhost**. Default virtual host is `/`.
6. Select whether the connection should use **SSL**. If turned on, also set:
   - **Passwordless**: Select whether the SSL certificate connection uses SASL mechanism EXTERNAL (turned off) or doesn't use a password (turned on). If turned on, also enter:
     - **Client Certificate**: Paste the SSL client certificate.
     - **Client Key**: Paste the SSL client key.
     - **Passphrase**: Paste the SSL passphrase.
   - **CA Certificates**: Paste the SSL CA certificates.

## Guest User Issues
If using the `guest` user for the credential and trying to access a remote host, a connection error may occur. RabbitMQ logs show an error like:

```
[error] <0.918.0> PLAIN login refused: user 'guest' can only connect via localhost
```

This happens because RabbitMQ prohibits the `guest` user from connecting from remote hosts; it can only connect over `localhost`.

To resolve this error:
- Update the `guest` user to allow it remote host access.
- Create or use a different user to connect to the remote host. The `guest` user is limited by default.

----------------------------------------

# Raindrop Credentials

You can use these credentials to authenticate the following nodes:

- Raindrop

## Prerequisites

- Create a Raindrop account.

## Supported Authentication Methods

- OAuth2

## Using OAuth

To configure this credential, you'll need:

- A **Client ID**
- A **Client Secret**

Generate both by creating a Raindrop app.

To create an app, go to **Settings > Integrations** and select **+ Create new app** in the **For Developers** section.

Use these settings for your app:

- Copy the **OAuth Redirect URL** from n8n and add it as a **Redirect URI** in your app.
- Copy the **Client ID** and **Client Secret** from the Raindrop app and enter them in your n8n credential.

----------------------------------------

## Rapid7 InsightVM Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

### Prerequisites

- Create a Rapid7 InsightVM account.

### Supported Authentication Methods

- API key

### Using API Key

To configure this credential, you'll need a Rapid7 InsightVM account and:

- **URL**: The API endpoint URL where the resource or data you are requesting resides. More information about the expected format can be found in the ["endpoint section" of the Rapid7's API overview](https://docs.rapid7.com/insight/api-overview/#endpoint).
- **API Key**: Refer to [Rapid7's Managing Platform API Keys documentation](https://docs.rapid7.com/insight/managing-platform-api-keys/) to create an API key.

Refer to [Rapid7 InsightVM's API documentation](https://help.rapid7.com/insightvm/en-us/api/integrations.html) for more information about authenticating to the service.

----------------------------------------

# Recorded Future credentials

## Prerequisites

- Create a Recorded Future account.

## Supported authentication methods

- API access token

## Using API access token

To configure this credential, you'll need:

- An API **Access Token**

Refer to the Recorded Future APIs documentation for more information on getting your API access token.

----------------------------------------

# Reddit Credentials

You can use these credentials to authenticate the following node:

- **Reddit**: [Reddit Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.reddit/)

## Prerequisites

- Create a Reddit account.

## Supported Authentication Methods

- **OAuth2**

## Using OAuth2

To configure this credential, you'll need:

- A **Client ID**
- A **Client Secret**

### Developer Program

Reddit's developer program is in a closed beta. The instructions below are for regular Reddit users, not members of the developer platform.

Generate both by creating a **third-party app**:
1. Go to your profile > Settings > Safety & Privacy > Manage third-party app authorization > Are you a developer? Create an app.
2. Use these settings for your app:
   - **OAuth Callback URL**: Copy from n8n and use it as your app's **redirect uri**.
   - **Client ID**: Displays underneath your app name. Copy and add it as your n8n **Client ID**.
   - **Client Secret**: Copy the app's secret and add it as your n8n **Client Secret**.

----------------------------------------

# Redis Credentials

You can use these credentials to authenticate the following nodes:
- Redis
- Redis Chat Memory

## Supported Authentication Methods
- Database connection

## Using Database Connection

You will need a user account on a Redis server and:
- A **Password**
- The **Host** name
- The **Port** number
- A **Database Number**
- **SSL** option

To configure this credential:
1. Enter your user account **Password**.
2. Enter the **Host** name of the Redis server. The default is `localhost`.
3. Enter the **Port** number the connection should use. The default is `6379`.
   - This number should match the `tcp_port` listed when you run the `INFO` command.
4. Enter the **Database Number**. The default is `0`.
5. If the connection should use SSL, turn on the **SSL** toggle. If this toggle is off, the connection uses TCP only.

Refer to [Connecting to Redis | Generic client](https://redis.readthedocs.io/en/stable/connections.html) for more information.

----------------------------------------

# Rocket.Chat Credentials

You can use these credentials to authenticate the following nodes:

- Rocket.Chat

## Prerequisites

- Create a Rocket.Chat account.
- Your account must have the `create-personal-access-tokens` permission to generate personal access tokens.

## Supported Authentication Methods

- API access token

## Using API Access Token

To configure this credential, you'll need:

- **User ID**: Displayed when you generate an access token.
- **Auth Key**: Your personal access token. To generate an access token, go to your **avatar > Account > Personal Access Tokens**. Copy the token and add it as the n8n **Auth Key**.
- **Domain**: Your Rocket.Chat domain (default URL or workspace URL).

Refer to Rocket.Chat's API documentation for more information about the service.

----------------------------------------

# Rundeck Credentials

You can use these credentials to authenticate the following nodes:

- Rundeck Node

## Prerequisites

- Create a user account on a Rundeck server.

## Supported Authentication Methods

- API token

## Using API Token

### Configuration Details

- **URL**: Enter the base URL of your Rundeck server, for example `http://myserver:4440`.
- **User API Token**: Generate a user API token by navigating to **Profile > User API Tokens**.

----------------------------------------

# S3 Credentials

You can use these credentials to authenticate the following nodes:

- S3 Node

## Prerequisites

- Create an account on an S3-compatible server. 
- Use the S3 node for generic or non-AWS S3 like:
  - DigitalOcean Spaces
  - MinIO
  - Wasabi

## Supported Authentication Methods

- S3 endpoint

## Configuration Instructions

To configure the S3 credential, you'll need:

- **S3 Endpoint**: URL endpoint for the S3 storage backend.
- **Region**: Region for your S3 storage.
- **Access Key ID**: Enter the S3 access key used to access the bucket or space.
- **Secret Access Key**: Enter the secret access key for the Access Key ID.
- **Force Path Style**: When turned on, uses path-style addressing for buckets.
- **Ignore SSL Issues**: When turned on, connects even if SSL certificate validation fails.

### Using DigitalOcean Spaces

1. Go to the DigitalOcean control panel and open **Settings**. Enter the S3 Endpoint as `https://<your-endpoint>`.
2. Enter the **Region** of your bucket (e.g., `nyc3`).
3. Go to **API** > **Spaces Keys** and select **Generate New Key**.
4. Enter a **Name** for your key and select the checkmark.
5. Copy the **Key** as the **Access Key ID** in n8n.
6. Copy the **Secret** as the **Secret Access Key** in n8n.
7. Keep **Force Path Style** turned off unless using subdomain format.
8. Set **Ignore SSL Issues** based on SSL validation preference.

### Using Wasabi

1. Enter the service URL for your bucket's region as the **S3 Endpoint** (starting with `https://`).
2. Enter the region slug from the service URL as the **Region**.
3. In the Wasabi Console, open **Access Keys** and select **CREATE NEW ACCESS KEY**.
4. Select key type (Root User or Sub-User) and select **CREATE**.
5. Copy the **Access Key** as the **Access Key ID** in n8n.
6. Copy the **Secret Key** as the **Secret Access Key** in n8n.
7. Turn on the **Force Path Style** toggle as recommended by Wasabi.
8. Set **Ignore SSL Issues** based on SSL validation preference.

----------------------------------------

# Salesforce Credentials

You can use these credentials to authenticate the following nodes:

- Salesforce
- Salesforce Trigger

## Supported Authentication Methods

- JWT
- OAuth2

## Using JWT

To configure this credential, you'll need:

- **Environment Type** (Production or Sandbox)
- **Client ID**: Generated when you create a connected app.
- Salesforce **Username**
- **Private Key** for a self-signed digital certificate

### Setup Steps

1. Select **Environment Type** for your connection (Production or Sandbox).
2. Enter your Salesforce **Username**.
3. Log in to your Salesforce org.
4. Generate your own private key and certificate using OpenSSL or use an issued one.
5. In Salesforce Setup, search for `App Manager` and select it.
6. Select **New Connected App**.
7. Provide required **Basic Info** (Name and Contact Email).
8. Enable **OAuth Settings**.
9. Set **Callback URL** to `http://localhost:1717/OauthRedirect`.
10. Enable **Use digital signatures**.
11. Upload the file with your digital certificate (e.g., `server.crt`).
12. Add these **OAuth scopes**:
    - **Full access (full)**
    - **Perform requests at any time (refresh_token, offline_access)**
13. Save to continue.
14. In **API (Enable OAuth Settings)**, select **Manage Consumer Details**.
15. Copy the **Consumer Key** as the **Client ID** in n8n.
16. Enter private key contents in n8n as **Private Key** in PEM format:

    ```
    -----BEGIN PRIVATE KEY-----
    KEY DATA GOES HERE
    -----END PRIVATE KEY-----
    ```

17. In Salesforce, navigate back to the connected app settings.
18. Select **Edit Policies**.
19. Set **Refresh Token Policy** to expire refresh tokens after 90 days.
20. Set **Timeout Value** in **Session Policies** to 15 minutes.
21. Adjust **OAuth Policies** to allow pre-authorized users, then save.

## Using OAuth2

To configure this credential, you'll need a Salesforce account.

### Setup Steps

1. Select **Environment Type** for your connection (Production or Sandbox).
2. Enter your Salesforce **Username**.
3. Log in to your Salesforce org.
4. Search for `App Manager` in Salesforce Setup and select it.
5. Select **New Connected App**.
6. Provide required **Basic Info** (Name and Contact Email).
7. Enable **OAuth Settings**.
8. Set **Callback URL** to `http://localhost:1717/OauthRedirect`.
9. Add these **OAuth scopes**:
    - **Full access (full)**
    - **Perform requests at any time (refresh_token, offline_access)**
10. Ensure the following settings are unchecked:
    - **Require Proof Key for Code Exchange (PKCE)**
    - **Require Secret for Web Server Flow**
    - **Require Secret for Refresh Token Flow**
11. Save to continue.
12. In **API (Enable OAuth Settings)**, select **Manage Consumer Details**.
13. Copy the **Consumer Key** and **Consumer Secret** to n8n as **Client ID** and **Client Secret** respectively.

### Additional Recommendations

- Set refresh token expiration after 90 days.
- Set a **Session Timeout Value** to 15 minutes.

----------------------------------------

# Salesmate Credentials

## Supported Nodes
- **Salesmate**: Used for authenticating with the Salesmate node in n8n.

## Prerequisites
- Create a Salesmate account.

## Supported Authentication Methods
- API token

## Using API Token
To configure this credential, obtain the following:
- **Session Token**: An Access Key. Generate an access key in **My Account > Access Key**.
- **URL**: Your Salesmate domain name/base URL, e.g., `n8n.salesmate.io`.

----------------------------------------

# SearXNG Credentials

## Supported Authentication Methods
- API URL

## Configuration Instructions
To configure this credential, an instance of SearXNG must be running at a URL accessible from n8n:
- **API URL**: The URL of the SearXNG instance you want to connect to.

----------------------------------------

# SeaTable Credentials

## Supported Nodes
- **SeaTable**
- **SeaTable Trigger**

## Prerequisites
- Create a SeaTable account on a cloud or self-hosted server.

## Supported Authentication Methods
- API key

## Configuration Instructions
### Using API Key
To configure this credential, you'll need:
- **Environment**: Select the matching SeaTable instance environment:
  - **Cloud-Hosted**
  - **Self-Hosted**
- **API Token (of a Base)**: Generate a **Base-Token** in SeaTable from the base options: **Advanced > API Token**.
  - Use **Read-Write** permission for your token.
- **Timezone**: Select the timezone of your SeaTable server.

Refer to [Creating an API token](https://seatable.io/en/docs/seatable-api/erzeugen-eines-api-tokens/) for more information.

----------------------------------------

# Segment Credentials

## Supported Nodes
- **Segment**: This credential is used to authenticate the Segment node in n8n.

## Prerequisites
- Create a Segment account.

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you need:
- A **Write Key**: Retrieve the Write Key by navigating to **Sources > Add Source** in your Segment account. Add a **Node.js** source and copy that write key to add to your n8n credential.

## Reference
For more details about locating your Write Key, refer to Segment's documentation on [Finding the Write Key](https://segment.com/docs/connections/find-writekey/).

----------------------------------------

# SecurityScorecard Credentials

You can use these credentials to authenticate the following nodes:
- SecurityScorecard

## Prerequisites
- Create a SecurityScorecard account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Generate an API key in one of two ways:
  - As a user in **My Settings > API**. Refer to [Get an API key](https://securityscorecard.readme.io/docs/getting-started#step-1-get-an-api-key) for more information.
  - As a bot user: View the bot user and select **create token**. Refer to [Authenticate with a bot user](https://securityscorecard.readme.io/docs/authentication#) for more information.

----------------------------------------

# Sekoia Credentials

These credentials are used for authentication with the HTTP Request node to make a Custom API call.

## Prerequisites
- Create a Sekoia SOC platform account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you will need:
- **API Key**: To generate an API key, select **+ API Key**. Refer to the documentation to create an API key.

## Related Resources
Refer to Sekoia's documentation for more information about the service. This is a credential-only node. For more details on custom API operations, refer to the Custom API operations documentation.

----------------------------------------

# Send Email Credentials

## Authentication Method
- **SMTP account**

## Configuration Instructions
To configure this credential, you will need:
- **User**: Email address
- **Password**: User's password or app password
- **Host**: SMTP host address (e.g., `smtp.<provider>.com`)
- **Port**: Default is `465` for SSL; `587` for TLS; `25` for no encryption
- **SSL/TLS**: Enable to use SSL/TLS
- **Disable STARTTLS**: Prevents the server from upgrading the TCP connection using STARTTLS
- **Client Host Name**: Optional, identifies the client to the server

## Best Practices
- Create an email account on a service that supports SMTP
- Refer to your provider's documentation for any additional required steps such as enabling outgoing SMTP or generating an app password.

## Provider Instructions
- Common email providers:
  - **Gmail**: Refer to Gmail SMTP setup
  - **Outlook.com**: Refer to Outlook.com SMTP setup
  - **Yahoo**: Refer to Yahoo SMTP setup
- If your provider isn't listed, search for `SMTP settings` for their instructions.

----------------------------------------

# SendGrid Credentials

You can use these credentials to authenticate the following node:

- **SendGrid**

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need a SendGrid account and:

- An **API Key**

### To create an API key:

1. In the Twilio SendGrid app, go to **Settings > API Keys**.
2. Select **Create API Key**.
3. Enter a **Name** for your API key, like `n8n integration`.
4. Select **Full Access**.
5. Select **Create & View**.
6. Copy the key and enter it in your n8n credential.

Refer to [Create API Keys](https://www.twilio.com/docs/sendgrid/api-reference/api-keys/create-api-keys) for more information.

----------------------------------------

# Sendy Credentials

You can use these credentials to authenticate the following nodes:

- Sendy

## Prerequisites

Host a Sendy application.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- **URL**: The URL of your Sendy application.
- **API Key**: Get your API key from your user profile > Settings > Your API Key.

----------------------------------------

# Sentry.io Credentials

## Supported Nodes
- **Sentry.io**

## Prerequisites
- Create a Sentry.io account.

## Supported Authentication Methods
- API token
- OAuth2
- Server API token (for self-hosted Sentry)

## Configuration Instructions

### Using API Token
1. Generate a **User Auth Token** in **Account > Settings > User Auth Tokens**.

### Using OAuth
- For n8n Cloud users: Select **Connect my account** to connect through the browser.
- To configure OAuth2 manually:
  1. Create an integration and set the **OAuth Callback URL** as an **Authorized Redirect URI**.
  2. Add **Client ID** and **Client Secret** to your n8n credential.

### Using Server API Token
1. Generate a **User Auth Token** in **Account > Settings > User Auth Tokens**.
2. Provide the **URL** of your self-hosted Sentry instance.

----------------------------------------

# Serp Credentials

You can use these credentials to authenticate the following nodes:
- Serp

## Prerequisites
- Create a SerpApi account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Key**

To get your API key:
1. Go to **Your Account > API Key**.
2. Copy **Your Private API Key** and enter it as the **API Key** in your n8n credential.

----------------------------------------

# ServiceNow Credentials

## Core Concepts
ServiceNow credentials are used to authenticate the ServiceNow node in n8n.

## Supported Authentication Methods
- **Basic Authentication**
- **OAuth2**

## Configuration Instructions

### Using Basic Auth
To configure this credential, you will need:
- **User**: Your ServiceNow username.
- **Password**: Your ServiceNow password.
- **Subdomain**: The subdomain of your ServiceNow instance, which can be found in the instance URL: `https://<subdomain>.service-now.com/`. For example, if your URL is `https://dev99890.service-now.com`, then the subdomain is `dev99890`.

### Using OAuth2
To configure this credential, you will need:
- **Client ID**: Generated once you register a new app.
- **Client Secret**: Generated once you register a new app.
- **Subdomain**: The subdomain of your ServiceNow instance, as noted above.

To generate your **Client ID** and **Client Secret**:
1. Register a new app in **System OAuth > Application Registry > New > Create an OAuth API endpoint for external clients**.
2. Use these settings for your app:
   - Copy the **Client ID** and add it to your n8n credential.
   - Enter a **Client Secret** or leave it blank to automatically generate a random secret. Add this secret to your n8n credential.
   - Copy the n8n **OAuth Redirect URL** and add it as a **Redirect URL**.

## Related Resources
Refer to [ServiceNow's API documentation](https://developer.servicenow.com/dev.do#!/reference/api/washingtondc/rest/) for more information about the service.  
Refer to [How to setup OAuth2 authentication for RESTMessageV2 integrations](https://www.servicenow.com/community/in-other-news/how-to-setup-oauth2-authentication-for-restmessagev2/ba-p/2271823) for more information.

----------------------------------------

# Shopify Credentials

You can use these credentials to authenticate the following nodes with Shopify:

- Shopify
- Shopify Trigger

## Supported Authentication Methods

- **Access token (recommended)**: For private apps/single store use. Can be created by regular admins.
- **OAuth2**: For public apps. Must be created by partner accounts.
- **API key**: Deprecated.

## Using Access Token

To configure this credential, you'll need a Shopify admin account and:

- **Shop Subdomain**
- **Access Token**: Generated when you create a custom app.
- **APP Secret Key**: Generated when you create a custom app.

### Setup Steps

1. Enter your **Shop Subdomain**.
   - Example: If the full URL is `https://n8n.myshopify.com`, the Shop Subdomain is `n8n`.
2. In Shopify, go to **Admin > Settings > Apps and sales channels**.
3. Select **Develop apps**.
4. Select **Create a custom app**.
5. If the option is not visible, enable custom app development.
6. In the modal window, enter the **App name**.
7. Select an **App developer**.
8. Select **Create app**.
9. Select **Select scopes** and choose relevant API scopes:
   - For full functionality: `read_orders`, `write_orders`, `read_products`, `write_products`.
10. Select **Save**.
11. Select **Install app**.
12. Copy **Admin API Access Token**.
    - Enter in n8n credential as **Access Token**.
13. Copy **API Secret Key**.
    - Enter in n8n credential as **APP Secret Key**.

## Using OAuth2

To configure this credential, you'll need a Shopify partner account and:

- **Client ID**: Generated when you create a custom app.
- **Client Secret**: Generated when you create a custom app.
- **Shop Subdomain**

### Setup Steps

1. Open your Shopify Partner dashboard.
2. Select **Apps** from the left navigation.
3. Select **Create app**.
4. In the **Use Shopify Partners** section, enter an **App name**.
5. Select **Create app**.
6. Copy the **Client ID** and enter in your n8n credential.
7. Copy the **Client Secret** and enter in your n8n credential.
8. In the left menu, select **Configuration**.
9. Copy the **OAuth Redirect URL** and paste into the **Allowed redirection URL(s)**.
10. Enter an **App URL** for your app.
11. Select **Save and release**.
12. Enter the **Shop Subdomain** of the store you installed the app.

## Using API Key

**Method Deprecated**: Shopify no longer generates API keys. Use the Access token method instead.

### Required Parameters

- **API Key**
- **Password**
- **Shop Subdomain**: Example: If full URL is `https://n8n.myshopify.com`, it is `n8n`.
- _Optional:_ **Shared Secret**

## Common Issues

### Enable Custom App Development

If you cannot create a custom app, enable custom app development by:

1. In Shopify, go to **Admin > Settings > Apps and sales channels**.
2. Select **Develop apps**.
3. Select **Allow custom app development**.

### Forbidden Credentials Error

If you encounter **Forbidden - check your credentials** error, verify your app's access scopes. For example, the `read_orders` scope requires `read_products` scope. Check the assigned scopes against the actions being performed.

----------------------------------------

# Shuffler Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

Create a Shuffler account on either a cloud or self-hosted instance.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An API Key: Get your API key from the Settings page.

## Related Resources

Refer to Shuffler's documentation for more information about the service. This is a credential-only node.

----------------------------------------

# SIGNL4 Credentials

You can use these credentials to authenticate the following node:

- **SIGNL4**

## Prerequisites

Create a SIGNL4 account.

## Supported Authentication Methods

- Webhook secret

## Using Webhook Secret

To configure this credential, you'll need:

- A **Team Secret**: SIGNL4 includes this secret in the "✅ Sign up complete" email as the last part of the webhook URL. If your webhook URL is `https://connect.signl4.com/webhook/helloworld`, your team secret would be `helloworld`.

----------------------------------------

# Slack Credentials

## Supported Authentication Methods
- **API Access Token:**
  - Required for the Slack Trigger node.
  - Works with the Slack node, but not recommended.
- **OAuth2:**
  - Recommended method for the Slack node.
  - Doesn't work with the Slack Trigger node.

## Using API Access Token
To configure this credential, you'll need a Slack account and:
- An **Access Token**

### Steps to Generate an Access Token:
1. Open your Slack API Apps page.
2. Select **Create New App > From scratch**.
3. Enter an **App Name**.
4. Select the **Workspace**.
5. Select **Create App**.
6. In the left menu under **Features**, select **OAuth & Permissions**.
7. In the **Scopes** section, select appropriate scopes for your app.
8. After adding scopes, select **Install to Workspace**.
9. Select **Allow**.
10. Copy the **Bot User OAuth Token** and enter it as the **Access Token** in your n8n credential.
11. Follow the steps in Slack Trigger configuration to complete your app setup.

## Slack Trigger Configuration
To use your Slack app with the Slack Trigger node:
1. Go to **Features > Event Subscriptions**.
2. Turn on the **Enable Events** control.
3. In n8n, copy the **Webhook URL** and enter it as the **Request URL** in your Slack app.
4. Select the bot events to subscribe to.

## Using OAuth2
For users self-hosting n8n, you'll need a Slack account and:
- A **Client ID**
- A **Client Secret**

### Steps to Obtain Client ID and Client Secret:
1. Open your Slack API Apps page.
2. Select **Create New App > From scratch**.
3. Enter an **App Name**.
4. Select the **Workspace**.
5. Select **Create App**.
6. In **Settings > Basic Information**, find the **App Credentials** section.
7. Copy the **Client ID** and **Client Secret** into n8n.
8. In the left menu under **Features**, select **OAuth & Permissions**.
9. In the **Redirect URLs** section, select **Add New Redirect URL** and enter the **OAuth Callback URL** from n8n.
10. Select **Add** and **Save URLs**.
11. In the **Scopes** section, select appropriate scopes for your app.
12. Select **Install to Workspace** and then **Allow**.

## Scopes
Scopes determine app permissions:
- **User Token Scopes**: For actions on behalf of users who authorize the app.
- **Bot Token Scopes**: For bot actions.

### Recommended Scopes:
| **Scope Name**          | **Notes**                                                  |
|------------------------|-----------------------------------------------------------|
| `channels:read`       |                                                           |
| `channels:write`      | Not available as a bot token scope                        |
| `chat:write`          |                                                           |
| `files:read`          |                                                           |
| `files:write`         |                                                           |
| `groups:read`         |                                                           |
| `im:read`             |                                                           |
| `mpim:read`           |                                                           |
| `reactions:read`      |                                                           |
| `reactions:write`     |                                                           |
| `stars:read`          | Not available as a bot token scope                        |
| `stars:write`         | Not available as a bot token scope                        |
| `usergroups:read`     |                                                           |
| `usergroups:write`    |                                                           |
| `users.profile:read`  |                                                           |
| `users.profile:write` | Not available as a bot token scope                        |
| `users:read`          |                                                           |

## Common Issues
### Token Expired
- Slack offers token rotation that can make tokens expire after 12 hours. If you want to use your Slack credentials in production, this feature must be off. 
- If your app uses token rotation, you cannot turn it off; you need to create a new Slack app with token rotation disabled.

----------------------------------------

# Seven Credentials

You can use these credentials to authenticate the following nodes:

- Seven Node

## Prerequisites

- Create a Seven developer account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API key**: Go to **Account > Developer > API Keys** to create an API key. Refer to the Seven API documentation for more information.

----------------------------------------

# Snowflake Credentials

## Supported Authentication Methods
- Database connection

## Configuration Instructions

To configure the Snowflake credential, you need the following:

- **Account**: The string of characters located between `https://` and `snowflakecomputing.com` in your Snowflake URL. 
  - Example: If the URL is `https://abc.eu-central-1.snowflakecomputing.com`, then the account name is `abc.eu-central-1`.
  
- **Database**: The name of the [database](https://docs.snowflake.com/en/sql-reference/sql/use-database) you want to connect to.

- **Warehouse**: The name of the default virtual [warehouse](https://docs.snowflake.com/en/sql-reference/sql/use-warehouse) to use for the session after connecting. This warehouse is used for performing queries and loading data.

- **Username**

- **Password**

- **Schema**: The [schema](https://docs.snowflake.com/en/sql-reference/sql/use-schema) to use after connecting.

- **Role**: The security [role](https://docs.snowflake.com/en/sql-reference/sql/use-role) to use after connecting.

- **Client Session Keep Alive**: This setting keeps the client connection alive indefinitely. To enable, set the `clientSessionKeepAlive` parameter to true, preventing timeouts after three or four hours of inactivity.

Refer to [Session Commands](https://docs.snowflake.com/en/sql-reference/commands-session) for more information on these settings.

----------------------------------------

# SolarWinds IPAM Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Supported Authentication Methods
- Username & Password

## Using Username & Password

To configure this credential, you'll need a SolarWinds IPAM account and:
- **URL**: The base URL of your SolarWinds IPAM server
- **Username**: The username you use to access SolarWinds IPAM
- **Password**: The password you use to access SolarWinds IPAM

Refer to SolarWinds IPAM's API documentation for more information about authenticating to the service.

----------------------------------------

# SolarWinds Observability SaaS Credentials

## Supported Authentication Methods
- API Token

## Using API Token

To configure this credential, you'll need a SolarWinds Observability SaaS account and the following information:
- **URL**: The URL used to access the SolarWinds Observability SaaS platform.
- **API Token**: An API token found in the SolarWinds Observability SaaS platform under **Settings > Api Tokens**. 

Refer to SolarWinds Observability SaaS's API documentation for more information about authenticating to the service.

----------------------------------------

# Splunk Credentials

## Supported Nodes
- Splunk Node

## Prerequisites
- Install Splunk Enterprise.
- Enable token authentication in **Settings > Tokens**.
- Free trial Splunk Cloud accounts cannot access the REST API. 

## Supported Authentication Methods
- API auth token

## Using API Auth Token
- **Auth Token**: Create an auth token in **Settings > Tokens** after enabling token authentication.
- **Base URL**: Example format: `https://localhost:8089`.
- **Allow Self-Signed Certificates**: Allows connection even if SSL validation fails.

## Required Capabilities
- `edit_tokens_own`: Required to create tokens for yourself.
- `edit_tokens_all`: Required to create tokens for any user on the instance.

----------------------------------------

# Spontit Credentials

You can use these credentials to authenticate the following nodes:

- Spontit

## Prerequisites

Create a Spontit account.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Go to **API** to get a new secret key. Enter that key as your **API Key**.
- A **Username**: Enter your Spontit username. If you're unsure how to format it, open your **Profile** and copy the username from there.

----------------------------------------

# SSH Credentials

You can use these credentials to authenticate the following node:

- SSH Node

## Prerequisites

- Create a remote server with SSH enabled.
- Create a user account that can `ssh` into the server using one of the following:
  - A user password.
  - An SSH private key.

## Supported Authentication Methods

- **Password**: Use this method if you have a user account that can `ssh` into the server using their own password.
- **Private Key**: Use this method if you have a user account that uses an SSH key for the server or service.

## Using Password

To configure this credential, you'll need to:

1. Enter the IP address of the server as the **Host**.
2. Enter the **Port** (default is `22`).
3. Enter the **Username** for the account with `ssh` access.
4. Enter the **Password** for that user account.

## Using Private Key

To configure this credential, you'll need to:

1. Enter the IP address of the server as the **Host**.
2. Enter the **Port** (default is `22`).
3. Enter the **Username** of the account that generated the private key.
4. Enter the entire contents of your SSH **Private Key**.
5. If applicable, enter the **Passphrase** for the **Private Key** (leave blank if no passphrase was created).

----------------------------------------

# Spotify Credentials

## Supported Authentication Methods
- OAuth2

## Using OAuth2
### For Self-Hosting Users
1. Open the [Spotify developer dashboard](https://developer.spotify.com/dashboard).
2. Select **Create an app**.
3. Enter an **App name**, like `n8n integration`.
4. Enter an **App description**.
5. Copy the **OAuth Redirect URL** from n8n and enter it as the **Redirect URI** in your Spotify app.
6. Check the box to agree to the Spotify Terms of Service and Branding Guidelines.
7. Select **Create**. The **App overview** page opens.
8. Copy the **Client ID** and enter it in your n8n credential.
9. Copy the **Client Secret** and enter it in your n8n credential.
10. Select **Connect my account** and follow the on-screen prompts to finish authorizing the credential.

## Additional Resources
Refer to [Spotify's Web API documentation](https://developer.spotify.com/documentation/web-api) for more information about the service and to [Spotify Apps](https://developer.spotify.com/documentation/web-api/concepts/apps) for additional details on application integration.

----------------------------------------

# Stackby Credentials

## Supported Nodes
- Stackby

## Prerequisites
- Create a Stackby account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Go to your **Account Settings > API** to create an API Key. Refer to [API Key documentation](https://help.stackby.com/en/article/95-api-key) for more information.

----------------------------------------

# Storyblok Credentials

## Supported Nodes
- Storyblok

## Prerequisites
- Create a Storyblok account.

## Supported Authentication Methods
- Content API key: For read-only access
- Management API key: For full CRUD operations

**Content API**: n8n supports Content API v1 only.

## Using Content API Key
1. Obtain a Content API Key from your Storyblok workspace under **Settings > Access Tokens**.
2. Choose an Access Level: **Public** (`version=published`) or **Preview** (`version-published` and `version=draft`).
3. Enter this access token as your **API Key**. 

Refer to [Content v1 API Authentication](https://www.storyblok.com/docs/api/content-delivery/v1#topics/authentication) for details on supported operations with each Access Level.

## Using Management API Key
1. Generate a **Personal Access Token** from **My Account > Personal access tokens**.
2. Enter this access token as your **Personal Access Token**.

----------------------------------------

# Strapi Credentials

You can use these credentials to authenticate the following nodes:

- Strapi

## Prerequisites

Create a Strapi admin account with:
- Access to an existing Strapi project.
- At least one collection type within that project.
- Published data within that collection type.

## Supported Authentication Methods

- **API user account**: Requires a user account with appropriate content permissions.
- **API token**: Requires an admin account.

## Using API User Account

To configure this credential, you'll need:
- **Email**: Must be for a user account, not an admin account.
- **Password**: Must be for a user account, not an admin account.
- **URL**: Use the public URL of your Strapi server. For Strapi Cloud projects, use an example like: `https://my-strapi-project-name.strapiapp.com`
- **API Version**: Select the version of the API you want to use. Options include:
  - Version 3
  - Version 4

### Configure a Role

For API access, use the Users & Permissions Plugin in **Settings > Users & Permissions Plugin**.

The user must have a role that grants them API permissions on the collection type. For this role, you can:
- Update the default **Authenticated** role to include permissions.
- Create a new role that includes permissions.

For either option:
1. Go to the **Permissions** section.
2. Open the relevant collection type.
3. Select permissions: 
   - `create` (POST)
   - `find` and `findone` (GET)
   - `update` (PUT)
   - `delete` (DELETE)
4. Save the role.

### Create a User Account

1. Go to **Content Manager > Collection Types > User**.
2. Select **Add new entry**.
3. Fill in the user details:
   - **Username**
   - **Email**
   - **Password**
   - **Role**

## Using API Token

To configure this credential, you'll need:
- **API Token**: Create an API token from **Settings > Global Settings > API Tokens**.
- **URL**: Use the public URL of your Strapi server. For Strapi Cloud projects, use an example like: `https://my-strapi-project-name.strapiapp.com`
- **API Version**: Select the version of the API you want to use. Options include:
  - Version 3
  - Version 4

If you don't see the **API tokens** option in **Global settings**, your account doesn't have the **API tokens > Read** permission.

----------------------------------------

# Strava Credentials

You can use these credentials to authenticate the following nodes:

- Strava
- Strava Trigger

## Prerequisites

- Create a Strava account.
- Create a Strava application in **Settings > API**. Refer to Using OAuth2 for more information.

## Supported Authentication Methods

- OAuth2

## Using OAuth2

To configure this credential, you'll need:

- A **Client ID**: Generated when you create a Strava app.
- A **Client Secret**: Generated when you create a Strava app.

Use these settings for your Strava app:

- In n8n, copy the **OAuth Callback URL**. Paste this URL into your Strava app's **Authorization Callback Domain**.
- Remove the protocol (`https://` or `http://`) and the relative URL (`/oauth2/callback` or `/rest/oauth2-credential/callback`) from the **Authorization Callback Domain**. For example, if the OAuth Redirect URL was originally `https://oauth.n8n.cloud/oauth2/callback`, the **Authorization Callback Domain** would be `oauth.n8n.cloud`.
- Copy the **Client ID** and **Client Secret** from your app and add them to your n8n credential.

Refer to Authentication for more information about Strava's OAuth flow.

----------------------------------------

# Stripe Credentials

## Supported Authentication Methods
- API key

## Configuration Instructions
### Using API Key
To configure this credential, you'll need a Stripe admin or developer account and:
- An API **Secret Key**

#### Live Mode Secret Key
To generate a Secret key in live mode:
1. Open the Stripe developer dashboard and select **API Keys**.
2. In the **Standard Keys** section, select **Create secret key**.
3. Enter a **Key name**, like `n8n integration`.
4. Select **Create**. The new API key displays.
5. Copy the key and enter it in your n8n credential as the **Secret Key**.

#### Test Mode Secret Key
To use a Secret key in test mode:
1. Go to your Stripe test mode developer dashboard and select **API Keys**.
2. In the **Standard Keys** section, select **Reveal test key** for the **Secret key**.
3. Copy the key and enter it in your n8n credential as the **Secret Key**.

## Test Mode and Live Mode
All Stripe API requests happen within either test mode or live mode. Each mode has its own API key. 

- Use test mode to access simulated test data.
- Use live mode to access actual account data.

## Key Prefixes
Stripe's Secret keys always begin with `sk_`:
- Live keys begin with `sk_live_`.
- Test keys begin with `sk_test_`. 

Do not use Publishable keys (prefixed `pk_`) with your n8n credential.

----------------------------------------

# Supabase Credentials

You can use these credentials to authenticate the following nodes:

- Supabase
- Supabase Vector Store

## Prerequisites

Create a Supabase account.

## Supported Authentication Methods

- API key

## Using Access Token

To configure this credential, you'll need:

- A **Host**
- A **Service Role Secret**

### Steps to Generate API Key:

1. In your Supabase account, go to the Dashboard and create or select a project for which you want to create an API key.
2. Go to **Project Settings > API** to view the API Settings for your project.
3. Copy the **URL** from the **Project URL** section and enter it as your n8n **Host**.
4. Reveal and copy the **Project API key** for the `service_role`. Enter this as your n8n **Service Role Secret**. 

For more information, refer to:
- API URL and keys documentation.
- Understanding API Keys documentation.

----------------------------------------

# SurveyMonkey Credentials

Use these credentials to authenticate the following node:

- **SurveyMonkey Trigger**

## Prerequisites

- Create a SurveyMonkey account.
- Register an app from your Developer dashboard.

## Supported Authentication Methods

- API access token
- OAuth2

## Using API Access Token

To configure this credential, you'll need:

- **Access Token**: Generated once you create an app.
- **Client ID**: Generated once you create an app.
- **Client Secret**: Generated once you create an app.

Go to **Settings > Credentials** in n8n. Copy the **Access Token**, **Client ID**, and **Client Secret** and add them to n8n.

## Using OAuth

To configure this credential, you'll need:

- **Client ID**: Generated once you create an app.
- **Client Secret**: Generated once you create an app.

1. Go to the app's **Settings > Settings**.
2. Copy the **OAuth Redirect URL** from n8n.
3. Overwrite the app's existing **OAuth Redirect URL** with that URL.
4. Select **Submit Changes**.
5. Ensure the **Scopes** section contains the required app scopes.

Copy the **Client ID** and **Client Secret** from the app's **Settings > Credentials** and add them to your n8n credential. You can now select **Connect my account** from n8n.

### SurveyMonkey Test OAuth Flow

This option works if you keep the default SurveyMonkey **OAuth Redirect URL** and add the n8n OAuth Redirect URL as an **Additional Redirect URL**.

## Required App Scopes

Once you create your app, go to **Settings > Scopes**. Select these scopes for your n8n credential to work:

- **View Surveys**
- **View Collectors**
- **View Responses**
- **View Response Details**
- **Create/Modify Webhooks**
- **View Webhooks**

Select **Update Scopes** to save them.

----------------------------------------

# SyncroMSP Credentials

## Supported Authentication Methods
- API Key

## Configuration Instructions

### To Configure SyncroMSP Credential
1. **API Key**: Known as **API token** in SyncroMSP. To create an API token:
   - Navigate to **user menu > Profile/Password > API Tokens**.
   - Select **Create New Token**. 
   - Choose **Custom Permissions** to name your token and set permissions as required.

2. **Subdomain**: Enter the SyncroMSP subdomain visible in the URL between `https://` and `.syncromsp.com`.
   - Example: For the URL `https://n8n-instance.syncromsp.com`, enter `n8n-instance`.

Refer to the [API Tokens guide](https://community.syncromsp.com/t/api-tokens/2297) for information on creating new tokens.

----------------------------------------

# Sysdig Management Credentials

You can use these credentials to authenticate when using the **HTTP Request** node to make a **Custom API call**.

## Prerequisites

- Create a **Sysdig** account or configure a local instance.

## Supported Authentication Methods

- Access Key

## Using API Access Key

To configure this credential, you'll need:
- An **Access Key**

Refer to the **Sysdig Agent Access Keys documentation** for instructions on obtaining the Access Key from the application.

----------------------------------------

# Taiga Credentials

## Supported Nodes
- Taiga
- Taiga Trigger

## Prerequisites
- Create a Taiga account.

## Supported Authentication Methods
- Basic auth

## Using Basic Auth
To configure this credential, you'll need:
- **Username**: Enter your username or user email address. Refer to the Normal login for more information.
- **Password**: Enter your password.
- **Environment**: Choose between **Cloud** or **Self-Hosted**. For **Self-Hosted** instances, you'll also need to add:
  - **URL**: Enter your Taiga URL.

----------------------------------------

# Tapfiliate Credentials

You can use these credentials to authenticate the following node:

- **Tapfiliate**: [Node Documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.tapfiliate/)

## Prerequisites

- Create a Tapfiliate account.

## Supported Authentication Methods

- **API Key**

## Using API Key

To configure this credential, you'll need:

- An **API Key**: Get your API Key from your Profile Settings > API Key. 

Refer to [Your API Key](https://support.tapfiliate.com/en/articles/1441950-your-api-key) for more information.

----------------------------------------

# Telegram Credentials

## Supported Nodes
- **Telegram**
- **Telegram Trigger**

## Prerequisites
- Create a Telegram account.

## Supported Authentication Methods
- API bot access token

## Using API Bot Access Token

To configure this credential, you'll need:
- A bot **Access Token**

### Steps to Generate Access Token:
1. Start a chat with **BotFather**.
2. Enter the `/newbot` command.
3. Provide a **name** and **username** for your new bot:
   - **Name**: Displayed in contact details.
   - **Username**: Must be:
     - 5 to 32 characters long
     - Not case sensitive
     - Latin characters, numbers, and underscores only
     - Ends with `bot` (e.g., `tetris_bot`)
     - Cannot be changed later.
4. Copy the bot **token** generated by BotFather and add it as the **Access Token** in n8n.

Refer to the [BotFather Create a new bot documentation](https://core.telegram.org/bots/features#creating-a-new-bot) for more information.

----------------------------------------

# TheHive Credentials

## Supported Nodes
- **TheHive**: Use These credentials with TheHive node for TheHive 3 or TheHive 4. For TheHive 5, use TheHive 5 credentials.

## Prerequisites
- Install [TheHive](https://github.com/TheHive-Project/TheHiveDocs/blob/master/installation/install-guide.md) on your server.

## Supported Authentication Methods
- **API Key**

## Configuration Instructions
To configure this credential, you'll need:
- **API Key**: Create an API key from **Organization > Create API Key**. Refer to [API Authentication](https://docs.thehive-project.org/thehive/legacy/thehive3/api/authentication/) for more information.
- **URL**: The URL of your TheHive server.
- **API Version**: Choose between:
  - **TheHive 3 (api v0)**
  - **TheHive 4 (api v1)**
  - For TheHive 5, use TheHive 5 credentials.
- **Ignore SSL Issues**: When enabled, n8n will connect even if SSL certificate validation fails.

----------------------------------------

# TheHive 5 Credentials

## Supported Authentication Methods
- API Key

## Prerequisites
- Install TheHive 5 on your server.

## Using API Key
To configure this credential, you'll need:
- **API Key**: 
  - Users with `orgAdmin` and `superAdmin` accounts can generate API keys:
    - `orgAdmin` account: Go to **Organization > Create API Key** for the user you wish to generate a key for.
    - `superAdmin` account: Go to **Users > Create API Key** for the user you wish to generate a key for.
- **URL**: The URL of your TheHive server.
- **Ignore SSL Issues**: When turned on, n8n will connect even if SSL certificate validation fails.

Refer to TheHive's API documentation for more information about the service.

----------------------------------------

# TimescaleDB Credentials

You can use these credentials to authenticate the following node:

- TimescaleDB

## Prerequisites

An available instance of TimescaleDB.

## Supported Authentication Methods

- Database connection

## Using Database Connection

To configure this credential, you'll need:

- **Host**: The fully qualified server name or IP address of your TimescaleDB server.
- **Database**: The name of the database to connect to.
- **User**: The username you want to log in with.
- **Password**: Enter the password for the database user you are connecting to.
- **Ignore SSL Issues**: If turned on, n8n will connect even if SSL certificate validation fails and you won't see the SSL selector.
- **SSL**: This setting controls the `ssl-mode` connection string for the connection. Options include:
  - **Allow**: Sets the `ssl-mode` parameter to `allow`. First, try a non-SSL connection; if that fails, try an SSL connection.
  - **Disable**: Sets the `ssl-mode` parameter to `disable`. Only try a non-SSL connection.
  - **Require**: Sets the `ssl-mode` parameter to `require`, which is the default for TimescaleDB connection strings. Only try an SSL connection. If a root CA file is present, verify that a trusted certificate authority (CA) issued the server certificate.
- **Port**: The port number of the TimescaleDB server.

----------------------------------------

# Todoist Credentials

You can use these credentials to authenticate the following nodes:

- Todoist

## Supported Authentication Methods

- API Key
- OAuth2

## Using API Key

To configure this credential, you'll need a Todoist account and:

- An **API Key**

To get your **API Key**:

1. In Todoist, open your **Integration settings**.
2. Select the **Developer** tab.
3. Copy your **API token** and enter it as the **API Key** in your n8n credential.

## Using OAuth2

If you're self-hosting n8n, you'll need a Todoist account and:

- A **Client ID**
- A **Client Secret**

Get both by creating an application:

1. Open the Todoist **App Management Console**.
2. Select **Create a new app**.
3. Enter an **App name** for your app, like `n8n integration`.
4. Select **Create app**.
5. Copy the n8n **OAuth Redirect URL** and enter it as the **OAuth redirect URL** in Todoist.
6. Copy the **Client ID** from Todoist and enter it in your n8n credential.
7. Copy the **Client Secret** from Todoist and enter it in your n8n credential.
8. Configure the rest of your Todoist app as it makes sense for your use case.

----------------------------------------

# Toggl Credentials

## Supported Nodes
- Toggl Trigger

## Prerequisites
- Create a Toggl account.

## Supported Authentication Methods
- Basic auth

## Using Basic Auth
To configure this credential, you'll need:
- **Username**: Enter your user email address.
- **Password**: Enter your user password.

Refer to Toggl's API documentation for more information about authentication.

----------------------------------------

# TOTP Credentials

You can use these credentials to authenticate the following nodes:

- **TOTP**: [TOTP Node Documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.totp/)

## Prerequisites

Generate a TOTP **Secret** and **Label**.

## Supported Authentication Methods

- Secret and Label

## Using Secret and Label

To configure this credential, you'll need:

- A **Secret**: The secret key encoded in the QR code during authenticator setup. Example: `BVDRSBXQB2ZEL5HE`. It is encoded in Base32.
  
- A **Label**: The identifier for the account, including the account name as a URI-encoded string. Use a colon to separate the issuer prefix and the account name, for example: `GitHub:john-doe`.

----------------------------------------

# Travis CI Credentials

You can use these credentials to authenticate the following nodes:
- Travis CI

## Prerequisites
- Create a Travis CI account.

## Supported Authentication Methods
- API token

## Using API Token
To configure this credential, you'll need:
- An **API Token**: Get your API token from **Account Settings > API Token** or generate one through the Travis CI command line client.

----------------------------------------

# Trellix ePO Credentials

## Prerequisites
- Create a Trellix ePolicy Orchestrator account.

## Supported Authentication Methods
- Basic auth

## Using Basic Auth
To configure these credentials, you will need:
- A **Username** to connect as.
- A **Password** for that user account.

n8n uses these fields to build the `-u` parameter in the format of `-u username:password`. 

### Example Usage
To authenticate using curl:
```bash
curl -u username:password <API_ENDPOINT>
```

Refer to [Web API basics](https://docs.trellix.com/bundle/epolicy-orchestrator-web-api-reference-guide/page/GUID-2503B69D-2BCE-4491-9969-041838B39C1F.html) for more information.

----------------------------------------

# Trello Credentials

You can use these credentials to authenticate the following nodes:
- Trello
- Trello Trigger

## Supported Authentication Methods
- API Key

## Using API Key

To configure this credential, you'll need a Trello account and:
- An **API Key**
- An **API Token**

To generate both the API Key and API Token, create a Trello Power-Up:
1. Open the Trello Power-Up Admin Portal.
2. Select **New**.
3. Enter a **Name** for your Power-Up (e.g., `n8n integration`).
4. Select the **Workspace** the Power-Up should have access to.
5. Leave the **iframe connector URL** blank.
6. Enter appropriate contact information.
7. Select **Create**.
8. This should open the Power-Up to the **API Key** page; if not, navigate to that page.
9. Select **Generate a new API Key**.
10. Copy the **API key** from Trello and enter it in your n8n credential.
11. In your Trello API key page, enter your n8n base URL as an **Allowed origin**.
12. In **Capabilities**, select the necessary options.
13. Select the **Token** link next to your Trello **API Key**.
14. When prompted, select **Allow** to grant all permissions requested.
15. Copy the Trello **Token** and enter it as the n8n **API Token**.

----------------------------------------

# Twake Credentials

## Supported Authentication Methods
- Cloud API key
- Server API key

## Using Cloud API Key
To configure this credential, you'll need:
- A **Workspace Key**: Generated when you install the n8n application to your Twake Cloud environment and select **Configure**.

## Using Server API Key
To configure this credential, you'll need:
- A **Host URL**: The URL of your Twake self-hosted instance.
- A **Public ID**: Generated when you create an app.
- A **Private API Key**: Generated when you create an app.

### Steps to Generate Public ID and Private API Key
1. Go to **Workspace Settings > Applications and connectors > Access your applications and connectors > Create an application**.
2. Enter appropriate details.
3. Once you've created your app, view its **API Details**.
4. Copy the **Public identifier** and add it as the n8n **Public ID**.
5. Copy the **Private key** and add it as the n8n **Private API Key**.

----------------------------------------

# Twilio Credentials

You can use these credentials to authenticate the following nodes:
- Twilio
- Twilio trigger

## Supported Authentication Methods
- **Auth Token**: Recommended for local testing only.
- **API Key**: Recommended for production environments.

## Using Auth Token
To configure this credential, you will need:
- Your Twilio **Account SID**
- Your Twilio **Auth Token**

Setup Steps:
1. In n8n, select **Auth Token** as the **Auth Type**.
2. Go to **Console Dashboard > Account Info** in Twilio.
3. Copy your **Account SID** and enter it in your n8n credential as the username.
4. Copy your **Auth Token** and enter it in your n8n credential as the password.

## Using API Key
To configure this credential, you will need:
- Your Twilio **Account SID**
- An **API Key SID**: Generated when you create an API key.
- An **API Key Secret**: Generated when you create an API key.

Setup Steps:
1. In n8n, select **API Key** as the **Auth Type**.
2. Go to **Console Dashboard > Account Info** in Twilio.
3. Copy your **Account SID** and enter it in your n8n credential.
4. Go to your account's **API keys & tokens** page in Twilio.
5. Select **Create API Key**.
6. Enter a **Friendly name** for your API key, such as `n8n integration`.
7. Select your **Key type** (Main or Standard).
8. Select **Create API Key** to finish creating the key.
9. Copy the **API Key SID** displayed with the key and enter it in your n8n credential.
10. Copy the **API Key Secret** displayed with the key and enter it in your n8n credential.

## Selecting an API Key Type
- **Main**: Same access as using Account SID and Auth Token.
- **Standard**: Access to all functionality in Twilio's APIs except API key resources and Account resources.
- **Restricted**: In beta, not tested by n8n; use at your own risk.

Refer to Twilio's documentation for detailed information on authentication and API keys.

----------------------------------------

# Twist Credentials

You can use these credentials to authenticate the following nodes:

- Twist

## Prerequisites

- Create a Twist account.
- Create a general integration and configure a valid OAuth Redirect URL.

## Supported Authentication Methods

- OAuth2

## Using OAuth2

To configure this credential, you'll need:

- **Client ID**: Generated once you create a general integration.
- **Client Secret**: Generated once you create a general integration.

Use these settings for your integration's **OAuth Authentication**:

- Copy the **OAuth Redirect URL** from n8n and enter it as the **OAuth 2 redirect URL** in Twist.

### Note on Redirect URL

Twist doesn't accept a `localhost` Redirect URL. The Redirect URL should be a URL in your domain, for example: `https://mytemplatemaker.example.com/gr_callback`.

- Select **Update OAuth settings** to save those changes.
- Copy the **Client ID** and **Client Secret** from Twist and enter them in the appropriate fields in n8n.

### Local Environment Redirect URL

Twist doesn't accept a localhost callback URL. Follow these steps to configure the OAuth credentials for the local environment:

1. Use ngrok to expose the local server running on port `5678` to the internet. In your terminal, run the following command:
    ```bash
    ngrok http 5678
    ```

2. Run the following command in a new terminal. Replace `<YOUR-NGROK-URL>` with the URL that you get from the previous step:
    ```bash
    export WEBHOOK_URL=<YOUR-NGROK-URL>
    ```

3. Use the generated URL as your **OAuth 2 redirect URL** in Twist.

----------------------------------------

# X (formerly Twitter) Credentials

## Supported Nodes
You can use these credentials to authenticate the following nodes:
- X (formerly Twitter)

## Prerequisites
- Create an X developer account.
- Create a Twitter app or use the default project and app created in the developer portal.

## Supported Authentication Methods
- OAuth2

**Deprecation Warning:** n8n deprecated OAuth authentication (OAuth 1.0a) with the release of V2 of the X node in n8n version 0.236.0.

## Using OAuth2
To configure this credential, you'll need:
- A **Client ID**
- A **Client Secret**

**Steps to generate Client ID and Client Secret:**
1. In the Twitter developer portal, open your project.
2. On the project's Overview tab, find the Apps section and select Add App.
3. Give your app a Name and select Next.
4. Go to the App Settings.
5. In the User authentication settings, select Set Up.
6. Set the App permissions. Choose Read and write and Direct message.
7. In the Type of app section, select Web App, Automated App, or Bot.
8. In n8n, copy the OAuth Redirect URL.
9. In your X app, find the App Info section and paste that URL in as the Callback URI / Redirect URL.
10. Add a Website URL.
11. Save your changes.
12. Copy the Client ID and Client Secret and add them to the corresponding fields in your n8n credential.

## Rate Limits
- This credential uses the OAuth 2.0 Bearer Token authentication method, subject to app rate limits.
- Rate limits per endpoint are based on your developer access plan level. App and user rate limits are calculated independently.
  
**Rate Limit Guidelines:**
- Deprecated OAuth method: User rate limits apply.
- Using OAuth2: App rate limits apply.

Refer to X's [Rate Limits](https://developer.x.com/en/docs/twitter-api/rate-limits) for more information.

----------------------------------------

# Typeform Credentials

You can use these credentials to authenticate the following nodes:

- Typeform Trigger

## Supported Authentication Methods

- API token
- OAuth2

## Using API Token

To configure this credential, you'll need a Typeform account and:

- A personal **Access Token**

### Steps to Get Your Personal Access Token:

1. Log into your Typeform account.
2. Select your profile avatar and go to **Account > Your settings > Personal Tokens**.
3. Select **Generate a new token**.
4. Give your token a **Name** (e.g., `n8n integration`).
5. For **Scopes**, select **Custom scopes** and select:
   - Forms: Read
   - Webhooks: Read, Write
6. Select **Generate token**.
7. Copy the token and enter it in your n8n credential.

## Using OAuth2

To configure this credential, you'll need a Typeform account and:

- A **Client ID**: Generated when you register an app.
- A **Client Secret**: Generated when you register an app.

### Steps to Get Your Client ID and Client Secret:

1. Log into your Typeform account.
2. In the upper left, select the dropdown for your organization and select **Developer apps**.
3. Select **Register a new app**.
4. Enter an **App Name** that makes sense (e.g., `n8n OAuth2 integration`).
5. Enter your n8n base URL as the **App website** (e.g., `https://n8n-sample.app.n8n.cloud/`).
6. From n8n, copy the **OAuth Redirect URL** and enter this in Typeform as the **Redirect URI(s)**.
7. Select **Register app**.
8. Copy the **Client Secret** and enter it in your n8n credential.
9. In Typeform, select **Got it** to close the Client Secret modal.
10. The **Developer apps** panel displays your new app. Copy the **Client ID** and enter it in your n8n credential.
11. Once both the **Client ID** and **Client Secret** are entered in n8n, select **Connect my account** and follow prompts to finish authorizing the app.

----------------------------------------

# Unleashed Software Credentials

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- **API ID**: Go to **Integrations > Unleashed API Access** to find your **API ID**.
- **API Key**: Go to **Integrations > Unleashed API Access** to find your **API Key**.

## Requirements
- Unleashed account owner required to view the API ID and API Key.

----------------------------------------

# UpLead Credentials

## Overview
Use UpLead credentials to authenticate the UpLead node.

## Prerequisites
- Create an UpLead account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you will need:
- An **API Key**: Generate a new API Key by going to **Account > Profiles**. For more details, refer to UpLead's documentation on generating an API key.

----------------------------------------

# uProc Credentials

You can use these credentials to authenticate the following node:
- **uProc**

## Prerequisites
- Create a uProc account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- **Email**: Enter the email address you use to log in to uProc. This is also displayed in **Settings > Integrations > API Credentials**.
- **API Key**: Go to **Settings > Integrations > API Credentials**. Copy the **API Key (real)** from the **API Credentials** section and enter it in your n8n credential.

----------------------------------------

# urlscan.io Credentials

## Overview
Use these credentials to authenticate the following node:
- **Node**: urlscan.io

## Prerequisites
- Create an urlscan.io account.

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you'll need:
- An **API Key**: Get your API key from **Settings & API > API Keys**.

----------------------------------------

# Venafi TLS Protect Cloud Credentials

## Supported Nodes
- **Venafi TLS Protect Cloud node**
- **Venafi TLS Protect Cloud Trigger node**

## Prerequisites
- Create a Venafi TLS Protect Cloud account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- **Region**: Select the region that matches your business needs. Choose **EU** if located in the European Union; otherwise, choose **US**.
- **API Key**: Obtain your API key by navigating to **avatar > Preferences > API Keys**. You can also use VCert to retrieve your API key. Refer to the **Obtaining an API Key** documentation for details.

----------------------------------------

# Venafi TLS Protect Datacenter Credentials

## Core Concepts

These credentials are used to authenticate the Venafi TLS Protect Datacenter node in n8n.

## Prerequisites

- Create a Venafi TLS Protect Datacenter account.
- Set the expiration and refresh time for tokens. Refer to the Venafi documentation for [Setting up token authentication](https://docs.venafi.com/Docs/current/TopNav/Content/SDK/AuthSDK/t-SDKa-Setup-OAuth.php).
- Create an API integration in **API > Integrations**. Refer to the guidance on [Integrating other systems with Venafi products](https://docs.venafi.com/Docs/current/TopNav/Content/API-ApplicationIntegration/t-APIAppIntegrations-creating.php).
  - Note the Client ID for your integration.
  - Choose the desired scopes for operations in n8n. Consult the scopes table linked above for details.

## Supported Authentication Methods

- API integration

## Configuration Instructions

To configure this credential, provide the following parameters:

- **Domain**: Enter your Venafi TLS Protect Datacenter domain.
- **Client ID**: Enter the Client ID from your API integration.
- **Username**: Enter your username.
- **Password**: Enter your password.
- **Allow Self-Signed Certificates**: If enabled, this option permits self-signed certificates.

----------------------------------------

# Vero Credentials

You can use these credentials to authenticate the following nodes:

- Vero

## Prerequisites

Create a Vero account.

## Supported Authentication Methods

- API auth token

## Using API Auth Token

To configure this credential, you'll need:

- An **Auth Token**: Get your auth token from your Vero account settings. Refer to API authentication for more information.

----------------------------------------

# Vonage Credentials

## Authentication Nodes

You can use these credentials to authenticate the following node:

- **Vonage** 

## Prerequisites

Create a Vonage developer account.

## Supported Authentication Methods

- API key

## Configuration Instructions

To configure the Vonage credential, you'll need:

- An **API Key**
- An **API Secret**

Get your **API Key** and **API Secret** from your [developer dashboard](https://dashboard.nexmo.com/) under **user account > Settings > API Settings**. Refer to the [Retrieve your account information](https://developer.vonage.com/en/account/guides/dashboard-management#retrieve-your-account-information) for more information.

----------------------------------------

# VirusTotal Credentials

## Prerequisites
- Create a VirusTotal account.

## Supported Authentication Methods
- API key

## Using API Key
To configure this credential, you'll need:
- An **API Token**: Access your API key through your user account menu. Enter this as the **API Token** in your n8n credential. Refer to VirusTotal's documentation for more information on API authentication. 

## Node Details
- **HTTP Request Node**: This credential is used to authenticate when making a Custom API call.

----------------------------------------

# Webflow Credentials

You can use these credentials to authenticate the following nodes:

- Webflow
- Webflow Trigger

## Prerequisites

- Create a Webflow account.
- Create a site: Required for API access token authentication only.

## Supported Authentication Methods

- API access token
- OAuth2

## Using API Access Token

To configure this credential, you'll need:

- A Site Access Token: Access tokens are site-specific. Go to your site's Site Settings > Apps & integrations > API access and select Generate API token. Refer to Get a Site Token for more information.

## Using OAuth2

Cloud users don't need to provide connection details. Select Connect my account to connect through your browser.

If you need to configure OAuth2 from scratch, register an application in your workspace.

Use these settings for your application:

- Copy the OAuth callback URL from n8n and add it as a Redirect URI in your application.
- Once you've created your application, copy the Client ID and Client Secret and enter them in your n8n credential.
- If you are using the Webflow Data API V1 (deprecated), enable the Legacy toggle. Otherwise, leave this inactive.

Refer to OAuth for more information on Webflow's OAuth web flow.

----------------------------------------

# Webhook Credentials

Use these credentials to authenticate the following node:

- **Webhook**

## Prerequisites

You must use the authentication method required by the app or service you want to query.

## Supported Authentication Methods

- Basic auth
- Header auth
- JWT auth
- None

## Using Basic Auth

To configure this credential, enter:

- **Username**: The username you use to access the app or service.
- **Password**: The password that corresponds to the username.

## Using Header Auth

To configure this credential, enter:

- **Header Name**: The name of the header to pass to the app or service.
- **Value**: The value for the header.

## Using JWT Auth

JWT Auth is a method of authentication that uses JSON Web Tokens (JWT) to digitally sign data. This authentication method uses the **JWT credential** and can use either a **Passphrase** or **PEM Key** as key type. Refer to the documentation for JWT credential for more information.

----------------------------------------

# Wekan Credentials

You can use these credentials to authenticate the following nodes:

- Wekan

## Prerequisites

Install Wekan on your server.

## Supported Authentication Methods

- Basic Auth

## Using Basic Auth

To configure this credential, you'll need:

- A **Username**: Enter your Wekan username.
- A **Password**: Enter your Wekan password.
- A **URL**: Enter your Wekan domain.

----------------------------------------

# WhatsApp Business Cloud Credentials

You can use these credentials to authenticate the following nodes:

- **WhatsApp Business Cloud**
- **WhatsApp Trigger**

## Requirements

To create credentials for WhatsApp, you need the following Meta assets:

- **Meta Developer Account**: Allows you to create and manage Meta apps, including WhatsApp integrations.
- **Meta Business Portfolio**: Required for WhatsApp messaging services. 

### Create a Meta Business App

1. Visit the Meta for Developers Apps dashboard.
2. Select **Create app**.
3. In **Add products to your app**, select **Set up** in the WhatsApp tile.
4. Select your business portfolio and continue.
5. In the left-side menu, go to **App settings** > **Basic**.
6. Set the **Privacy Policy URL** and **Terms of Service URL**.
7. Change the **App Mode** to **Live**.

## Supported Authentication Methods

- **API Key**: Use for the WhatsApp Business Cloud node.
- **OAuth2**: Use for the WhatsApp Trigger node.

## Using API Key

To configure this credential, you'll need:

- An API **Access Token**
- A **Business Account ID**

### Steps to Generate Access Token

1. Visit the Meta for Developers Apps dashboard.
2. Select your Meta app.
3. In the left-side menu, select **WhatsApp** > **API Setup**.
4. Select **Generate access token** and confirm access.
5. Copy the **Access token** and add it to n8n as the **Access Token**.
6. Copy the **WhatsApp Business Account ID** and add it to n8n as the **Business Account ID**.

## Using OAuth2

To configure this credential, you'll need:

- A **Client ID**
- A **Client Secret**

### Steps to Retrieve Client ID and Secret

1. Visit the Meta for Developers Apps dashboard.
2. Select your Meta app.
3. In the left-side menu, select **App settings** > **Basic**.
4. Copy the **App ID** and enter it as the **Client ID** within n8n.
5. Copy the **App Secret** and enter it as the **Client Secret** within n8n. 

For further information, refer to Meta's documentation on the app review and configuration process.

----------------------------------------

# Wise Credentials

## Supported Nodes
- **Wise**
- **Wise Trigger**

## Prerequisites
- Create a Wise account.

## Supported Authentication Methods
- API token

## Using API Token
### Configuration Steps
1. **API Token**: 
   - Go to **user menu > Settings > API tokens** to generate an API token.
   - Enter the generated API key in your n8n credential.
   
2. **Environment**: 
   - Select the environment that matches your Wise account:
     - Select **Test** for Wise test sandbox account.
     - Otherwise, select **Live**.
     
3. **Private Key (Optional)**: 
   - For live endpoints requiring Strong Customer Authentication (SCA), generate a public and private key.
   - Enter the private key in n8n. 
   - If using a **Test** environment, only enter a Private Key if enabled on the [public keys management page](https://sandbox.transferwise.tech/public-keys).

## Add a Private Key
Some live endpoints require Strong Customer Authentication (SCA). Requests to endpoints requiring SCA will return a 403 Forbidden HTTP status code with the message:

```
This request requires Strong Customer Authentication (SCA). Please add a key pair to your account and n8n credentials. See https://api-docs.transferwise.com/#strong-customer-authentication-personal-token
```

### Steps to Use Endpoints Requiring SCA
1. Generate an RSA key pair:
   ```bash
   $ openssl genrsa -out private.pem 2048 
   $ openssl rsa -pubout -in private.pem -out public.pem
   ```

2. Add the content of the public key `public.pem` to Wise:
   - **user menu > Settings > API tokens > Manage public keys**.

3. Add the content of the private key `private.pem` in n8n to the **Private Key (Optional)**.

### Additional Reference
- For more information on Strong Customer Authentication, refer to [Personal Token SCA](https://docs.wise.com/api-docs/features/strong-customer-authentication-2fa/personal-token-sca).

----------------------------------------

# UptimeRobot Credentials

## Supported Nodes
- UptimeRobot

## Prerequisites
- Create an UptimeRobot account.

## Supported Authentication Methods
- API key

## Using API Key
- **API Key**: Obtain from My Settings > API Settings. Create a Main API Key and enter it in your n8n credential.

### API Key Types
- **Account-specific (Main)**: Pulls data for multiple monitors.
- **Monitor-specific**: Pulls data for a single monitor.
- **Read-only**: Only runs `GET` API calls.

**Note**: To perform all operations in the UptimeRobot node, use the Main or Account-specific API key type. Further information can be found in the UptimeRobot API authentication documentation.

----------------------------------------

# Wolfram|Alpha Credentials

## Supported Authentication Methods
- **API Key**

## Using API Key
To configure this credential, you'll need a registered **Wolfram ID** and:
- An **App ID**

### Steps to Get an App ID:
1. Open the Wolfram|Alpha Developer Portal and go to **API Access**.
2. Select **Get an App ID**.
3. Enter a **Name** for your application (e.g., `n8n integration`).
4. Enter a **Description** for your application.
5. Select **Simple API** as the **API**.
6. Select **Submit**.
7. Copy the generated **App ID** and enter it in your n8n credential.

## Resolve Forbidden Connection Error
If you enter your App ID and receive a **Forbidden** error, ensure that you have verified your email address for your Wolfram ID:
1. Go to your **Wolfram ID Details**.
2. If the **Verified** label is not present under your **Email address**, select the link to **Send a verification email**.
3. Open the link in that email to verify your email address.

It may take several minutes for the verification to populate to the API, after which retrying the n8n credential should succeed.

----------------------------------------

# WooCommerce Credentials

## Supported Nodes
- **WooCommerce**
- **WooCommerce Trigger**

## Prerequisites
- Install the WooCommerce plugin on your WordPress website.
- Set WordPress permalinks to use something other than Plain.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- A **Consumer Key**: Created when generating an API key.
- A **Consumer Secret**: Created when generating an API key.
- A **WooCommerce URL**

### Steps to Generate API Key:
1. Go to **WooCommerce > Settings > Advanced > Rest API > Add key**.
2. Select **Read/Write** from the **Permissions** dropdown.
3. Copy the generated **Consumer Key** and **Consumer Secret** and enter them into your n8n credentials.
4. Enter your WordPress site URL as the **WooCommerce URL**.
5. By default, n8n passes your credential details in the Authorization header. To pass them as query string parameters instead, turn on **Include Credentials in Query**.

## Resolve "Consumer Key is Missing" Error
If you encounter the `Consumer key is missing` error:
- This typically occurs when the server can't parse the Authorization header details when authenticating over SSL.
- To resolve it, turn on the **Include Credentials in Query** toggle to pass the consumer key/secret as query string parameters instead and retry the credential.

----------------------------------------

# WordPress Credentials

You can use these credentials to authenticate the following node:
- **WordPress**

## Prerequisites
- Create a WordPress account or deploy WordPress on a server.

## Supported Authentication Methods
- Basic auth

## Using Basic Auth

To configure this credential, you'll need:
- Your WordPress **Username**
- A WordPress application **Password**
- Your **WordPress URL**
- Decide whether to **Ignore SSL Issues**

### Steps for Configuration
1. **Enable Two-Step Authentication**
   - Open your WordPress profile.
   - Select **Security** from the left menu.
   - Select **Two-Step Authentication**.
   - If not enabled, enable it using an authenticator app or SMS codes.

2. **Create an Application Password**
   - From the WordPress **Security > Two-Step Authentication** page, select **+ Add new application password** in the **Application passwords** section.
   - Enter an **Application name**, like `n8n integration`.
   - Select **Generate Password**.
   - Copy the generated password for use in your n8n credential.

3. **Set Up the Credential**
   - Enter your WordPress **Username** in your n8n credential.
   - Enter the application password as the **Password** in your n8n credential.
   - Enter the URL of your WordPress site as the **WordPress URL**.
   - Optional: Choose whether you want to ignore SSL certificate validation.

----------------------------------------

# Workable Credentials

## Supported Authentication Methods
- API key

## Configuration Instructions
### To Configure This Credential, You'll Need:
- **Subdomain**: Your Workable subdomain is the part of your Workable domain between `https://` and `.workable.com`. For example, if the full domain is `https://n8n.workable.com`, the subdomain is `n8n`. This subdomain is also displayed on your Workable **Company Profile** page.
- **Access Token**: Go to your **profile > Integrations > Apps** and select **Generate API token**. Refer to [Generate a new token](https://help.workable.com/hc/en-us/articles/115015785428-Generating-revoking-access-tokens-for-Workable-s-API#Generateanewtoken) for more information.

### Token Scopes
If you're using this credential with the Workable Trigger node, select the `r_candidates` and `r_jobs` scopes when generating your token. For other use cases, choose relevant scopes.

Refer to [Supported API scopes](https://help.workable.com/hc/en-us/articles/115015785428-Generating-revoking-access-tokens-for-Workable-s-API#SupportedAPIscopes) for more information on scopes.

----------------------------------------

# Wufoo Credentials

You can use these credentials to authenticate the following node:

- **Wufoo Trigger**

## Supported Authentication Methods

- API Key

## Using API Key

To configure this credential, you'll need:

- **API Key**: Get your API key from the Wufoo Form Manager. To the right of a form, select **More > API Information**.
- **Subdomain**: Your subdomain is the part of your Wufoo URL that comes after `https://` and before `wufoo.com`. For example, if the full domain is `https://n8n.wufoo.com`, the subdomain is `n8n`. Admins can view the subdomain in the **Account Manager**.

----------------------------------------

# xAI Credentials

## Supported Nodes
- Chat xAI Grok

## Prerequisites
- Create an xAI account.

## Supported Authentication Methods
- API Key

## Using API Key
To configure this credential, you'll need:
- An **API Key**: You can create a new API key on the xAI Console API Keys page.

----------------------------------------

# Xata Credentials

You can use these credentials to authenticate the following nodes:

- Xata

## Prerequisites

Create a Xata database or an account on an existing database.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- **Database Endpoint**: The Workspace API requires that you identify the database you're requesting information from using this format: 
  ```
  https://{workspace-display-name}-{workspace-id}.{region}.xata.sh/db/{dbname}
  ```
  - `{workspace-display-name}`: An optional identifier for your Database Endpoint.
  - `{workspace-id}`: The unique ID of the workspace (6 alphanumeric characters).
  - `{region}`: The hosting region for the database (must match the database region configuration).
  - `{dbname}`: The name of the database you're interacting with.

- **Branch**: Enter the name of the GitHub branch for your database.

- **API Key**: To generate an API key, go to **Account Settings** and select **+ Add a key**.

----------------------------------------

# Xero Credentials

You can use these credentials to authenticate the following node:

- **Node**: Xero

## Prerequisites

- Create a Xero account.

## Supported Authentication Methods

- **OAuth2**

## Using OAuth2

To configure this credential, you'll need:

- **Client ID**: Generated when you create a new app for a custom connection.
- **Client Secret**: Generated when you create a new app for a custom connection.

### Generate Client ID and Client Secret

1. Create an OAuth2 custom connection app in your Xero developer portal.
2. Use the following settings for your app:
   - **Integration Type**: Select **Web app**.
   - **Company or Application URL**: Enter the URL of your n8n server or reverse proxy address (e.g., `https://your-username.app.n8n.cloud/`).
   - **OAuth Redirect URL**: Copy the **OAuth Redirect URL** from n8n and add it as an **OAuth 2.0 redirect URI** in your app.
   - **Scopes**: Select appropriate scopes for your app. To use all functionality in the Xero node, add the `accounting.contacts` and `accounting.transactions` scopes.

Refer to Xero's OAuth Custom Connections documentation for more information.

----------------------------------------

# Yourls Credentials

## Supported Nodes
- **Yourls**: Use these credentials to authenticate the Yourls node.

## Prerequisites
- Install [Yourls](https://github.com/YOURLS/YOURLS) on your server.

## Supported Authentication Methods
- API key

## Credential Configuration
### Required Parameters
- **Signature**: Obtain your Signature token by going to **Tools > Secure passwordless API call**. Refer to [Yourl's Passwordless API documentation](https://yourls.org/docs/guide/advanced/passwordless-api) for more information.
- **URL**: Enter the URL of your Yourls instance.

----------------------------------------

# Zabbix Credentials

You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call.

## Prerequisites

Create a Zabbix Cloud account or self-host your own Zabbix server.

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need:

- **API Token**: An API key for your Zabbix user.
- **URL**: The URL of your Zabbix server. Don't include `/zabbix` as part of the URL.

Refer to Zabbix's API documentation for more information about authenticating to the service.

----------------------------------------

# Zammad Credentials

You can use these credentials to authenticate the following node:

- **Zammad**

## Prerequisites

- Create a hosted Zammad account or set up your own Zammad instance.
- For token authentication, enable **API Token Access** in **Settings > System > API**.

## Supported Authentication Methods

- Basic auth
- Token auth: Zammad recommends using this authentication method.

## Using Basic Auth

To configure this credential, you'll need:

- **Base URL**: Enter the URL of your Zammad instance.
- **Email**: Enter the email address you use to log in to Zammad.
- **Password**: Enter your Zammad password.
- **Ignore SSL Issues**: When turned on, n8n will connect even if SSL certificate validation fails.

## Using Token Auth

To configure this credential, you'll need:

- **Base URL**: Enter the URL of your Zammad instance.
- **Access Token**: Enable **API Token Access** for the Zammad instance. Generate an **Access Token** by going to **avatar > Profile > Token Access** and **Create** a new token.
  - The access token permissions depend on what actions you'd like to complete with this credential. For all functionality within the Zammad node, select:
    - `admin.group`
    - `admin.organization`
    - `admin.user`
    - `ticket.agent`
    - `ticket.customer`
- **Ignore SSL Issues**: When turned on, n8n will connect even if SSL certificate validation fails.

----------------------------------------

# Zendesk Credentials

## Supported Nodes
- **Zendesk**: Integrates with Zendesk service.
- **Zendesk Trigger**: Triggers based on Zendesk events.

## Prerequisites
- Create a Zendesk account.
- Enable API token access in Admin Center under **Apps and integrations > APIs > Zendesk APIs** for API token authentication.

## Supported Authentication Methods
- **API Token**
- **OAuth2**

## Using API Token
To configure this credential, you need:
- **Subdomain**: The portion of the URL between `https://` and `.zendesk.com`. Example: For `https://n8n-example.zendesk.com/agent/dashboard`, the subdomain is `n8n-example`.
- **Email**: The email address used to log in to Zendesk.
- **API Token**: Generate in **Apps and integrations > APIs > Zendesk API**. More details at [API token](https://developer.zendesk.com/api-reference/introduction/security-and-auth/#api-token).

## Using OAuth2
To configure this credential, you need:
- **Client ID**: Generated when creating a new OAuth client.
- **Client Secret**: Generated when creating a new OAuth client.
- **Subdomain**: (same as mentioned above).

To create a new OAuth client:
1. Go to **Apps and integrations > APIs > Zendesk API > OAuth Clients**.
2. Use these settings:
   - Copy the **OAuth Redirect URL** from n8n and enter it as a **Redirect URL** in the OAuth client.
   - Copy the **Unique identifier** for the Zendesk client and enter this as your n8n **Client ID**.
   - Copy the **Secret** from Zendesk and enter this as your n8n **Client Secret**.

Refer to [Registering your application with Zendesk](https://support.zendesk.com/hc/en-us/articles/4408845965210-Using-OAuth-authentication-with-your-application#topic_s21_lfs_qk) for more information.

----------------------------------------

# Zep Credentials

You can use these credentials to authenticate the following nodes:

- Zep
- Zep Vector Store

## Supported Authentication Methods

- API key

## Using API Key

To configure this credential, you'll need a Zep server with at least one project and:

- An **API URL**
- An **API Key**

### Zep Cloud Setup

1. In Zep, open the **Project Settings**.
2. In the **Project Keys** section, select **Add Key**.
3. Enter a **Key Name**, like `n8n integration`.
4. Select **Create**.
5. Copy the key and enter it in your n8n integration as the **API Key**.
6. Turn on the **Cloud** toggle.

### Self-hosted Zep Open Source Setup

1. Enter the JWT token for your Zep server as the **API Key** in n8n.
   - If you haven't generated a JWT token for your Zep server before, refer to Zep's [Configuring Authentication](https://docs.getzep.com/deployment/auth/) for instructions.
2. Make sure the **Cloud** toggle is off.
3. Enter the URL for your Zep server as the **API URL**.

----------------------------------------

# Zoom Credentials

You can use these credentials to authenticate the following node:
- Zoom

## Prerequisites

Create a Zoom account. Your account must have one of the following permissions:
- Account owner
- Account admin
- Zoom for developers role

## Supported Authentication Methods
- API JWT token
- OAuth2

**API JWT token deprecation:**  
Zoom removed support for JWT access tokens in June 2023. You must use OAuth2 for all new credentials.

## Using API JWT Token

This authentication method has been fully deprecated by Zoom. Don't create new credentials with it.

To configure this credential, you'll need:
- A **JWT token**: To create a JWT token, create a new JWT app in the Zoom App Marketplace.

## Using OAuth2

To configure this credential, you'll need:
- A **Client ID**: Generated when you create an OAuth app on the Zoom App Marketplace.
- A **Client Secret**: Generated when you create an OAuth app.

To generate your **Client ID** and **Client Secret**, create an OAuth app.

Use these settings for your OAuth app:
- Select **User-managed app** for **Select how the app is managed**.
- Copy the **OAuth Callback URL** from n8n and enter it as an **OAuth Redirect URL** in Zoom.
- If your n8n credential displays a **Whitelist URL**, also enter that URL as an **OAuth Redirect URL**.
- Enter **Scopes** for the scopes you plan to use. For all functionality in the Zoom node, select:
  - `meeting:read`
  - `meeting:write`
- Refer to OAuth scopes for more information on meeting scopes.
- Copy the **Client ID** and **Client Secret** provided in the Zoom app and enter them in your n8n credential.

----------------------------------------

# Zoho Credentials

You can use these credentials to authenticate the following nodes:

- Zoho CRM

## Prerequisites

Create a Zoho account.

## Supported Authentication Methods

- OAuth2

## Using OAuth2

To configure this credential, you'll need:

- An **Access Token URL**: Zoho provides region-specific access token URLs. Select the region that best fits your Zoho data center:
  - **AU**: Australia data center
  - **CN**: Canada data center
  - **EU**: European Union data center
  - **IN**: India data center
  - **US**: United States data center

Refer to [Multi DC](https://www.zoho.com/crm/developer/docs/api/v3/multi-dc.html) for more information about selecting a data center.

**Note for n8n Cloud users:**  
Cloud users don't need to provide connection details. Select **Connect my account** to connect through your browser.

If you need to configure OAuth2 from scratch:
1. Register an application with Zoho.
2. Use these settings for your application:
   - Select **Server-based Applications** as the **Client Type**.
   - Copy the **OAuth Callback URL** from n8n and enter it in the Zoho **Authorized Redirect URIs** field.
   - Copy the **Client ID** and **Client Secret** from the application and enter them in your n8n credential.

----------------------------------------

# Zscaler ZIA Credentials

You can use these credentials to authenticate when using the **HTTP Request node** to make a **Custom API call**.

## Prerequisites

- Create an admin account on a **Zscaler Internet Access (ZIA)** cloud instance.

## Supported Authentication Methods

- Basic auth and API key combo

## Configuration Instructions

To configure this credential, you'll need:

- **Base URL**: Enter the base URL of your Zscaler ZIA cloud name. To get your base URL, log in to the ZIA Admin Portal and go to **Administration > Cloud Service API Security**. The base URL is displayed in both the **Cloud Service API Key** tab and the **OAuth 2.0 Authorization Servers** tab.
- **Username**: Enter your ZIA admin username.
- **Password**: Enter your ZIA admin password.
- **Api Key**: Get an API key by creating one from **Administration > Cloud Service API Security > Cloud Service API Key**.

## Related Resources

Refer to **Zscaler ZIA's documentation** for more information about the service.

----------------------------------------

# Zulip Credentials for n8n

## Supported Nodes
- Zulip

## Prerequisites
- Create a Zulip account.

## Supported Authentication Methods
- API key

## Configuration Instructions
To configure the Zulip credentials, enter the following parameters:
- **URL**: Enter the URL of your Zulip domain.
- **Email**: Enter the email address you use to log in to Zulip.
- **API Key**: Retrieve your API key from the **Gear cog > Personal Settings > Account & privacy > API Key**.

Refer to [API Keys](https://zulip.com/api/api-keys) for more information.

----------------------------------------

# Built-in Integrations

This section contains the node library: reference documentation for every built-in node in n8n, and their credentials.

## Node Operations: Triggers and Actions

- **Triggers**: Start a workflow in response to specific events or conditions. Trigger operations are represented by a bolt icon.
- **Actions**: Represent specific tasks within a workflow to manipulate data, perform operations on external systems, and trigger events in other systems.

## Core Nodes

Core nodes can be actions or triggers. They provide functionality such as logic, scheduling, or generic API calls.

## Cluster Nodes

Cluster nodes are groups of nodes that work together to provide functionality. Use a root node and one or more sub-nodes that extend the functionality.

## Credentials

External services require authentication. Credentials can include API keys, email/password combinations, or private keys. 

- Credentials are stored securely in the database and are encrypted. 
- n8n uses a random personal encryption key, generated on the first run and saved under `~/.n8n/config`.

For more information on managing and sharing credentials, refer to the Manage credentials documentation.

## Community Nodes

n8n supports custom nodes built by the community. Refer to the Community nodes documentation for guidance on installation and usage.

For help in building and publishing custom nodes to npm, refer to the Creating nodes documentation.

----------------------------------------

# Handling API Rate Limits

API rate limits are restrictions on request frequency, including limits on the number of requests per minute or day, and the amount of data sent in one request or received in a response.

## Identify Rate Limit Issues

When an n8n node hits a rate limit, it errors, and the error message displayed includes the service's message. For error 429 (too many requests), it states: **The service is receiving too many requests from you**. Check the service's API documentation for rate limits.

## Handle Rate Limits for Integrations

### Methods

1. **Retry On Fail:** 
   - Automatically retries the request after a pause if it fails.
   - Steps:
     1. Open the node.
     2. Select **Settings**.
     3. Enable the **Retry On Fail** toggle.
     4. Set **Wait Between Tries (ms)** to more than the rate limit (e.g., `1000` ms for 1 request/second).

2. **Loop Over Items and Wait:**
   - Batch input items and introduce pauses.
   - Steps:
     1. Add the Loop Over Items node before the API call node.
     2. Add the Wait node after the API call node and connect it back to the Loop Over Items node.

## Handle Rate Limits in the HTTP Request Node

The HTTP Request node has built-in settings for handling rate limits and large data.

### Batch Requests

1. In the HTTP Request node, select **Add Option** > **Batching**.
2. Set **Items per Batch:** Number of input items per request.
3. Set **Batch Interval (ms):** Introduce a delay between requests (e.g., `1000` ms).

### Paginate Results

APIs paginate results when data exceeds a single response capacity. Refer to [HTTP Request Node | Pagination](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/#pagination) for more information.

----------------------------------------

# Triggers Library

This section provides information about n8n's Triggers.

## Core Concepts

**Trigger Node**: A node in n8n that starts a workflow based on an event or schedule, initiating the processing of data through the workflow.

## Node & Parameter Details

### Trigger Nodes
- **Webhook Trigger**: Initiates a workflow when a specified URL is called.
  - **HTTP Method**: Select the HTTP method (GET, POST, etc.) that the webhook will respond to.
  - **Response Mode**: Choose how the webhook responds (e.g., Wait for Response).

- **Cron Trigger**: Starts a workflow at specified intervals based on cron expressions.
  - **Cron Expression**: Define the schedule using standard cron syntax.

- **Event Trigger**: Responds to events from integrated services (e.g., new message in Slack).
  - **Event Name**: Specify the event that will trigger the workflow.

## Configuration Instructions

1. **Creating a Webhook Trigger**: 
   - Use the Webhook Trigger node and set the endpoint URL.
   - Configure the HTTP Method.
   - Optionally set up response handling.

2. **Setting Up a Cron Trigger**:
   - Add a Cron Trigger node.
   - Input the cron expression to define the trigger frequency.

3. **Defining an Event Trigger**:
   - Select an integrated node for event triggering.
   - Specify the relevant event name.

## Best Practices

- **Security**: Ensure that webhook URLs are kept confidential.
- **Testing**: Test triggers in a controlled environment before deploying to production.
- **Logging**: Implement logging for trigger events to aid debugging.

## Workflow Patterns

1. **Webhook-based Workflows**: 
   - Use the Webhook Trigger to start workflows in response to external events.

2. **Scheduled Workflows**: 
   - Use the Cron Trigger for workflows that need to run at regular intervals, like data synchronization tasks.

3. **Event-driven Workflows**: 
   - Leverage Event Triggers to respond to activities in third-party applications, automating responses to specific occurrences.

----------------------------------------

# ActiveCampaign Trigger Node

## Core Concepts
ActiveCampaign is a cloud software platform for small-to-mid-sized businesses, focusing on customer experience automation, email marketing, marketing automation, sales automation, and CRM.

## Credentials
Authentication for the ActiveCampaign Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/activecampaign/).

## Examples and Templates
For usage examples and templates for the ActiveCampaign Trigger, refer to n8n's [ActiveCampaign Trigger integrations](https://n8n.io/integrations/activecampaign-trigger/) page.

----------------------------------------

# Acuity Scheduling Trigger Node

## Core Concepts
Acuity Scheduling is a cloud-based appointment scheduling software that allows users to manage appointments online, synchronize calendars, and send alerts and reminders for appointment schedules.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/acuityscheduling/).

## Examples and Templates
For usage examples and templates to assist with setup, refer to n8n's [Acuity Scheduling Trigger integrations](https://n8n.io/integrations/acuity-scheduling-trigger/) page.

----------------------------------------

# Affinity Trigger Node

**Credentials**  
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/affinity/).

**Examples and Templates**  
For usage examples and templates, refer to n8n's [Affinity Trigger integrations](https://n8n.io/integrations/affinity-trigger/) page.

----------------------------------------

# Airtable Trigger Node

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/airtable/).

## Events
- **New Airtable event**

## Node Parameters

### Poll Times
Configure the querying frequency:
- Every Minute
- Every Hour
- Every Day
- Every Week
- Every Month
- Every X: Check for updates every given number of minutes or hours.
- Custom: Customize the polling interval by providing a cron expression.

### Base
The Airtable base to check for updates on, specified by either the base's URL or base ID.

### Table
The Airtable table within the base to check for updates on, specified by either the table's URL or table ID.

### Trigger Field
A created or last modified field in your table used to determine what updates occurred since the previous check.

### Download Attachments
Option to download attachments from the table. Define which attachment fields to download using the **Download Fields** parameter.

### Download Fields
When **Download Attachments** is enabled, this field defines which table fields to download, case sensitive, separated by commas.

### Additional Fields
Use the **Add Field** button to add the following parameters:
- **Fields**: A comma-separated list of fields to include in the output.
- **Formula**: An Airtable formula to further filter the results.
- **View ID**: The name or ID of a table view to restrict returned records to the specified view.

----------------------------------------

# AMQP Trigger Node

**Definition**  
AMQP (Advanced Message Queuing Protocol) is an open standard application layer protocol for message-oriented middleware, featuring message orientation, queuing, routing, reliability, and security. This node supports AMQP 1.0 compatible message brokers.

## Credentials  
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/amqp/).

## Examples and Templates  
For usage examples and templates, refer to n8n's [AMQP integrations](https://n8n.io/integrations/amqp-trigger/) page.

----------------------------------------

# Asana Trigger Node

## Credentials
Authentication information for the Asana Trigger node is available in the Asana credentials documentation.

## Overview
Asana is a web and mobile application designed for organizing, tracking, and managing team work.

## Configuration Instructions
- Use the Asana Trigger node to initiate workflows based on Asana events.
- Credentials must be set up to authenticate with the Asana API.

## Best Practices
- Ensure proper authentication and permissions are configured in the credentials section to access Asana data effectively.
- Utilize templates from the n8n integrations page to streamline your implementation of the Asana Trigger.

## References
- [Asana Trigger integrations](https://n8n.io/integrations/asana-trigger/) for usage examples and templates.

----------------------------------------

# Autopilot Trigger Node

## Overview
The Autopilot Trigger node is part of the n8n workflow automation platform that enables automation and personalization of marketing actions throughout the customer journey.

## Credentials
Refer to the authentication information for this node provided in the [Autopilot credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/autopilot/).

## Events
The following events can be used to trigger the Autopilot node:
- Contact added
- Contact added to a list
- Contact entered a segment
- Contact left a segment
- Contact removed from a list
- Contact unsubscribed
- Contact updated

----------------------------------------

# AWS SNS Trigger Node

**Core Concepts:**
AWS SNS (Simple Notification Service) is a notification service from Amazon Web Services that provides cost-effective messaging delivery for mobile users.

**Credentials:**
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/aws/).

**Examples and Templates:**
For usage examples and templates, refer to n8n's [AWS SNS Trigger integrations](https://n8n.io/integrations/aws-sns-trigger/) page.

----------------------------------------

# Bitbucket Trigger Node

The Bitbucket Trigger node allows you to integrate with Bitbucket, a web-based version control hosting service for source code that uses Mercurial or Git revision control systems.

## Credentials
- Authentication information for this node can be found in the [Bitbucket Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/bitbucket/).

## Examples and Templates
- For usage examples and templates, refer to n8n's [Bitbucket Trigger integrations](https://n8n.io/integrations/bitbucket-trigger/) page.

----------------------------------------

## Box Trigger Node

### Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/box/).

### Find Your Box Target ID
To get your Target ID in Box:
1. Open the file/folder that you would like to monitor.
2. Copy the string of characters after `folder/` in your URL. 
   - Example: If the URL is `https://app.box.com/folder/12345`, then `12345` is the target ID.
3. Paste it in the **Target ID** field in n8n.

----------------------------------------

# Brevo Trigger Node Documentation

## Credentials
Authentication information for the Brevo Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/brevo/). 

## Examples and Templates
For usage examples and templates to help you get started, refer to n8n's Brevo Trigger integrations page. 

## Core Concepts
Brevo is a digital marketing platform designed to assist users in growing their business. 

## Parameter Details
- **Node Name:** Brevo Trigger
- **Node Type:** Trigger Node 

## API Documentation
- **Endpoint:** Brevo API access details are found within the integration documentation.
- **Methods:** Typically includes GET, POST depending on use cases.
- **Authentication:** Required through the credentials provided in the platform.

## Workflow Patterns
Integrate the Brevo Trigger node into your n8n workflows to automate tasks triggered by specific events from Brevo.

## Best Practices
- Ensure proper authentication is set for your Brevo integration.
- Utilize provided examples to leverage full capabilities of the Brevo Trigger node.
- Regularly check for updates and changes in the API endpoints to maintain functionality.

----------------------------------------

# Calendly Trigger Node

## Description
Calendly is an automated scheduling software designed to help find meeting times.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/calendly/).

## Configuration Instructions
To set up the Calendly Trigger node, follow the authentication guidelines specified in the linked documentation.

## Examples and Templates
For usage examples and templates, refer to n8n's [Calendly Trigger integrations](https://n8n.io/integrations/calendly-trigger/) page.

----------------------------------------

# Cal Trigger Node

**Core Concepts:**
The Cal Trigger node integrates with [Cal](https://cal.com/), an event scheduling platform.

**Credentials:**
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/cal/).

**Examples and Templates:**
For usage examples and templates, refer to n8n's [Cal Trigger integrations](https://n8n.io/integrations/cal-trigger/) page.

----------------------------------------

## Chargebee Trigger Node

Chargebee is a billing platform for subscription-based SaaS and eCommerce businesses. Chargebee integrates with payment gateways to automate recurring payment collection, invoicing, taxes, accounting, email notifications, SaaS metrics, and customer management.

### Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/chargebee/).

### Add Webhook URL in Chargebee
To add a Webhook URL in Chargebee:

1. Open your Chargebee dashboard.
2. Go to **Settings** > **Configure Chargebee**.
3. Scroll down and select **Webhooks**.
4. Select the **Add Webhook** button.
5. Enter the **Webhook Name** and the **Webhook URL**.
6. Select **Create**.

----------------------------------------

# Webex by Cisco Trigger Node

**Credentials**  
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/ciscowebex/).

**Examples and Templates**  
For usage examples and templates, refer to n8n's Webex by Cisco Trigger integrations page.

**Node Details**  
- **Node Type:** Trigger Node  
- **Integration:** Webex by Cisco  
- **Capabilities:** Initiates workflows based on events in Webex.  

**Best Practices**  
- Ensure proper authentication setup before using the node.
- Check for connection stability when utilizing the Webex API.

**Workflow Patterns**  
- Connect the Webex by Cisco Trigger node to other nodes to process incoming messages or events as defined by your workflow logic.

----------------------------------------

# ClickUp Trigger Node

## Core Concepts

The ClickUp Trigger node integrates with ClickUp, a cloud-based collaboration and project management tool.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/clickup/).

## Configuration Instructions

To use the ClickUp Trigger node, you will need to set up credentials in n8n for the ClickUp integration.

## Examples and Templates

Usage examples and templates for the ClickUp Trigger can be found on n8n's [ClickUp Trigger integrations](https://n8n.io/integrations/clickup-trigger/) page.

----------------------------------------

# ConvertKit Trigger Node

## Core Concepts
ConvertKit is an email marketing platform used for building email lists, sending broadcasts, automating sequences, creating segments, and building landing pages.

## Credentials
Authentication information for the ConvertKit Trigger node is available [here](https://docs.n8n.io/integrations/builtin/credentials/convertkit/).

## Examples and Templates
For usage examples and templates to help you get started, refer to n8n's [ConvertKit Trigger integrations](https://n8n.io/integrations/convertkit-trigger/) page.

----------------------------------------

# Clockify Trigger Node

## Overview
The Clockify Trigger node is used in n8n to track work hours across projects using the Clockify time tracker.

## Credentials
For authentication information for this node, refer to the [Clockify credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/clockify/).

## Configuration Instructions
- This node uses the workflow timezone setting to specify the range of time entries' starting time.
- To retrieve the correct time entries, configure the timezone in your [Workflow Settings](https://docs.n8n.io/workflows/settings/).

## Best Practices
Ensure that the correct timezone is set up in your workflow settings to accurately track time entries with the Clockify Trigger node.

----------------------------------------

# Copper Trigger Node

## Description
The Copper Trigger node is designed for integration with the Copper CRM, which focuses on deep integration with Google Workspace.

## Credentials
Authentication information for the Copper Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/copper/).

## Examples and Templates
Usage examples and templates can be accessed on n8n’s [Copper Trigger integrations](https://n8n.io/integrations/copper-trigger/) page.

----------------------------------------

# crowd.dev Trigger Node

The crowd.dev Trigger node allows integration with crowd.dev by responding to events. Supported events include:

## Events
- **New Activity**
- **New Member**

## Credentials
For authentication regarding this node, refer to the crowd.dev credentials documentation.

## Examples and Templates
For usage examples and templates, consult the crowd.dev Trigger integrations section on n8n's website.

## Related Resources
- An app node for crowd.dev is available; consult the documentation for more information.

----------------------------------------

# Customer.io Trigger Node

## Description
The Customer.io Trigger node allows users to send targeted newsletters, push notifications, and SMS to selected segments of customers based on their website data.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/customerio/).

## Usage Examples
Refer to n8n's [Customer.io Trigger integrations](https://n8n.io/integrations/customerio-trigger/) page for usage examples and templates.

## Parameters
- **Webhook URL**: The endpoint to receive payload information from Customer.io.
  
### Sample Usage
```json
{
  "event": {
    "name": "User Signed Up",
    "data": {
      "user_id": "12345",
      "email": "user@example.com"
    }
  }
}
```

----------------------------------------

# Emelia Trigger Node

## Core Concepts
Emelia is a cold-mailing tool designed for triggering events related to email communications.

## Events
The following events can trigger the Emelia node:
- Email Bounced
- Email Opened
- Email Replied
- Email Sent
- Link Clicked
- Unsubscribed Contact

## Credentials
Authentication information for the Emelia Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/emelia/).

----------------------------------------

# Eventbrite Trigger Node

## Credentials
Authentication information for the Eventbrite Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/eventbrite/).

## Examples and Templates
For usage examples and templates, refer to n8n's [Eventbrite Trigger integrations](https://n8n.io/integrations/eventbrite-trigger/).

----------------------------------------

# Facebook Lead Ads Trigger Node

The Facebook Lead Ads Trigger node responds to events in Facebook Lead Ads and integrates these with other applications. It is designed to handle new leads generated through Facebook Lead Ads.

## Events

- **New Lead**: Triggers when a new lead is created.

## Credentials

Authentication information for this node can be found in the Facebook Lead Ads credentials documentation.

## Common Issues

### Workflow only works in testing or production

Facebook Lead Ads allows only one webhook per app. Switching between testing and production URLs overwrites the registered webhook URL. To avoid issues:

1. Disable the workflow on the production URL during testing.
2. Go to your workflow page.
3. Toggle the **Active** switch to disable the workflow.
4. Test using the test webhook URL.
5. Toggle the **Inactive** toggle to re-enable the workflow when testing is complete. 

This procedure halts production traffic temporarily, ensuring the workflow receives notifications from the correct webhook URL.

----------------------------------------

# Facebook Trigger Node

Use the Facebook Trigger node to trigger a workflow when events occur in Facebook.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/facebookapp/).

## Objects

- **Ad Account**: Get updates for certain ads changes.
- **Application**: Get updates sent to the application.
- **Certificate Transparency**: Get updates when new security certificates are generated for your subscribed domains, including new certificates and potential phishing attempts.
- **Group**: Activity and events in a group.
- **Instagram**: Get updates when someone comments on Media objects of your app users; @mentions your app users; or when Stories of your app users expire.
- **Link**: Get updates about the links for rich previews by an external provider.
- **Page**: Updates related to Facebook pages.
- **Permissions**: Updates when granting or revoking permissions.
- **User**: Profile updates for users.
- **WhatsApp Business Account**: Relevant updates for WhatsApp Business Accounts.
- **Workplace Security**: Updates related to security in the workplace.

For each **Object**, use the **Field Names or IDs** dropdown to select more details on the data to receive. Refer to the linked pages for more information.

## Recommendations

n8n recommends using the [WhatsApp Trigger node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger/) with the [WhatsApp credentials](https://docs.n8n.io/integrations/builtin/credentials/whatsapp/) instead of the Facebook Trigger node for these events, as the WhatsApp Trigger node has more events to listen to.

## Related Resources

Refer to Meta's [Graph API documentation](https://developers.facebook.com/docs/graph-api/webhooks/reference) for details about their API.

----------------------------------------

# Figma Trigger (Beta) Node Documentation

## Core Concepts

Figma is a web-based prototyping tool with offline capabilities. The Figma Trigger node allows n8n workflows to respond to specific events in Figma. Only the "Professional" plan supports webhooks, and the "Starter" plan is not compatible.

## Credentials

Authentication information for the Figma Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/figma/).

## Events

- **File Commented**: Triggers when someone comments on a file.
- **File Deleted**: Triggers when an individual file is deleted.
- **File Updated**: Triggers when a file is saved or deleted, considering a save occurs if the file is closed within 30 seconds after changes.
- **File Version Updated**: Triggers when a named version is created in the version history.
- **Library Publish**: Triggers when a library file is published.

----------------------------------------

# Flow Trigger Node

## Description
The Flow Trigger node is an integration for the Flow task and project management software, which combines tasks, projects, timelines, and conversations.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/flow/).

## Examples and Templates
Refer to n8n's [Flow Trigger integrations](https://n8n.io/integrations/flow-trigger/) page for usage examples and templates.

----------------------------------------

# Form.io Trigger Node

## Core Concepts
**Form.io**: An enterprise-class combined form and API data management platform for building complex form-based business process applications.

## Credentials
Authentication information for the Form.io Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/formiotrigger/).

## Workflow Patterns
To help you get started with the Form.io Trigger node, refer to usage examples and templates on n8n's Form.io Trigger integrations page. 

## Best Practices
- Familiarize yourself with the authentication method and ensure proper connection to the Form.io platform.
- Use the provided examples and templates to effectively implement the Form.io Trigger in your workflows.

----------------------------------------

# Formstack Trigger Node

## Credentials
Authentication information for this node can be found in the [Formstack Trigger credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/formstacktrigger/).

## Examples and Templates
For usage examples and templates, refer to n8n's [Formstack Trigger integrations](https://n8n.io/integrations/formstack-trigger/) page.

----------------------------------------

# GetResponse Trigger Node

## Events
- Receive notifications when a customer is subscribed to a list.
- Receive notifications when a customer is unsubscribed from a list.
- Receive notifications when an email is opened.
- Receive notifications when an email is clicked.
- Receive notifications when a survey is submitted.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/getresponse/). 

## Examples and Templates
For usage examples and templates, refer to n8n's [GetResponse Trigger integrations](https://n8n.io/integrations/getresponse-trigger/) page.

----------------------------------------

# GitHub Trigger Node

## Core Concepts
GitHub provides hosting for software development and version control using Git. It offers distributed version control and source code management (SCM) functionality, access control, and collaboration features such as bug tracking, feature requests, task management, and wikis.

## Credentials
Authentication information for the GitHub Trigger Node can be found in the [GitHub credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/github/).

## Example and Templates
For usage examples and templates related to the GitHub Trigger, refer to the [GitHub Trigger integrations](https://n8n.io/integrations/github-trigger/) page.

----------------------------------------

# GitLab Trigger Node

## Core Concepts
GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager, wiki, issue-tracking, and CI/CD pipeline features.

## Credentials
Refer to the authentication information for this node [here](https://docs.n8n.io/integrations/builtin/credentials/gitlab/).

## Configuration Instructions
- **Node Name:** GitLab Trigger
- **Node Description:** Triggers workflows based on events in your GitLab repositories.

## Examples and Templates
For usage examples and templates to help you get started, refer to n8n's [GitLab Trigger integrations](https://n8n.io/integrations/gitlab-trigger/) page.

----------------------------------------

# Gmail Trigger Node Documentation

The Gmail Trigger node starts a workflow based on events in Gmail.

## Events

- **Message Received**: Triggers for new messages at the selected **Poll Time**.

## Node Parameters

Configure the node with the following parameters:

- **Credential to connect with**: Select or create a Google credential for the trigger. More information on setting up a new credential can be found in the [Google credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/google/).
- **Poll Times**: 
  - Select a poll **Mode** to determine the frequency of the poll. The **Mode** selection will adjust relevant fields. Refer to [Poll Mode options](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger/poll-mode-options/) for configuration.
- **Simplify**: 
  - Choose whether to return a simplified version of the response (default: on) or the raw data (off). The simplified version returns email message IDs, labels, and headers: From, To, CC, BCC, and Subject.

## Node Filters

Use these filters to refine the node's behavior:

- **Include Spam and Trash**: 
  - Select whether to include new messages from Spam and Trash folders (on or off).
- **Label Names or IDs**: 
  - Trigger only on messages with selected labels. Choose from the dropdown populated based on the selected **Credential**.
- **Search**: 
  - Enter Gmail search filters (e.g., `from:`) to limit the triggered conditions. More details can be found in the [Refine searches in Gmail documentation](https://support.google.com/mail/answer/7190?hl=en).
- **Read Status**: 
  - Choose to receive **Unread and read emails**, **Unread emails only** (default), or **Read emails only**.
- **Sender**: 
  - Enter an email address or part of a sender's name to trigger only on messages from that sender.

## Related Resources

- For additional details, refer to [Google's Gmail API documentation](https://developers.google.com/gmail/api/guides).

----------------------------------------

# Google Business Profile Trigger Node

The Google Business Profile Trigger node allows integration with Google Business Profile. It can respond to events like new reviews.

## Credentials

Authentication information can be found [here](https://docs.n8n.io/integrations/builtin/credentials/google/).

## Events

- **Review Added**: Triggered when a new review is added to the Google Business Profile.

## Related Resources

- Node documentation for Google Business Profile can be found [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlebusinessprofile/).
- Refer to [Google Business Profile's API documentation](https://developers.google.com/my-business/reference/rest) for detailed API information.

----------------------------------------

# Google Calendar Trigger Node

## Credentials
Authentication information for the Google Calendar Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/google/).

## Events
The following events can be triggered by this node:
- **Event Cancelled**
- **Event Created**
- **Event Ended**
- **Event Started**
- **Event Updated**

## Related Resources
n8n provides an app node for Google Calendar. Documentation for this node is available [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecalendar/).

Refer to [Google Calendar's documentation](https://developers.google.com/calendar/api/v3/reference) for details about their API.

----------------------------------------

# Google Drive Trigger Node

## Overview
Google Drive is a file storage and synchronization service developed by Google, enabling users to store and share files.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/google/).

## Manual Executions vs. Activation
- On manual executions, this node will return the last event matching its search criteria.
- If no event matches the criteria, an error is thrown.
- Once saved and activated, the node will regularly check for any matching events and will trigger your workflow for each event found.

----------------------------------------

# Google Sheets Trigger Node

## Overview
The Google Sheets Trigger node allows you to monitor events happening in your Google Sheets.

## Authentication
You can find authentication information for this node [here](https://docs.n8n.io/integrations/builtin/credentials/google/).

## Events
The node can trigger on the following events:
- Row added
- Row updated
- Row added or updated

## Related Resources
Refer to the [Google Sheets API documentation](https://developers.google.com/sheets/api) for more information about the service.

## Example Workflows
For example workflows and related content, refer to the n8n Google Sheets Trigger integrations page.

## Common Issues
For common questions or issues and suggested solutions, refer to the Common Issues section.

----------------------------------------

# Gumroad Trigger Node

## Description
The Gumroad Trigger node allows users to automate workflows triggered by actions on the Gumroad platform, which enables creators to sell products directly to consumers.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/gumroad/).

## Examples and Templates
For usage examples and templates to help you get started, refer to n8n's [Gumroad Trigger integrations](https://n8n.io/integrations/gumroad-trigger/) page.

----------------------------------------

# Help Scout Trigger Node

Help Scout is a help desk software that provides an email-based customer support platform.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/helpscout/).

## Workflow

### Node Name
- **Help Scout Trigger**

### Description
- Used to initiate workflows based on events from Help Scout.

## Example Usage
Refer to n8n's [Help Scout Trigger integrations](https://n8n.io/integrations/helpscout-trigger/) page for usage examples and templates.

----------------------------------------

## HubSpot Trigger Node

The HubSpot Trigger node enables workflows in n8n to react to events occurring in HubSpot.

### Webhooks
- Activating a second trigger stops the previous trigger, as it registers a new webhook with HubSpot. HubSpot only allows one webhook at a time.

### Credentials
- Authentication information for this node can be found in the HubSpot credentials documentation.

### Events
The HubSpot Trigger node supports the following events:
- **Company**
  - Created
  - Deleted
  - Property changed
- **Contact**
  - Created
  - Deleted
  - Privacy deleted
  - Property changed
- **Conversation**
  - Created
  - Deleted
  - New message
  - Privacy deletion
  - Property changed
- **Deal**
  - Created
  - Deleted
  - Property changed
- **Ticket**
  - Created
  - Deleted
  - Property changed

### Related Resources
- n8n provides an app node for HubSpot; refer to the HubSpot app node documentation.
- For further references, consult HubSpot's API documentation.

----------------------------------------

# Invoice Ninja Trigger Node

The Invoice Ninja Trigger node allows users to integrate n8n with Invoice Ninja, a free open-source online invoicing application.

## Credentials

Authentication information for this node can be found in the [Invoice Ninja credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/invoiceninja/).

## Example Usage

Refer to n8n's [Invoice Ninja Trigger integrations](https://n8n.io/integrations/invoice-ninja-trigger/) page for usage examples and templates to help you get started.

----------------------------------------

# Jira Trigger Node

## Core Concepts
Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management.

## Node & Parameter Details
**Node Name**: Jira Trigger  
**Operation**: Triggers based on specified events in Jira.

## Credentials
Authentication information for this node can be found in the Jira credentials documentation.

## Best Practices
Refer to n8n's Jira trigger integrations for usage examples and templates to get started.

----------------------------------------

# JotForm Trigger Node

## Core Concepts
The JotForm Trigger Node facilitates integration with JotForm, an online form building service that offers a drag-and-drop creation tool and an option to encrypt user data.

## Credentials
Authentication information for this node is available at the JotForm credentials documentation.

## Node Details
- **Node Name:** JotForm Trigger
- **Purpose:** Triggers workflows based on form submissions from JotForm.

## Configuration Instructions
1. Set up your JotForm Trigger node.
2. Use the authentication credentials found in the credentials documentation.

## Best Practices
- Refer to available usage examples and templates for guidance on configuring the JotForm Trigger node effectively.
  
## API Documentation
Refer to the JotForm API documentation for detailed information regarding endpoints and methods related to form submissions.

----------------------------------------

# Kafka Trigger Node

Kafka is an open-source distributed event streaming platform for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.

## Credentials

Authentication information for the Kafka Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/kafka/).

## Examples and Templates

Usage examples and templates for the Kafka Trigger can be found on n8n's [Kafka Trigger integrations](https://n8n.io/integrations/kafka-trigger/) page.

----------------------------------------

# Keap Trigger node

Keap is an e-mail marketing and sales platform for small businesses, including products to manage and optimize the customer lifecycle, customer relationship management, marketing automation, lead capture, and e-commerce.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/keap/).

## Examples and Templates

For usage examples and templates to help you get started, refer to n8n's [Keap Trigger integrations](https://n8n.io/integrations/keap-trigger/) page.

----------------------------------------

# KoboToolbox Trigger Node

The KoboToolbox Trigger node initiates a workflow upon new submissions of a specified form. This node manages the creation and deletion of the webhook automatically, requiring no additional setup within KoboToolbox.

## Credentials

Authentication information for the KoboToolbox Trigger node can be found in the [KoboToolbox Credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/kobotoolbox/).

## Connection to KoboToolbox

The KoboToolbox Trigger node operates similarly to the "Get Submission" operation in the KoboToolbox node and supports the same reformatting options.

## Related Resources

For usage examples and templates, refer to the [KoboToolbox Trigger integrations page](https://n8n.io/integrations/kobotoolbox-trigger/).

----------------------------------------

# Lemlist Trigger Node

## Credentials
Authentication information for this node can be found in the [Lemlist credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/lemlist/).

## Events
The following events can be triggered by the Lemlist Trigger Node:
- *
- Aircall Created
- Aircall Done
- Aircall Ended
- Aircall Interested
- Aircall Not Interested
- Api Done
- Api Failed
- Api Interested
- Api Not Interested
- Attracted
- Connection Issue
- Contacted
- Custom Domain Errors
- Emails Bounced
- Emails Clicked
- Emails Failed
- Emails Interested
- Emails Not Interested
- Emails Opened
- Emails Replied
- Emails Send Failed
- Emails Sent
- Emails Unsubscribed
- Hooked
- Interested
- Lemwarm Paused
- LinkedIn Interested
- LinkedIn Invite Accepted
- LinkedIn Invite Done
- LinkedIn Invite Failed
- LinkedIn Not Interested
- LinkedIn Replied
- LinkedIn Send Failed
- LinkedIn Sent
- LinkedIn Visit Done
- LinkedIn Visit Failed
- LinkedIn Voice Note Done
- LinkedIn Voice Note Failed
- Manual Interested
- Manual Not Interested
- Not Interested
- Opportunities Done
- Paused
- Resumed
- Send Limit Reached
- Skipped
- Warmed

----------------------------------------

# Linear Trigger Node

Linear is a SaaS issue tracking tool.

## Credentials

Authentication information for the Linear Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/linear/).

## Events

The following events can be triggered:

- Comment Reaction
- Cycle
- Issue
- Issue Comment
- Issue Label
- Project

----------------------------------------

## LoneScale Trigger Node

Use the LoneScale Trigger node to respond to workflow events in LoneScale and integrate LoneScale with other applications.

### Credential Information

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/lonescale/).

### Events

- **On new LoneScale event**: Triggers the workflow when a new event occurs in LoneScale.

### Related Resources

n8n provides an app node for LoneScale. Documentation for the node can be found [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.lonescale/).

### Best Practices

Refer to n8n's LoneScale Trigger integrations page for usage examples and templates to help you get started.

----------------------------------------

# Mailchimp Trigger Node

## Credentials
Authentication information for the Mailchimp Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/mailchimp/).

## Examples and Templates
For usage examples and templates, refer to n8n's [Mailchimp Trigger integrations](https://n8n.io/integrations/mailchimp-trigger/) page.

----------------------------------------

## MailerLite Trigger Node

The MailerLite Trigger node can respond to the following events:

- Campaign Sent
- Subscriber Added to Group
- Subscriber Automation Completed
- Subscriber Automation Triggered
- Subscriber Bounced
- Subscriber Created
- Subscriber Complained
- Subscriber Removed from Group
- Subscriber Unsubscribe
- Subscriber Updated

### Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/mailerlite/).

----------------------------------------

# Mailjet Trigger Node

**Mailjet** is a cloud-based email sending and tracking system that allows users to send marketing and transactional emails.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/mailjet/).

## Examples and Templates
For usage examples and templates, refer to n8n's [Mailjet Trigger integrations](https://n8n.io/integrations/mailjet-trigger/) page.

----------------------------------------

# Mautic Trigger Node

## Core Concepts
Mautic is an open-source marketing automation software for automating repetitive marketing tasks, including lead generation, contact scoring, contact segmentation, and marketing campaigns.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/mautic/).

## Configuration Instructions
- **Node Documentation:** n8n provides an app node for Mautic. You can find the node docs [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.mautic/).

## Examples
For usage examples and templates, refer to n8n's Mautic Trigger integrations page [here](https://n8n.io/integrations/mautic-trigger/).

----------------------------------------

# Microsoft OneDrive Trigger Node

Use the Microsoft OneDrive Trigger node to respond to events in Microsoft OneDrive and integrate Microsoft OneDrive with other applications. n8n has built-in support for file and folder events in OneDrive.

## Events
- On File Created
- On File Updated
- On Folder Created
- On Folder Updated

## Credentials
Authentication information for this node can be found in the Microsoft credentials documentation.

## Related Resources
- n8n provides an app node for Microsoft OneDrive.
- Refer to [Microsoft's OneDrive API documentation](https://learn.microsoft.com/en-us/onedrive/developer/rest-api/) for more information about the service.

----------------------------------------

# Microsoft Outlook Trigger Node

The Microsoft Outlook Trigger node allows users to respond to events in Microsoft Outlook and integrate it with other applications.

## Events

- **Message Received**: Triggers when a new message is received.

## Credentials

Authentication for this node can be configured by following the information provided in the [Microsoft Credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/microsoft/).

## Related Resources

For additional documentation on the Microsoft Outlook app node, refer to the [Microsoft Outlook App Node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftoutlook/).

----------------------------------------

# Microsoft Teams Trigger Node

## Overview
The Microsoft Teams Trigger node responds to events in Microsoft Teams and integrates it with other applications.

## Events
- **New Channel**
- **New Channel Message**
- **New Chat**
- **New Chat Message**
- **New Team Member**

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/microsoft/).

## Related Resources
- n8n provides an app node for Microsoft Teams. Documentation can be found [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftteams/).
- Refer to the [Microsoft Teams documentation](https://learn.microsoft.com/en-us/graph/api/resources/teams-api-overview?view=graph-rest-1.0) for details about their API.

----------------------------------------

# MQTT Trigger Node

**Core Concept:**  
MQTT (Message Queuing Telemetry Transport) is an open OASIS and ISO standard lightweight, publish-subscribe network protocol that transports messages between devices.

### Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/mqtt/).

### Examples and Templates
For usage examples and templates, refer to n8n's [MQTT Trigger integrations](https://n8n.io/integrations/mqtt-trigger/).

----------------------------------------

# Notion Trigger Node

## Credentials
Authentication information for the Notion Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/notion/).

## Events
- Page added to database
- Page updated in database

## Related Resources
n8n provides an app node for Notion. Documentation for the node can be found [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.notion/).

Refer to [Notion's documentation](https://developers.notion.com/) for details about their API.

----------------------------------------

## Netlify Trigger Node

### Overview
The Netlify Trigger node allows you to integrate with Netlify for hosting and serverless backend services for web applications and static websites.

### Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/netlify/).

### Related Resources
For related resources, refer to the n8n app node for Netlify documented [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.netlify/).

### API Documentation
- **Endpoint**: Webhook URL provided by Netlify.
- **Method**: POST.
- **Request Format**: JSON.
- **Response Format**: JSON.

### Examples and Templates
Refer to n8n's [Netlify Trigger integrations](https://n8n.io/integrations/netlify-trigger/) for usage examples and templates to get started.

----------------------------------------

# Onfleet Trigger Node

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/onfleet/).

## Events

Trigger a workflow on the following events:

- SMS recipient opt out
- SMS recipient response missed
- Task arrival
- Task assigned
- Task cloned
- Task completed
- Task created
- Task delayed
- Task ETA
- Task failed
- Task started
- Task unassigned
- Task updated
- Worker created
- Worker deleted
- Worker duty

----------------------------------------

# PayPal Trigger Node

## Description
The PayPal Trigger node is an integration in n8n that supports online fund transfers through PayPal.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/paypal/).

## Examples and Templates
For usage examples and templates, refer to n8n's [PayPal Trigger integrations](https://n8n.io/integrations/paypal-trigger/) page.

----------------------------------------

# Pipedrive Trigger Node

## Credentials
- Authentication information for the Pipedrive Trigger node can be found in the [Pipedrive Credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/pipedrive/).

## Examples and Templates
- For usage examples and templates for the Pipedrive Trigger, refer to the [Pipedrive Trigger integrations](https://n8n.io/integrations/pipedrive-trigger/) page.

----------------------------------------

# Postgres Trigger Node

The Postgres Trigger node is used to respond to events in Postgres and integrate Postgres with other applications. It supports responding to insert, update, and delete events.

## Credentials

Authentication information for this node can be found in the Postgres credentials documentation.

## Events

You can configure how the node listens for events:

- **Listen and Create Trigger Rule**: Choose the events to listen for:
  - Insert
  - Update
  - Delete
- **Listen to Channel**: Enter a channel name that the node should monitor.

----------------------------------------

# Postmark Trigger Node

## Core Concepts
Postmark helps deliver and track application emails, providing statistics such as the number of emails sent, processed, opened, bounced, and spam complaints.

## Credentials
Authentication information for the Postmark Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/postmark/).

## Examples and Templates
For usage examples and templates for the Postmark Trigger integration, refer to n8n's [Postmark Trigger integrations](https://n8n.io/integrations/postmark-trigger/) page.

----------------------------------------

# Pushcut Trigger Node Documentation

## Overview
The Pushcut Trigger node integrates with the Pushcut app, allowing for smart notifications to trigger automation workflows.

## Credentials
Authentication is required for this node. Refer to the [Pushcut Credentials](https://docs.n8n.io/integrations/builtin/credentials/pushcut/) documentation for details.

## Configuration Instructions
To configure the Pushcut Trigger node, follow these steps:

1. In your Pushcut app, select a notification from the **Notifications** screen.
2. Select the **Add Action** button.
3. Enter an action name in the **Label** field.
4. Select the **Server** tab.
5. Select the **Integration** tab.
6. Select **Integration Trigger**.
7. In n8n, enter a name for the action and select **Execute step**.
8. Select this action under the **Select Integration Trigger** screen in your Pushcut app.
9. Select **Done** in the top right to save the action.

----------------------------------------

# RabbitMQ Trigger Node

RabbitMQ is an open-source message broker that accepts and forwards messages.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/rabbitmq/).

## Example Usage

For usage examples and templates, refer to n8n's RabbitMQ Trigger integrations page.

## Related Resources

n8n provides an app node for RabbitMQ. Documentation for the RabbitMQ app node can be found [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.rabbitmq/).

----------------------------------------

# Redis Trigger Node

Redis is an open-source, in-memory data structure store, used as a database, cache, and message broker.

## Overview

Use the Redis Trigger node to subscribe to a Redis channel. The workflow starts whenever the channel receives a new message.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/redis/).

## Examples and Templates

For usage examples and templates, refer to n8n's [Redis Trigger integrations](https://n8n.io/integrations/redis-trigger/).

----------------------------------------

# Salesforce Trigger Node

The Salesforce Trigger node allows responding to events in Salesforce and integrating Salesforce with other applications. It supports a range of Salesforce events.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/salesforce/).

## Events

The Salesforce Trigger node can respond to the following events:
- On Account Created
- On Account Updated
- On Attachment Created
- On Attachment Updated
- On Case Created
- On Case Updated
- On Contact Created
- On Contact Updated
- On Custom Object Created
- On Custom Object Updated
- On Lead Created
- On Lead Updated
- On Opportunity Created
- On Opportunity Updated
- On Task Created
- On Task Updated
- On User Created
- On User Updated

## Related Resources

An app node for Salesforce is available. Documentation for the node can be found [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.salesforce/).

----------------------------------------

# SeaTable Trigger Node Documentation

## Overview
SeaTable is a collaborative database application with a spreadsheet interface.

## Credentials
Authentication information for the SeaTable Trigger node can be found in the [SeaTable credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/seatable/).

## Examples and Templates
For usage examples and templates, refer to n8n's [SeaTable Trigger integrations page](https://n8n.io/integrations/seatable-trigger/).

----------------------------------------

# Shopify Trigger Node

## Description
The Shopify Trigger node allows n8n workflows to respond to events from the Shopify e-commerce platform.

## Credentials
For authentication information for this node, refer to the [Shopify Credentials](https://docs.n8n.io/integrations/builtin/credentials/shopify/). 

## Example Workflow
Refer to n8n's [Shopify Trigger integrations](https://n8n.io/integrations/shopify-trigger/) page for usage examples and templates to get started.

## Parameters
- **Resource**: The Shopify resource to listen for (e.g., products, orders).
- **Operation**: The specific event that triggers the node (e.g., new order, updated product).

## Best Practices
- Ensure proper configuration of authentication credentials.
- Test the node with various events to validate workflow responses.

----------------------------------------

# Slack Trigger Node

Use the Slack Trigger node to respond to events in Slack and integrate Slack with other applications. This node supports a wide range of Slack events.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/slack/).

## Events

- **Any Event**: Triggers on any event in Slack.
- **Bot / App Mention**: Triggers when your bot or app is mentioned in a channel.
- **File Made Public**: Triggers when a file is made public.
- **File Shared**: Triggers when a file is shared in a channel.
- **New Message Posted to Channel**: Triggers when a new message is posted.
- **New Public Channel Created**: Triggers when a new public channel is created.
- **New User**: Triggers when a new user is added to Slack.
- **Reaction Added**: Triggers when a reaction is added to a message.

## Parameters

- **Watch Whole Workspace**: Whether the node should watch for the selected events in all channels in the workspace (on) or not (off, default). Note: This will use one execution for every event in any channel your bot is in.
- **Channel to Watch**: Select the specific channel to watch for selected events. Options:
  - **From list**: Look up a list of channels.
  - **By ID**: Enter the channel ID.
  - **By URL**: Enter the channel URL as `https://app.slack.com/client/<channel-address>`.
- **Download Files**: Whether to download files for output (on) or not (off, default). Use with **File Made Public** and **File Shared** events.

## Options

- **Resolve IDs**: Whether to resolve IDs to names and return them (on) or not (off, default).
- **Usernames or IDs to ignore**: Select usernames or enter a comma-separated string of user IDs to ignore events.

## Required Scopes

To use this node, create a Slack application and enable event subscriptions. Ensure the following scopes are added for this trigger node:

- **conversations.list**
- **users.list**

Refer to the [Scopes documentation](https://docs.n8n.io/integrations/builtin/credentials/slack/#scopes) for a complete list.

## Common Issues

### Workflow Only Works in Testing or Production

Slack allows registering a single webhook per app. To test without affecting production:

1. Go to your workflow page.
2. Disable the workflow temporarily.
3. Use the testing webhook URL in the configuration.
4. Test the workflow.
5. Switch back to the production webhook URL and re-enable the workflow.

### Token Expired

If your Slack app uses token rotation, it may cause failures after token expiry. Disable token rotation in your Slack app or create a new app without token rotation.

Refer to the [Slack API Documentation on Token Rotation](https://api.slack.com/authentication/rotation).

----------------------------------------

# Strava Trigger Node

The Strava Trigger node allows you to interact with Strava's exercise tracking service, which includes social networking features.

## Authentication

You can find authentication information for this node [here](https://docs.n8n.io/integrations/builtin/credentials/strava/).

## Events

The Strava Trigger node supports the following events:

- **All**
  - Created
  - Deleted
  - Updated
- **Activity**
  - Created
  - Deleted
  - Updated
- **Athlete**
  - Created
  - Deleted
  - Updated

----------------------------------------

# SurveyMonkey Trigger Node

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/surveymonkey/).

## Example Usage
For usage examples and templates, refer to n8n's [SurveyMonkey Trigger integrations](https://n8n.io/integrations/surveymonkey-trigger/) page.

----------------------------------------

# Taiga Trigger Node Documentation

## Core Concepts

**Taiga**: An open-source project management platform designed for startups, agile developers, and designers.

## Credentials

Authentication information for this node is available [here](https://docs.n8n.io/integrations/builtin/credentials/taiga/).

## Best Practices

Refer to n8n's [Taiga Trigger integrations](https://n8n.io/integrations/taiga-trigger/) page for usage examples and templates to help you get started.

----------------------------------------

# Stripe Trigger Node Documentation

## Core Concepts
The Stripe Trigger Node is part of n8n and provides a way to trigger workflows based on events from the Stripe API.

## Credentials
Authentication information for the Stripe Trigger Node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/stripe/).

## Examples and Templates
Usage examples and templates for the Stripe Trigger integrations are available on n8n's [Stripe Trigger integrations](https://n8n.io/integrations/stripe-trigger/) page.

----------------------------------------

# Telegram Trigger Node

## Overview
The Telegram Trigger node is used to respond to a variety of events from the Telegram messaging platform. It allows users to handle incoming messages, callback queries, and other interactions with a Telegram bot.

## Events
- **`*`**: All updates except "Chat Member", "Message Reaction", and "Message Reaction Count".
- **Business Connection**: Trigger on bot connection/disconnection from a business account or edited connection.
- **Business Message**: Trigger on new messages from a connected business account.
- **Callback Query**: Trigger on new incoming callback query.
- **Channel Post**: Trigger on new channel posts (text, photo, sticker, etc.).
- **Chat Boost**: Trigger when a chat boost is added or changed.
- **Chat Join Request**: Trigger on join requests to the chat.
- **Chat Member**: Trigger on updates to a member's status in the chat.
- **Chosen Inline Result**: Trigger when the result of an inline query is selected by a user.
- **Deleted Business Messages**: Trigger on deleted messages from a business account.
- **Edited Business Message**: Trigger on edited messages from a business account.
- **Edited Channel Post**: Trigger on edited channel posts.
- **Edited Message**: Trigger on edited messages.
- **Inline Query**: Trigger on new incoming inline queries.
- **Message**: Trigger on new incoming messages (text, photo, sticker, etc.).
- **Message Reaction**: Trigger when a user changes a reaction to a message.
- **Message Reaction Count**: Trigger when reactions to a message with anonymous reactions change.
- **My Chat Member**: Trigger when the bot's chat member status is updated.
- **Poll**: Trigger on new poll states.
- **Poll Answer**: Trigger when a user changes their answer in a non-anonymous poll.
- **Pre-Checkout Query**: Trigger on new incoming pre-checkout queries.
- **Purchased Paid Media**: Trigger when a user purchases paid media.
- **Removed Chat Boost**: Trigger when a boost is removed from a chat.
- **Shipping Query**: Trigger on incoming shipping queries.

Some events may require additional permissions.

## Options
- **Download Images/Files**: Option to download attached images or files.
  - **Image Size**: Configure the size of images to be downloaded. Defaults to large images.
- **Restrict to Chat IDs**: Only trigger for events with specified chat IDs (comma-separated).
- **Restrict to User IDs**: Only trigger for events with specified user IDs (comma-separated).

## Related Resources
- For authentication information, refer to the [Telegram Credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/telegram/).
- For example workflows and related content, view the [Telegram Trigger integrations](https://n8n.io/integrations/telegram-trigger/) page.
- Refer to [Telegram's API documentation](https://core.telegram.org/bots/api) for detailed information on the API.

----------------------------------------

# TheHive 5 Trigger Node

Use the TheHive 5 Trigger node to respond to events in TheHive and integrate TheHive with other applications. n8n supports a wide range of TheHive events, including alerts, cases, comments, pages, and tasks.

## Events

- **Alert**
  - Created
  - Deleted
  - Updated
- **Case**
  - Created
  - Deleted
  - Updated
- **Comment**
  - Created
  - Deleted
  - Updated
- **Observable**
  - Created
  - Deleted
  - Updated
- **Page**
  - Created
  - Deleted
  - Updated
- **Task**
  - Created
  - Deleted
  - Updated
- **Task log**
  - Created
  - Deleted
  - Updated

## Configure a Webhook in TheHive

To configure the webhook for your TheHive instance:

1. Copy the testing and production webhook URLs from TheHive Trigger node.
2. Add the following lines to the `application.conf` file:

   ```plaintext
   notification.webhook.endpoints = [
       {
           name: TESTING_WEBHOOK_NAME
           url: TESTING_WEBHOOK_URL
           version: 0
           wsConfig: {}
           includedTheHiveOrganisations: ["ORGANIZATION_NAME"]
           excludedTheHiveOrganisations: []
       },
       {
           name: PRODUCTION_WEBHOOK_NAME
           url: PRODUCTION_WEBHOOK_URL
           version: 0
           wsConfig: {}
           includedTheHiveOrganisations: ["ORGANIZATION_NAME"]
           excludedTheHiveOrganisations: []
       }
   ]
   ```

3. Replace `TESTING_WEBHOOK_URL` and `PRODUCTION_WEBHOOK_URL` with the URLs you copied.
4. Replace `TESTING_WEBHOOK_NAME` and `PRODUCTION_WEBHOOK_NAME` with your preferred endpoint names.
5. Replace `ORGANIZATION_NAME` with your organization name.
6. Execute the following cURL command to enable notifications:

   ```bash
   curl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d '{
       "value": [
           {
               "delegate": false,
               "trigger": { "name": "AnyEvent"},
               "notifier": { "name": "webhook", "endpoint": "TESTING_WEBHOOK_NAME" }
           },
           {
               "delegate": false,
               "trigger": { "name": "AnyEvent"},
               "notifier": { "name": "webhook", "endpoint": "PRODUCTION_WEBHOOK_NAME" }
           }
       ]
   }'
   ```

----------------------------------------

# TheHive Trigger Node

## Overview
TheHive Trigger node responds to various events from TheHive API versions 3 and 4.

## Events
- **Alert**
  - Created
  - Deleted
  - Updated
- **Case**
  - Created
  - Deleted
  - Updated
- **Log**
  - Created
  - Deleted
  - Updated
- **Observable**
  - Created
  - Deleted
  - Updated
- **Task**
  - Created
  - Deleted
  - Updated

## Configure a Webhook in TheHive
To configure the webhook for your TheHive instance:

1. Copy the testing and production webhook URLs from TheHive Trigger node.
2. Add the following lines to the `application.conf` file:

```plaintext
notification.webhook.endpoints = [
	{
		name: TESTING_WEBHOOK_NAME
		url: TESTING_WEBHOOK_URL
		version: 0
		wsConfig: {}
		includedTheHiveOrganisations: ["ORGANIZATION_NAME"]
		excludedTheHiveOrganisations: []
	},
	{
		name: PRODUCTION_WEBHOOK_NAME
		url: PRODUCTION_WEBHOOK_URL
		version: 0
		wsConfig: {}
		includedTheHiveOrganisations: ["ORGANIZATION_NAME"]
		excludedTheHiveOrganisations: []
	}
]
```

3. Replace `TESTING_WEBHOOK_URL` and `PRODUCTION_WEBHOOK_URL` with the URLs you copied in the previous step.
4. Replace `TESTING_WEBHOOK_NAME` and `PRODUCTION_WEBHOOK_NAME` with your preferred endpoint names.
5. Replace `ORGANIZATION_NAME` with your organization name.
6. Execute the following cURL command to enable notifications:

```bash
curl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d '{
	"value": [
		{
		"delegate": false,
		"trigger": { "name": "AnyEvent"},
		"notifier": { "name": "webhook", "endpoint": "TESTING_WEBHOOK_NAME" }
		},
		{
		"delegate": false,
		"trigger": { "name": "AnyEvent"},
		"notifier": { "name": "webhook", "endpoint": "PRODUCTION_WEBHOOK_NAME" }
		}
	]
}'
```

----------------------------------------

# Toggl Trigger Node

## Overview
The Toggl Trigger node is used for integrating with the Toggl time tracking application.

## Credentials
Authentication information for this node can be found in the Toggl credentials documentation.

## Best Practices
Refer to usage examples and templates for the Toggl Trigger integrations to help you get started effectively. 

## Related Links
- [Toggl Credentials Documentation](https://docs.n8n.io/integrations/builtin/credentials/toggl/)
- [Toggl Trigger Integrations](https://n8n.io/integrations/toggl-trigger/)

----------------------------------------

## Trello Trigger Node

### Overview
The Trello Trigger node allows users to automate workflows based on events in Trello.

### Credentials
Authentication information is required for this node. Refer to the [Trello Authentication Documentation](https://docs.n8n.io/integrations/builtin/credentials/trello/) for details.

### Find the Model ID
The model ID is necessary for specifying the type of item in Trello (e.g., User ID, List ID). Here’s how to find it:

1. Open the Trello board that contains the list.
2. If the list doesn't have any cards, add a card to the list.
3. Open the card, append `.json` to the end of the URL, and press enter.
4. In the JSON file, locate the `idList` field.
5. Copy `idList` and paste it into the **Model ID** field in n8n.

----------------------------------------

# Twilio Trigger Node

The Twilio Trigger node is used to respond to events in Twilio and integrate Twilio with other applications. n8n supports various Twilio events, including:

## Events
- **On New SMS**
- **On New Call**

**Note:** It can take Twilio up to thirty minutes to generate a summary for a completed call.

## Credentials
Authentication information for the Twilio Trigger node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/twilio/).

## Related Resources
- n8n provides an app node for Twilio. Documentation for the node can be found [here](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.twilio/).
- For more examples and workflows, visit the [Twilio integration page](https://n8n.io/integrations/twilio-trigger/).

----------------------------------------

# Typeform Trigger Node

**Overview**  
The Typeform Trigger node integrates with Typeform, an online form builder and survey tool. This node triggers workflows based on responses submitted through Typeform forms.

## Credentials  
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/typeform/).

## Examples and Templates  
For usage examples and templates, refer to n8n's [Typeform Trigger integrations](https://n8n.io/integrations/typeform-trigger/) page.

----------------------------------------

# Venafi TLS Protect Cloud Trigger Node

Use the n8n Venafi TLS Protect Cloud Trigger node to start a workflow in n8n in response to events in the cloud-based Venafi TLS Protect service.

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/venafitlsprotectcloud/).

## Examples and Templates
For usage examples and templates, refer to n8n's [Venafi TLS Protect Cloud Trigger integrations](https://n8n.io/integrations/venafi-tls-protect-cloud-trigger/) page.

----------------------------------------

# Webflow Trigger Node

## Credentials  
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/webflow/).

## Examples and Templates  
For usage examples and templates to help you get started, refer to n8n's [Webflow Trigger integrations](https://n8n.io/integrations/webflow-trigger/) page.

----------------------------------------

# WhatsApp Trigger Node

Use the WhatsApp Trigger node to respond to events in WhatsApp and integrate WhatsApp with other applications. n8n supports various WhatsApp events including account, message, and phone number events.

## Events

- Account Review Update
- Account Update
- Business Capability Update
- Message Template Quality Update
- Message Template Status Update
- Messages
- Phone Number Name Update
- Phone Number Quality Update
- Security
- Template Category Update

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/whatsapp/).

## Common Issues

### Workflow Only Works in Testing or Production

WhatsApp only allows registration of a single webhook per app. Switching from testing URL to production URL (and vice versa) overwrites the registered webhook URL. This may disrupt workflow testing.

**Workaround: Disable the Workflow When Testing**
1. Go to your workflow page.
2. Toggle the **Active** switch to disable the workflow temporarily.
3. Test your workflow using the test webhook URL.
4. Toggle the **Inactive** switch to enable the workflow again after testing.

----------------------------------------

# Wise Trigger Node

## Credentials
Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/wise/).

## Events
- Triggered every time a balance account is credited.
- Triggered every time a balance account is debited or credited.
- Triggered every time a transfer's list of active cases is updated.
- Triggered every time a transfer's status is updated.

----------------------------------------

# WooCommerce Trigger node

WooCommerce is a customizable, open-source e-commerce plugin for WordPress.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/woocommerce/).

## Events

- **coupon.created**
- **coupon.updated**
- **coupon.deleted**
- **customer.created**
- **customer.updated**
- **customer.deleted**
- **order.created**
- **order.updated**
- **order.deleted**
- **product.created**
- **product.updated**
- **product.deleted**

----------------------------------------

# Workable Trigger Node

Use the Workable Trigger node to respond to events in the Workable recruiting platform and integrate Workable with other applications. n8n has built-in support for a wide range of Workable events, including candidate created and moved.

## Events

- **Candidate Created**
- **Candidate Moved**

## Credentials

Authentication information for this node can be found in the documentation for [Workable credentials](https://docs.n8n.io/integrations/builtin/credentials/workable/).

## Related Resources

Refer to [Workable's API documentation](https://developers.workable.com/) for details about using the service.

----------------------------------------

# Wufoo Trigger Node

Wufoo is an online form builder for creating custom HTML forms.

## Credentials

Authentication information for this node can be found [here](https://docs.n8n.io/integrations/builtin/credentials/wufoo/).

## Examples and Templates

For usage examples and templates, refer to n8n's [Wufoo Trigger integrations](https://n8n.io/integrations/wufoo-trigger/) page.

----------------------------------------

# Zendesk Trigger Node

**Overview**  
The Zendesk Trigger node is used for integrating with Zendesk, a support ticketing system that helps in tracking, prioritizing, and solving customer support interactions.

## Authentication
For authentication information for this node, refer to the [Zendesk credentials documentation](https://docs.n8n.io/integrations/builtin/credentials/zendesk/).

## Examples and Templates
For usage examples and templates, refer to n8n's [Zendesk Trigger integrations](https://n8n.io/integrations/zendesk-trigger/) page.

## Node Configuration
- **Node Type**: Trigger Node
- **Integration**: Zendesk
- **Function**: Creates a trigger reaction to events in Zendesk, such as new tickets or updates to existing tickets.

## Workflow Integration
### Common Patterns
Integrate the Zendesk Trigger node with other nodes in a workflow that:
- Listens for new or updated support tickets.
- Sends notifications.
- Triggers automated responses based on ticket properties.

## Best Practices
- Ensure credentials are securely stored and managed.
- Test workflows with sample data to validate integrations before going live.
- Monitor trigger events to ensure timely responses to customer inquiries.

----------------------------------------

# n8n Community Node Blocklist

n8n maintains a blocklist of community nodes. You cannot install any node on this list.

## Reasons for Blocklisting
- The node is intentionally malicious.
- It's low quality (low enough to be harmful).

## Contact
If you are a community node creator whose node is on the blocklist and believe this is a mistake, contact hello@n8n.io.

----------------------------------------

# Building Community Nodes

Community nodes are npm packages, hosted in the npm registry.

## Standards

To make your node available to the n8n community node repository, you must:

- Package name must start with `n8n-nodes-` or `@<scope>/n8n-nodes-` (e.g., `n8n-nodes-weather` or `@weatherPlugins/n8n-nodes-weather`).
- Include `n8n-community-node-package` in your package keywords.
- Add your nodes and credentials to the `package.json` file inside the `n8n` attribute. Refer to the [package.json in the starter node](https://github.com/n8n-io/n8n-nodes-starter/blob/master/package.json) for an example.
- Check your node using the [linter](https://docs.n8n.io/integrations/creating-nodes/test/node-linter/) and test it locally to ensure it works.
- Submit the package to the npm registry. Refer to npm's documentation on [Contributing packages to the registry](https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry).

## Submit Your Node for Verification by n8n

n8n vets verified community nodes. Users can discover and install verified community nodes from the nodes panel in n8n. These nodes must adhere to specific technical and UX standards.

Before submitting your node for review by n8n, you must:

- Ensure your node follows the [technical guidelines for verified community nodes](https://docs.n8n.io/integrations/creating-nodes/build/reference/verification-guidelines/) and that all automated checks pass. Verified community nodes aren't allowed to use any run-time dependencies.
- Follow the [UX guidelines](https://docs.n8n.io/integrations/creating-nodes/build/reference/ux-guidelines/).
- Ensure that the node has appropriate documentation in the form of a README in the [npm package](https://docs.npmjs.com/about-package-readme-files) or a related public repository.
- Submit your node to npm, as n8n will fetch it from there for final vetting.

----------------------------------------

# Install Community Nodes from npm in the n8n App

## Core Concepts

- Only the n8n instance owner of a self-hosted n8n instance can install and manage community nodes from npm.
- Admin accounts can uninstall any community node, helping to maintain the health and functionality of the instance.
- n8n maintains a blocklist of community nodes that prevents installation of certain nodes.

## Install a Community Node

To install a community node from npm:

1. Go to **Settings** > **Community Nodes**.
2. Select **Install**.
3. Find the node you want to install:
   1. Select **Browse**. n8n takes you to an npm search results page, showing all npm packages tagged with `n8n-community-node-package`.
   2. Browse results and filter them or add keywords.
   3. Note the package name and version number if installing a specific version.
4. Return to n8n.
5. Enter the npm package name and version number if required, for example:
   - To install the latest version: `n8n-node-storms`
   - To install a specific version: `n8n-node-storms@2.3`
6. Agree to the risks of installing unverified code.
7. Select **Install**. n8n installs the node and returns to the Community Nodes list in Settings.

## Uninstall a Community Node

To uninstall a community node:

1. Go to **Settings** > **Community Nodes**.
2. Select **Options** on the node you want to uninstall.
3. Select **Uninstall package**.
4. Confirm by selecting **Uninstall Package** in the modal.

## Upgrade a Community Node

### Upgrade to the Latest Version

- From the node list in **Settings** > **Community Nodes**, click the **Update** button on nodes with available new versions.

### Upgrade to a Specific Version

- Uninstall the node, then reinstall it specifying the target version. Follow the installation instructions for guidance.

## Downgrade a Community Node

To rollback to a previous version, uninstall the community node, then reinstall it targeting a specific version. Follow the installation instructions for guidance.

----------------------------------------

# Install and Manage Community Nodes

## Installation Methods

There are three ways to install community nodes:

1. **Using the Nodes Panel**: This method is for verified community nodes only.
2. **Using the GUI**: Install community nodes from the npm registry.
3. **Manual Installation from the Command Line**: Use this method to install community nodes from npm if the n8n instance does not support in-app GUI installation.

**Note**: Installing from npm is only available on self-hosted instances. Unverified community nodes are not available on n8n cloud and require self-hosting n8n.

----------------------------------------

# Manual Installation of Community Nodes in n8n

## Prerequisites

You need to manually install community nodes in the following circumstances:

- Your n8n instance runs in queue mode.
- You want to install private packages.

## Install a Community Node

1. Access your Docker shell:
   ```bash
   docker exec -it n8n sh
   ```

2. Create `~/.n8n/nodes` if it doesn't already exist, and navigate into it:
   ```bash
   mkdir ~/.n8n/nodes
   cd ~/.n8n/nodes
   ```

3. Install the node:
   ```bash
   npm i n8n-nodes-nodeName
   ```

4. Restart n8n.

## Uninstall a Community Node

1. Access your Docker shell:
   ```bash
   docker exec -it n8n sh
   ```

2. Run npm uninstall:
   ```bash
   npm uninstall n8n-nodes-nodeName
   ```

## Upgrade a Community Node

### Upgrade to the Latest Version

1. Access your Docker shell:
   ```bash
   docker exec -it n8n sh
   ```

2. Run npm update:
   ```bash
   npm update n8n-nodes-nodeName
   ```

### Upgrade or Downgrade to a Specific Version

1. Access your Docker shell:
   ```bash
   docker exec -it n8n sh
   ```

2. Run npm uninstall to remove the current version:
   ```bash
   npm uninstall n8n-nodes-nodeName
   ```

3. Run npm install with the version specified:
   ```bash
   # Replace 2.1.0 with your version number
   npm install n8n-nodes-nodeName@2.1.0
   ```

## Important Notes

Node developers may introduce breaking changes in new versions of their nodes. Be careful when upgrading your nodes, as it might cause existing workflows to break. If issues arise after an upgrade, you can downgrade to a previous version.

----------------------------------------

# Install Verified Community Nodes in n8n

## Core Concepts
- Verified community nodes are managed and installed by the n8n instance owner. All members can use installed nodes in their workflows. Admin accounts can uninstall community nodes.

## Install a Community Node
To install a verified community node:

1. Go to the **Canvas** and open the **nodes panel** (select '+' or press `Tab`).
2. **Search** for the desired node. A **More from the community** section will show if a verified node exists.
3. Select the node to view details and supported actions.
4. Select **install** to add the node for your instance, which enables all members to use it.
5. Add the node to your workflows.

## Enable Installation of Verified Community Nodes
To show or hide verified community nodes in the nodes panel:
- n8n cloud: Use the [Cloud Admin Panel](https://docs.n8n.io/manage-cloud/cloud-admin-dashboard/).
- Self-hosted: Control availability with [environment variables](https://docs.n8n.io/hosting/configuration/environment-variables/nodes/).

## Uninstall a Community Node
To uninstall a community node:

1. Go to **Settings** > **Community nodes**.
2. On the node you want to uninstall, select **Options**.
3. Select **Uninstall package**.
4. Confirm by selecting **Uninstall Package** in the modal.

----------------------------------------

# Risks When Using Community Nodes

Installing community nodes from npm involves the following risks:

- **System Security**: Community nodes have full access to the machine that n8n runs on and can perform destructive actions.
  
- **Data Security**: Any community node used can access data within your workflows.
  
- **Breaking Changes**: Node developers may introduce breaking changes in new versions, which can cause workflows to fail. Be cautious when upgrading nodes.

### Verified Community Nodes

n8n vets certain community nodes, making them available as verified community nodes in the nodes panel. These nodes meet specific data and system security requirements.

## Report Bad Community Nodes

Report bad community nodes to [security@n8n.io](mailto:security@n8n.io).

## Disable Community Nodes

To disable community nodes:

- In self-hosted n8n, set `N8N_COMMUNITY_PACKAGES_ENABLED` to `false`.
- For n8n cloud, disable community nodes from the Cloud Admin Panel. Refer to the [troubleshooting](https://docs.n8n.io/integrations/community-nodes/troubleshooting/) section for more details.

----------------------------------------

# Troubleshooting and Errors

## Error: Missing Packages

n8n installs community nodes directly onto the hard disk. The files must be available at startup for n8n to load them. If the packages aren't available at startup, you receive an error warning of missing packages.

### Docker Considerations
If running n8n using Docker, you may lose the packages when you recreate your container or upgrade your n8n version. You must either:
- Persist the contents of the `~/.n8n/nodes` directory. This is the best option. Following the Docker installation guide includes persisting this directory.
- Set the `N8N_REINSTALL_MISSING_PACKAGES` environment variable to `true`.

**Note:** The second option may increase startup time and could cause health checks to fail.

## Prevent Loading Community Nodes on n8n Cloud

If your n8n cloud instance crashes and fails to start, you can prevent installed community nodes from loading on instance startup. Visit the Cloud Admin Panel > **Manage** and toggle **Disable all community nodes** to **`true`**. This toggle is only visible when community node installation is allowed.

----------------------------------------

# Using Community Nodes

## Adding Community Nodes to Your Workflow
To use community nodes, first, you must install them. After installation, community nodes will be available in the **Nodes** panel and will be marked with a **Package** icon.

## Community Nodes with Duplicate Names
Multiple community nodes can have the same name. When using two nodes with identical names, they will appear the same unless they have different icons.

----------------------------------------

# Build a Node

## Tutorials
- **Tutorial: Build a declarative-style node**

## Reference Material
- **File Structure**
- **Parameter Definitions**
  - Base: Explanation of base files used in node development.
  - Codex: Explanation of codex files used in node development.
  - Credentials: Explanation of credentials files used in node development.
- **Node UI Elements:** A guide on the user interface components of the node.

## Coming Soon
- More tutorials
- Revised guidance on standards

----------------------------------------

# Build a Declarative-Style Node

## Prerequisites

- Required software:
  - git
  - Node.js (minimum version 18.17.0)
  - npm 

## Build Your Node

### Step 1: Set Up the Project

1. Clone your new repository:
   ```bash
   git clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-nasa-pics
   cd n8n-nodes-nasa-pics
   ```

2. Delete unnecessary directories and files:
   - `nodes/ExampleNode`
   - `nodes/HTTPBin`
   - `credentials/ExampleCredentials.credentials.ts`
   - `credentials/HttpBinApi.credentials.ts`

3. Create necessary directories and files:
   ```
   nodes/NasaPics
   nodes/NasaPics/NasaPics.node.json
   nodes/NasaPics/NasaPics.node.ts
   credentials/NasaPicsApi.credentials.ts
   ```

4. Install project dependencies:
   ```bash
   npm i
   ```

### Step 2: Add an Icon

- Save the NASA SVG logo as `nasapics.svg` in `nodes/NasaPics/`.

### Step 3: Create the Node

#### Step 3.1: Imports
Add import statements to `NasaPics.node.ts`:
```typescript
import { INodeType, INodeTypeDescription } from 'n8n-workflow';
```

#### Step 3.2: Create the Main Class
```typescript
export class NasaPics implements INodeType {
	description: INodeTypeDescription = {
		properties: []
	};
}
```

#### Step 3.3: Add Node Details
Add the following to `description`:
```typescript
displayName: 'NASA Pics',
name: 'NasaPics',
icon: 'file:nasapics.svg',
group: ['transform'],
version: 1,
subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
description: 'Get data from NASA\'s API',
defaults: {
	name: 'NASA Pics',
},
inputs: ['main'],
outputs: ['main'],
credentials: [
	{
		name: 'NasaPicsApi',
		required: true,
	},
],
requestDefaults: {
	baseURL: 'https://api.nasa.gov',
	headers: {
		Accept: 'application/json',
		'Content-Type': 'application/json',
	},
},
```

#### Step 3.4: Add Resources
Update the `properties` array:
```typescript
properties: [
	{
		displayName: 'Resource',
		name: 'resource',
		type: 'options',
		noDataExpression: true,
		options: [
			{name: 'Astronomy Picture of the Day', value: 'astronomyPictureOfTheDay'},
			{name: 'Mars Rover Photos', value: 'marsRoverPhotos'},
		],
		default: 'astronomyPictureOfTheDay',
	},
	// Operations will go here
]
```

#### Step 3.5: Add Operations
```typescript
{
	displayName: 'Operation',
	name: 'operation',
	type: 'options',
	noDataExpression: true,
	displayOptions: {
		show: {
			resource: ['astronomyPictureOfTheDay'],
		},
	},
	options: [
		{
			name: 'Get',
			value: 'get',
			action: 'Get the APOD',
			description: 'Get the Astronomy Picture of the day',
			routing: {
				request: {
					method: 'GET',
					url: '/planetary/apod',
				}
			},
		},
	],
	default: 'get',
},
{
	displayName: 'Rover name',
	description: 'Choose which Mars Rover to get a photo from',
	required: true,
	name: 'roverName',
	type: 'options',
	options: [
		{name: 'Curiosity', value: 'curiosity'},
		{name: 'Opportunity', value: 'opportunity'},
		{name: 'Perseverance', value: 'perseverance'},
		{name: 'Spirit', value: 'spirit'},
	],
	routing: {
		request: {
			url: '=/mars-photos/api/v1/rovers/{{$value}}/photos',
		}
	},
	default: 'curiosity',
	displayOptions: {
		show: {
			resource: ['marsRoverPhotos'],
		},
	}
},
{
	displayName: 'Date',
	description: 'Earth date',
	required: true,
	name: 'marsRoverDate',
	type: 'dateTime',
	default: '',
	displayOptions: {
		show: {
			resource: ['marsRoverPhotos'],
		},
	},
	routing: {
		request: {
			qs: {
				earth_date: '={{ new Date($value).toISOString().substr(0,10) }}',
			},
		}
	},
},
```

#### Step 3.6: Optional Fields
Add optional fields:
```typescript
{
	displayName: 'Additional Fields',
	name: 'additionalFields',
	type: 'collection',
	default: {},
	placeholder: 'Add Field',
	displayOptions: {
		show: {
			resource: ['astronomyPictureOfTheDay'],
			operation: ['get'],
		},
	},
	options: [
		{
			displayName: 'Date',
			name: 'apodDate',
			type: 'dateTime',
			default: '',
			routing: {
				request: {
					qs: {
						date: '={{ new Date($value).toISOString().substr(0,10) }}',
					},
				}
			},
		},
	],
}
```

### Step 4: Set Up Authentication

Add to `nasaPicsApi.credentials.ts`:
```typescript
import {
	IAuthenticateGeneric,
	ICredentialType,
	INodeProperties,
} from 'n8n-workflow';

export class NasaPicsApi implements ICredentialType {
	name = 'NasaPicsApi';
	displayName = 'NASA Pics API';
	properties: INodeProperties[] = [
		{
			displayName: 'API Key',
			name: 'apiKey',
			type: 'string',
			default: '',
		},
	];
	authenticate = {
		type: 'generic',
		properties: {
			qs: {
				'api_key': '={{$credentials.apiKey}}'
			}
		},
	} as IAuthenticateGeneric;
}
```

### Step 5: Add Node Metadata

Add to `NasaPics.node.json`:
```json
{
	"node": "n8n-nodes-base.NasaPics",
	"nodeVersion": "1.0",
	"codexVersion": "1.0",
	"categories": [
		"Miscellaneous"
	],
	"resources": {
		"credentialDocumentation": [
			{
				"url": ""
			}
		],
		"primaryDocumentation": [
			{
				"url": ""
			}
		]
	}
}
```

### Step 6: Update the npm Package Details

Update `package.json`:
```json
{
	"name": "n8n-nodes-nasapics",
	"version": "0.1.0",
	"description": "n8n node to call NASA's APOD and Mars Rover Photo services.",
	"keywords": [
		"n8n-community-node-package"
	],
	"license": "MIT",
	"homepage": "https://n8n.io",
	"repository": {
		"type": "git",
		"url": "git+<your-repo-url>"
	},
	"n8n": {
		"n8nNodesApiVersion": 1,
		"credentials": [
			"dist/credentials/NasaPicsApi.credentials.js"
		],
		"nodes": [
			"dist/nodes/NasaPics/NasaPics.node.js"
		]
	}
}
```

## Test Your Node

1. Install n8n:
   ```bash
   npm install n8n -g
   ```

2. Publish locally:
   ```bash
   npm run build
   npm link
   ```

3. Install the node into your local n8n instance:
   ```bash
   npm link <node-package-name>
   ```

4. Start n8n:
   ```bash
   n8n start
   ```

5. Verify node visibility in the n8n interface.

### Troubleshooting

- If there's no `custom` directory in `~/.n8n`, create it:
   ```bash
   mkdir custom 
   cd custom 
   npm init
   ```

----------------------------------------

# Set Up Your Development Environment

## Requirements

To build and test a node, you need:

- **Node.js and npm**: Minimum version Node 18.17.0. Instructions to install using nvm (Node Version Manager) for Linux, Mac, and WSL can be found [here](https://github.com/nvm-sh/nvm). For Windows users, refer to Microsoft's guide on [Install NodeJS on Windows](https://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-windows).
- **Local instance of n8n**: Install with the command:
  ```bash
  npm install n8n -g
  ```
  Then follow the steps in [Run your node locally](https://docs.n8n.io/integrations/creating-nodes/test/run-node-locally/) to test your node.
- **Git**: Install from [git-scm.com](https://git-scm.com/) to clone and use the [n8n-node-starter](https://github.com/n8n-io/n8n-nodes-starter).

## Editor Setup

n8n recommends using [VS Code](https://code.visualstudio.com/) as your editor.

Install these extensions:

- [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)
- [EditorConfig](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig)
- [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)

Using VS Code along with these extensions enables access to the n8n node linter's warnings during coding.

----------------------------------------

# Build a programmatic-style node

## Prerequisites

- Install the following on your development machine:
  - **git**
  - **Node.js** and **npm**. Minimum version Node 18.17.0.
- Required knowledge:
  - JavaScript/TypeScript
  - REST APIs
  - git
  - Expressions in n8n

## Build your node

### Step 1: Set up the project

1. Generate a new repository from the template repository.
2. Clone your new repository:

   ```bash
   git clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-friendgrid
   cd n8n-nodes-friendgrid
   ```

- Delete the following directories and files:
  - `nodes/ExampleNode`
  - `nodes/HTTPBin`
  - `credentials/ExampleCredentials.credentials.ts`
  - `credentials/HttpBinApi.credentials.ts`

- Create the following directories and files:

   ```
   nodes/FriendGrid
   nodes/FriendGrid/FriendGrid.node.json
   nodes/FriendGrid/FriendGrid.node.ts
   credentials/FriendGridApi.credentials.ts
   ```
  
- Install project dependencies:

   ```bash
   npm i
   ```

### Step 2: Add an icon

- Save the SendGrid SVG logo as `friendGrid.svg` in `nodes/FriendGrid/`.

### Step 3: Define the node in the base file

- Create the base file in `FriendGrid.node.ts`:

```typescript
import {
	IExecuteFunctions,
} from 'n8n-core';
import {
	IDataObject,
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
} from 'n8n-workflow';
import {
	OptionsWithUri,
} from 'request';

export class FriendGrid implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'FriendGrid',
		name: 'friendGrid',
		icon: 'file:friendGrid.svg',
		group: ['transform'],
		version: 1,
		description: 'Consume SendGrid API',
		defaults: {
			name: 'FriendGrid',
		},
		inputs: ['main'],
		outputs: ['main'],
		credentials: [
			{
				name: 'friendGridApi',
				required: true,
			},
		],
		properties: [
			// Properties will go here
		],
	};

	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
	}
}
```

#### Step 3.1: Add node details

```typescript
properties: [
	{
		displayName: 'Resource',
		name: 'resource',
		type: 'options',
		options: [
			{
				name: 'Contact',
				value: 'contact',
			},
		],
		default: 'contact',
		noDataExpression: true,
		required: true,
		description: 'Create a new contact',
	},
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		displayOptions: {
			show: {
				resource: [
					'contact',
				],
			},
		},
		options: [
			{
				name: 'Create',
				value: 'create',
				description: 'Create a contact',
				action: 'Create a contact',
			},
		],
		default: 'create',
		noDataExpression: true,
	},
	{
		displayName: 'Email',
		name: 'email',
		type: 'string',
		required: true,
		displayOptions: {
			show: {
				operation: [
					'create',
				],
				resource: [
					'contact',
				],
			},
		},
		default: '',
		placeholder: 'name@email.com',
		description: 'Primary email for the contact',
	},
	{
		displayName: 'Additional Fields',
		name: 'additionalFields',
		type: 'collection',
		placeholder: 'Add Field',
		default: {},
		displayOptions: {
			show: {
				resource: [
					'contact',
				],
				operation: [
					'create',
				],
			},
		},
		options: [
			{
				displayName: 'First Name',
				name: 'firstName',
				type: 'string',
				default: '',
			},
			{
				displayName: 'Last Name',
				name: 'lastName',
				type: 'string',
				default: '',
			},
		],
	},
],
```

### Step 4: Add the execute method

```typescript
const items = this.getInputData();
let responseData;
const returnData = [];
const resource = this.getNodeParameter('resource', 0) as string;
const operation = this.getNodeParameter('operation', 0) as string;

for (let i = 0; i < items.length; i++) {
	if (resource === 'contact') {
		if (operation === 'create') {
			const email = this.getNodeParameter('email', i) as string;
			const additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject;
			const data: IDataObject = {
				email,
			};
			Object.assign(data, additionalFields);
			const options: OptionsWithUri = {
				headers: {
					'Accept': 'application/json',
				},
				method: 'PUT',
				body: {
					contacts: [
						data,
					],
				},
				uri: `https://api.sendgrid.com/v3/marketing/contacts`,
				json: true,
			};
			responseData = await this.helpers.requestWithAuthentication.call(this, 'friendGridApi', options);
			returnData.push(responseData);
		}
	}
}
return [this.helpers.returnJsonArray(returnData)];
```

### Step 5: Set up authentication

Add to `FriendGridApi.credentials.ts`:

```typescript
import {
	IAuthenticateGeneric,
	ICredentialTestRequest,
	ICredentialType,
	INodeProperties,
} from 'n8n-workflow';

export class FriendGridApi implements ICredentialType {
	name = 'friendGridApi';
	displayName = 'FriendGrid API';
	properties: INodeProperties[] = [
		{
			displayName: 'API Key',
			name: 'apiKey',
			type: 'string',
			default: '',
		},
	];
	authenticate: IAuthenticateGeneric = {
		type: 'generic',
		properties: {
			headers: {
				Authorization: '=Bearer {{$credentials.apiKey}}',
			},
		},
	};
	test: ICredentialTestRequest = {
		request: {
			baseURL: 'https://api.sendgrid.com/v3',
			url: '/marketing/contacts',
		},
	};
}
```

### Step 6: Add node metadata

Add to `FriendGrid.node.json`:

```json
{
	"node": "n8n-nodes-base.FriendGrid",
	"nodeVersion": "1.0",
	"codexVersion": "1.0",
	"categories": [
		"Miscellaneous"
	],
	"resources": {
		"credentialDocumentation": [
			{
				"url": ""
			}
		],
		"primaryDocumentation": [
			{
				"url": ""
			}
		]
	}
}
```

### Step 7: Update the npm package details

Update the `package.json`:

```json
{
	"name": "n8n-nodes-friendgrid",
	"version": "0.1.0",
	"description": "n8n node to create contacts in SendGrid",
	"keywords": [
		"n8n-community-node-package"
	],
	"license": "MIT",
	"homepage": "https://n8n.io",
	"author": {
		"name": "Test",
		"email": "test@example.com"
	},
	"repository": {
		"type": "git",
		"url": "git+<your-repo-url>"
	},
	"main": "index.js",
	"files": [
		"dist"
	],
	"n8n": {
		"n8nNodesApiVersion": 1,
		"credentials": [
			"dist/credentials/FriendGridApi.credentials.js"
		],
		"nodes": [
			"dist/nodes/FriendGrid/FriendGrid.node.js"
		]
	},
}
```

## Test your node

1. Install n8n using npm:

   ```bash
   npm install n8n -g
   ```

2. When ready to test your node, publish it locally:

   ```bash
   # In your node directory
   npm run build
   npm link
   ```

3. Install the node into your local n8n instance:

   ```bash
   # In the nodes directory within your n8n installation
   npm link <node-package-name>
   ```

4. Start n8n:

   ```bash
   n8n start
   ``` 

5. Open n8n in your browser. Search for your node in the nodes panel.

## Troubleshooting

- If there's no `custom` directory in `~/.n8n`, create it manually:

   ```bash
   mkdir custom
   cd custom
   npm init
   ```

----------------------------------------

# Node Building Reference

This section contains reference information, including details about:

- **Node UI Elements**
- **Organizing Your Node Files**
- **Key Parameters in Your Node's Base File and Credentials File**
- **UX Guidelines**
- **Verification Guidelines**

## Node UI Elements

Information on the user interface components involved in node construction.

## Organizing Your Node Files

Guidelines on structuring your node files for maintainability.

## Key Parameters

### Base File
Essential parameters required in the base file of your n8n node.

### Credentials File
Important parameters for managing credentials securely in your node.

## UX Guidelines

Best practices for user experience design when building nodes for n8n.

## Verification Guidelines

Requirements and procedures to submit your node for verification by n8n.

----------------------------------------

# Deploy a Node

## Deployment Options

1. **Submit to Community Node Repository**  
   This option allows your node to be available for everyone to use. You can [install and use it](https://docs.n8n.io/integrations/community-nodes/installation/) like any other community node. This is the only way to use custom nodes on the cloud.

2. **Install as a Private Node**  
   You can install the node into your n8n instance as a [private node](https://docs.n8n.io/integrations/creating-nodes/deploy/install-private-nodes/).

----------------------------------------

# Install Private Nodes

You can build and install custom nodes in your n8n instance without publishing them on npm, useful for internal company use.

## Install Your Node in a Docker n8n Instance

To install a node in a Docker n8n instance, create a Docker image with the node included.

1. Create a Dockerfile and use the following content:

   ```Dockerfile
   FROM node:16-alpine
   ARG N8N_VERSION
   RUN if [ -z "$N8N_VERSION" ] ; then echo "The N8N_VERSION argument is missing!" ; exit 1; fi
   # Update everything and install needed dependencies
   RUN apk add --update graphicsmagick tzdata git tini su-exec
   # Set a custom user to not have n8n run as root
   USER root
   # Install n8n and the packages it needs to build it correctly.
   RUN apk --update add --virtual build-dependencies python3 build-base ca-certificates && \
       npm config set python "$(which python3)" && \
       npm_config_user=root npm install -g full-icu n8n@${N8N_VERSION} && \
       apk del build-dependencies \
       && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root;
   # Install fonts
   RUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \
       update-ms-fonts && \
       fc-cache -f && \
       apk del fonts && \
       find /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \; \
       && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root
   ENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu
   WORKDIR /data
   COPY docker-entrypoint.sh /docker-entrypoint.sh
   ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]
   EXPOSE 5678/tcp
   ```

2. Compile your custom node code (use `npm run build` if using the node starter). Copy the **node** and **credential** folders from the **dist** folder to your container's `~/.n8n/custom/` directory.

3. Download the `docker-entrypoint.sh` file and place it next to your Dockerfile.

4. Build your Docker image:

   ```bash
   # Replace <n8n-version-number> with the n8n release version number.
   # Example: N8N_VERSION=0.177.0
   docker build --build-arg N8N_VERSION=<n8n-version-number> --tag=customizedn8n .
   ```

You can now use your node in Docker.

## Install Your Node in a Global n8n Instance

If n8n is installed globally, install your node inside the n8n instance. n8n will automatically find and load the module.

----------------------------------------

# Submit Community Nodes

Community nodes are npm packages hosted in the npm registry. To submit a node to the community node repository, ensure that your node conforms to the following standards:

## Standards

- Package name must start with `n8n-nodes-` or `@<scope>/n8n-nodes-`. Examples: `n8n-nodes-weather` or `@weatherPlugins/n8n-nodes-weather`.
- Include `n8n-community-node-package` in package keywords.
- Add nodes and credentials to the `package.json` file inside the `n8n` attribute.
- Validate your node using the [linter](https://docs.n8n.io/integrations/creating-nodes/test/node-linter/) and test locally for functionality.
- Submit the package to the npm registry. Refer to npm's documentation on [Contributing packages to the registry](https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry) for additional information.

## Submit Your Node for Verification by n8n

n8n verifies community nodes. Before submitting:

- Ensure that your node complies with the [technical guidelines for verified community nodes](https://docs.n8n.io/integrations/creating-nodes/build/reference/verification-guidelines/) and passes all automated checks. Note that verified community nodes cannot use run-time dependencies.
- Follow the [UX guidelines](https://docs.n8n.io/integrations/creating-nodes/build/reference/ux-guidelines/).
- Provide appropriate documentation, including a README in the [npm package](https://docs.npmjs.com/about-package-readme-files) or a related public repository.
- Submit your node to npm, as n8n will fetch it from there for review.

If your node meets all the requirements, submit your node for verification.

----------------------------------------

# Creating Nodes in n8n

Learn how to build your own custom nodes.

## Guidance on Building Nodes

- **Planning Build**: Choose a style for your node.
- **Tutorials**: Different node building styles.
- **Testing Your Node**: Instructions on using the n8n node linter and troubleshooting support.
- **Sharing Your Node**: 
  - Submit for community verification.
  - Use as a private node.
- **Reference Material**: UI elements and information on individual files that make up a node.

## Prerequisites

- Familiarity with JavaScript and TypeScript.
- Ability to manage your own development environment, including git.
- Knowledge of npm, creating and submitting packages.
- Understanding of n8n, data structures, and item linking.

## References

- [Node Linter](https://docs.n8n.io/integrations/creating-nodes/test/node-linter/)
- [Troubleshooting Node Development](https://docs.n8n.io/integrations/creating-nodes/test/troubleshooting-node-development/)
- [Submit Community Nodes](https://docs.n8n.io/integrations/creating-nodes/deploy/submit-community-nodes/)
- [Install Private Nodes](https://docs.n8n.io/integrations/creating-nodes/deploy/install-private-nodes/)
- [Reference Material](https://docs.n8n.io/integrations/creating-nodes/build/reference/)

----------------------------------------

# Plan a Node

## Key Technical Decisions
When building a node, consider the following design choices:
- **Node Type**: Determine which node type you need to build.
- **Node Building Style**: Choose your method of building the node.
- **UI Design and UX Principles**: Factor in design and user experience.
- **File Structure**: Plan your node's file structure.

----------------------------------------

# Choose a Node Building Approach

n8n has two node-building styles: **declarative** and **programmatic**.

## Node Building Styles

### Declarative Style
- Uses a JSON-based syntax.
- Simpler to write with less risk of bugs.
- More future-proof.
- Supports integration with REST APIs.

### Programmatic Style
- More verbose.
- Required for:
  - Trigger nodes.
  - Any node that isn't REST-based (including GraphQL and external dependencies).
  - Nodes that need to transform incoming data.
  - Full versioning.

## Data Handling Differences

- **Programmatic Style**: Requires an `execute()` method to read incoming data and build requests.
- **Declarative Style**: Uses the `routing` key in the `operations` object.

Refer to [Node base file](https://docs.n8n.io/integrations/creating-nodes/build/reference/node-base-files/) for more information on node parameters and the `execute()` method.

## Syntax Differences

### Programmatic Style Example

```javascript
import { 
    IExecuteFunctions,
    INodeExecutionData,
    INodeType,
    INodeTypeDescription,
    IRequestOptions,
} from 'n8n-workflow';

// Create the FriendGrid class
export class FriendGrid implements INodeType {
    description: INodeTypeDescription = {
        displayName: 'FriendGrid',
        name: 'friendGrid',
        properties: [
            {
                displayName: 'Resource',
            },
            {
                displayName: 'Operation',
                name: 'operation',
                type: 'options',
                displayOptions: {
                    show: {
                        resource: ['contact'],
                    },
                },
                options: [
                    {
                        name: 'Create',
                        value: 'create',
                        description: 'Create a contact',
                    },
                ],
                default: 'create',
                description: 'The operation to perform.',
            },
            {
                displayName: 'Email',
                name: 'email',
            },
            {
                displayName: 'Additional Fields',
            },
        ],
    };

    async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
        let responseData;
        const resource = this.getNodeParameter('resource', 0) as string;
        const operation = this.getNodeParameter('operation', 0) as string;

        const credentials = await this.getCredentials('friendGridApi') as IDataObject;

        if (resource === 'contact') {
            if (operation === 'create') {
                const email = this.getNodeParameter('email', 0) as string;
                const additionalFields = this.getNodeParameter('additionalFields', 0) as IDataObject;
                const data: IDataObject = {
                    email,
                };
                Object.assign(data, additionalFields);

                const options: IRequestOptions = {
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${credentials.apiKey}`,
                    },
                    method: 'PUT',
                    body: {
                        contacts: [data],
                    },
                    url: `https://api.sendgrid.com/v3/marketing/contacts`,
                    json: true,
                };
                responseData = await this.helpers.httpRequest(options);
            }
        }
        return [this.helpers.returnJsonArray(responseData)];
    }
}
```

### Declarative Style Example

```javascript
import { INodeType, INodeTypeDescription } from 'n8n-workflow';

// Create the FriendGrid class
export class FriendGrid implements INodeType {
    description: INodeTypeDescription = {
        displayName: 'FriendGrid',
        name: 'friendGrid',
        requestDefaults: {
            baseURL: 'https://api.sendgrid.com/v3/marketing'
        },
        properties: [
            {
                displayName: 'Resource',
            },
            {
                displayName: 'Operation',
                name: 'operation',
                type: 'options',
                displayOptions: {
                    show: {
                        resource: ['contact'],
                    },
                },
                options: [
                    {
                        name: 'Create',
                        value: 'create',
                        description: 'Create a contact',
                        routing: {
                            request: {
                                method: 'POST',
                                url: '=/contacts',
                                send: {
                                    type: 'body',
                                    properties: {
                                        email: {{$parameter["email"]}}
                                    }
                                }
                            }
                        },
                        output: {
                            postReceive: [
                                {
                                    type: 'set',
                                    properties: {
                                        value: '={{ { "success": $response } }}'
                                    }
                                }
                            ]
                        }
                    },
                ],
                default: 'create',
                description: 'The operation to perform.',
            },
            {
                displayName: 'Email',
            },
            {
                displayName: 'Additional Fields',
            },
        ],
    }
}
```

----------------------------------------

# Node Types: Trigger and Action

There are two node types you can build for n8n: trigger nodes and action nodes. Both types provide integrations with external services.

## Trigger Nodes

Trigger nodes start a workflow and supply the initial data. A workflow can contain multiple trigger nodes, but only one will execute with each workflow execution, depending on the triggering event.

### Types of Trigger Nodes

| Type | Description | Example Nodes |
| --- | --- | --- |
| Webhook | Nodes for services that support webhooks. These nodes listen for events and trigger workflows in real-time. | Zendesk Trigger, Telegram Trigger, Brevo Trigger |
| Polling | Nodes for services that don't support webhooks. These nodes periodically check for new data, triggering workflows when they detect updates. | Airtable Trigger, Gmail Trigger, Google Sheet Trigger, RssFeed Read Trigger |
| Others | Nodes that handle real-time responses not related to HTTP requests or polling, including message queue nodes and time-based triggers. | AMQP Trigger, RabbitMQ Trigger, MQTT Trigger, Schedule Trigger, Email Trigger (IMAP) |

## Action Nodes

Action nodes perform operations as part of your workflow, which can include manipulating data and triggering events in other systems.

----------------------------------------

# Node UI Design

## Design Guidance

- Review the API documentation for integration:
  - Identify what can be omitted or simplified.
  - Clarify confusing parts for users.
- Use a wireframe tool for field layout. Consider guidance on showing/hiding fields.

## Standards

### UI Text Style

| Element         | Style                                                                      |
|------------------|---------------------------------------------------------------------------|
| Drop-down value   | Title case                                                                |
| Hint              | Sentence case                                                              |
| Info box          | Sentence case, no period for one sentence; use a period for multiple sentences; can include links. |
| Node name         | Title case                                                                |
| Parameter name    | Title case                                                                |
| Subtitle          | Title case                                                                |
| Tooltip           | Sentence case, no period for one sentence; use a period for multiple sentences; can include links. |

### UI Text Terminology

- Match terminology with the service's API.
- Use GUI language familiar to users.
- Avoid technical jargon in favor of simpler alternatives.
- Ensure consistency in naming (e.g., choose `directory` or `folder`).

### Node Naming Conventions

| Convention | Correct            | Incorrect                     |
|------------|--------------------|-------------------------------|
| Trigger node | `Shopify Trigger`  | `ShopifyTrigger`, `Shopify trigger` |
| Omit 'node' from names | `Asana`             | `Asana Node`, `Asana node` |

### Showing and Hiding Fields

- Display required fields and operations when the node opens.
- Hide optional fields in the **Optional fields** section until clicked.
- Hide dependent fields until previous fields are filled (e.g., toggle dependencies).

### Field Type Conventions

#### Credentials

- Credential fields appear at the top of the node.

#### Resources and Operations

- First field: **Resource**, second field: **Operation**.

#### Required Fields

- Order: Most important to least important, from broad to narrow.

#### Optional Fields

- Order alphabetically; rename to group related fields.
- Provide default values and explain them in descriptions.

#### Help

- Use info boxes, parameter hints, node hints, tooltips.
- Include useful links where necessary.

#### Errors

- Clearly indicate required fields and validation rules.

#### Toggles

- Tooltips for binary states start with "Whether to...".
- Use appropriate UI elements based on clarity requirements.

#### Lists

- Default values and alphabetical sorting for list options.

#### Trigger Node Inputs

- Parameter for events should be named **Trigger on**.

#### Subtitles

Set subtitles based on parameter values, e.g., 
```javascript
subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
```

#### IDs

- Provide two methods to specify records (pre-populated list and ID input).
- Field naming: `<Record name> name or ID`.

#### Dates and Timestamps

- Support all ISO 8601 date formats.

#### JSON

- Support direct JSON input and expression returning JSON.

## Node Icons

### Common Patterns and Exceptions

#### Simplify Responses

- Toggle: **Simplify Response**, description: **Whether to return a simplified version of the response instead of the raw data**.

#### Upsert Operations

- Operation name: **Create or Update**, description: **Create a new record, or update the current one if it exists (upsert)**.

#### Boolean Operators

- Provide options for ANDs or ORs.

#### Source Keys or Binary Properties

- Use descriptive names instead of technical jargon (e.g., **Input data field name**).

----------------------------------------

# Test a Node

## Testing Methods
There are two ways to test your node:
- Manually, by running it on your own machine within a local n8n instance.
- Automatically, using the linter. 

You should use both methods before publishing your node.

----------------------------------------

# n8n Node Linter

**Description**  
n8n's node linter, `eslint-plugin-n8n-nodes-base`, statically analyzes the source code of n8n nodes and credentials. It detects issues and automatically fixes them to follow best practices. It contains a collection of rules for node files (`*.node.ts`), resource description files (`*Description.ts`), credential files (`*.credentials.ts`), and `package.json` of community packages.

## Setup

1. If using the n8n node starter:
   - Run `npm install` in the starter project to install all dependencies.
   
2. For VS Code:
   - Install the ESLint VS Code extension.
   - Refer to other IDEs for their ESLint integrations.

**Configuration File**  
Do not edit the configuration file `.eslintrc.js`. It contains the configuration for `eslint-plugin-n8n-nodes-base`.

## Usage

### Linting

- In a community package, the linter runs automatically after installing dependencies and before publishing to npm.
- In the main n8n repository, it runs automatically using GitHub Actions on push to pull requests.
- In VS Code, linting occurs in the background. Hover over issues for descriptions and further information.

**Manual Execution**  
- Run `npm run lint` to lint and view issues in the console.
- Run `npm run lintfix` to lint and automatically fix issues for rules marked as automatically fixable.

Both commands can be executed in the root directory of the community package or in `/packages/nodes-base/` in the main repository.

### Exceptions

To make a lint exception:
- In VS Code, hover over the issue and click on `Quick fix` (or `cmd+.` in macOS) to select **Disable {rule} for this line** for specific lines.
- To disable a lint rule in a single file, add a code comment as per the TSLint documentation guidance.

----------------------------------------

# Run Your Node Locally

You can test your node as you build it by running it in a local n8n instance.

## Installation Steps

1. **Install n8n using npm:**
   ```bash
   npm install n8n -g
   ```

2. **Publish your node locally:**
   ```bash
   # In your node directory
   npm run build
   npm link
   ```

3. **Install the node into your local n8n instance:**
   ```bash
   # In the nodes directory within your n8n installation
   # node-package-name is the name from the package.json
   npm link <node-package-name>
   ```

   Check your directory:
   - Make sure you run `npm link <node-name>` in the nodes directory within your n8n installation. This can be:
     - `~/.n8n/custom/`
     - `~/.n8n/<your-custom-name>`: if your n8n installation set a different name using `N8N_CUSTOM_EXTENSIONS`.

4. **Start n8n:**
   ```bash
   n8n start
   ```

5. **Open n8n in your browser.** You should see your nodes when you search for them in the nodes panel.

## Node Names

Make sure you search using the node name, not the package name. For example, if your npm package name is `n8n-nodes-weather-nodes`, and the package contains nodes named `rain`, `sun`, `snow`, you should search for `rain`, not `weather-nodes`.

## Troubleshooting

- If there's no `custom` directory in `~/.n8n` local installation, create it manually:
   ```bash
   # In ~/.n8n directory run
   mkdir custom 
   cd custom 
   npm init
   ```

----------------------------------------

# Troubleshooting

## Credentials

### Error message: 'Credentials of type "*" aren't known'
Check that the name in the credentials array matches the name used in the property name of the credentials' class.

## Editor UI

### Error message: 'There was a problem loading init data: API-Server can not be reached. It's probably down'
- Check that the names of the node file, node folder, and class match the path added to `packages/nodes-base/package.json`.
- Check that the names used in the `displayOptions` property are names used by UI elements in the node.

### Node icon doesn't show up in the Add Node menu and the Editor UI
- Check that the icon is in the same folder as the node.
- Check that it's either in PNG or SVG format.
- When the `icon` property references the icon file, check that it includes the logo extension ( `.png` or `.svg`) and that it prefixes it with `file:`. For example, `file:friendGrid.png` or `file:friendGrid.svg`.

### Node icon doesn't fit
- If you use an SVG file, make sure the canvas size is square. 
- If you use a PNG file, make sure that it's 60x60 pixels.

### Node doesn't show up in the Add Node menu
Check that you registered the node in the `package.json` file in your project.

### Changes to the description properties don't show in the UI on refreshing
Every time you change the description properties, you have to stop the current n8n process ( `ctrl` + `c`) and run it again. You may also need to re-run `npm link`.

### Linter incorrectly warning about file name case
The node linter has rules for file names, including what case they should be. Windows users may encounter an issue when renaming files that causes the linter to continue giving warnings, even after you rename the files.

----------------------------------------

# Custom API Operations

## Overview
n8n supports custom API calls for existing nodes using the HTTP Request node, facilitating operations not covered by built-in nodes.

## Credential Types
1. **Custom Operations**: Use HTTP Request node for API calls when built-in options are insufficient.
2. **Credential-Only Nodes**: Integrations that allow setting up credentials for HTTP Request node without a dedicated node.

## Predefined Credential Types
Predefined credentials allow users to utilize existing credentials in the HTTP Request node without the need for additional authentication.

### Using Predefined Credential Types
1. Open HTTP Request node or add a new one.
2. In **Authentication**, select **Predefined Credential Type**.
3. Choose the desired **Credential Type**.
4. In **Credential for `<API name>`**:
   - Select an existing credential or choose **Create New**.

## Credential Scopes
Certain credential types have specific scopes for endpoints. n8n will notify users about these scopes upon selection.

### Example
Selecting the **Google Calendar OAuth2 API** will display specific endpoints available for that credential.

----------------------------------------

# Keyboard Shortcuts

n8n provides keyboard shortcuts for various actions.

## Workflow Controls

- **Ctrl** + **Alt** + **n**: Create new workflow
- **Ctrl** + **o**: Open workflow
- **Ctrl** + **s**: Save the current workflow
- **Ctrl** + **z**: Undo
- **Ctrl** + **shift** + **z**: Redo
- **Ctrl** + **Enter**: Execute workflow

## Canvas

### Move the Canvas

- **Ctrl** + **Left Mouse Button** + drag: Move node view
- **Ctrl** + **Middle Mouse Button** + drag: Move node view
- **Space** + drag: Move node view
- **Middle Mouse Button** + drag: Move node view
- Two fingers on a touchscreen: Move node view

### Canvas Zoom

- **+** or **=**: Zoom in
- **-** or **_**: Zoom out
- **0**: Reset zoom level
- **1**: Zoom to fit workflow
- **Ctrl** + **Mouse wheel**: Zoom in/out

### Nodes on the Canvas

- **Double click** on a node: Open the node details
- **Ctrl/Cmd** + **Double click** on a sub-workflow node: Open the sub-workflow in a new tab
- **Ctrl** + **a**: Select all nodes
- **Ctrl** + **v**: Paste nodes
- **Shift** + **s**: Add sticky note

### With One or More Nodes Selected in Canvas

- **ArrowDown**: Select sibling node below the current one
- **ArrowLeft**: Select node left of the current one
- **ArrowRight**: Select node right of the current one
- **ArrowUp**: Select sibling node above the current one
- **Ctrl** + **c**: Copy
- **Ctrl** + **x**: Cut
- **D**: Deactivate
- **Delete**: Delete
- **Enter**: Open
- **F2**: Rename
- **P**: Pin data in node. Refer to Data pinning for more information.
- **Shift** + **ArrowLeft**: Select all nodes left of the current one
- **Shift** + **ArrowRight**: Select all nodes right of the current one
- **Ctrl/Cmd** + **Shift** + **o** on a sub-workflow node: Open the sub-workflow in a new tab

## Node Panel

- **Tab**: Open the Node Panel
- **Enter**: Insert selected node into workflow
- **Escape**: Close Node panel

### Node Panel Categories

- **Enter**: Insert node into workflow, collapse/expand category, open subcategory
- **ArrowRight**: Expand category, open subcategory
- **ArrowLeft**: Collapse category, close subcategory view

## Within Nodes

- **=**: In an empty parameter input, this switches to expressions mode.

----------------------------------------

# Learning Path

## Set Up Your n8n

1. Sign up for a free trial on n8n Cloud or install n8n's community edition with:
   - Docker: Refer to [Docker Installation](https://docs.n8n.io/hosting/installation/docker/)
   - npm: Refer to [npm Installation](https://docs.n8n.io/hosting/installation/npm/)
   
2. For further details, see [Choose Your n8n](https://docs.n8n.io/choose-n8n/).

## Try It Out

Start with the quickstart guides to help you get up and running:
- [A very quick quickstart](https://docs.n8n.io/try-it-out/quickstart/)
- [A longer introduction](https://docs.n8n.io/try-it-out/tutorial-first-workflow/)
- [Build an AI workflow in n8n](https://docs.n8n.io/advanced-ai/intro-tutorial/)

## Self-hosting n8n

Explore various self-hosting options in n8n. Two popular options:
- [Hosting n8n on DigitalOcean](https://docs.n8n.io/hosting/installation/server-setups/digital-ocean/)
- [Hosting n8n on Amazon Web Services](https://docs.n8n.io/hosting/installation/server-setups/aws/)

## Build a Node

If a node for a specific app or service is not available, you can build one:
- [Build a declarative-style node](https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/)
- [Learn how to build your own n8n nodes (YouTube Video)](https://www.youtube.com/live/OI6zHJ56eW0?si=SMD7L1J5fZ2mf79W)

## Stay Updated

- Follow new features and bug fixes in the [Release Notes](https://docs.n8n.io/release-notes/).

----------------------------------------

# License Key

## Activation Methods

### Add a License Key Using the UI
1. Log in as **Admin** or **Owner**.
2. Select **Settings** > **Usage and plan**.
3. Select **Enter activation key**.
4. Paste in your license key.
5. Select **Activate**.

### Add a License Key Using Environment Variables
Set `N8N_LICENSE_ACTIVATION_KEY` to your license key in your n8n configuration. If an instance already has an activated license, this variable will have no effect.

Refer to Environment variables for more information on configuring n8n.

## Allowlist License Server IP Addresses
n8n uses Cloudflare to host the license server. Allowlist the full range of Cloudflare IP addresses to ensure n8n can reach the license server. For details, consult the [Cloudflare IP addresses](https://www.cloudflare.com/ips/).

----------------------------------------

# Log Streaming

Log streaming allows you to send events from n8n to your own logging tools for effective monitoring.

## Set Up Log Streaming

1. Navigate to **Settings** > **Log Streaming**.
2. Select **Add new destination**.
3. Choose your destination type. n8n opens the **New Event Destination** modal.
4. In the **New Event Destination** modal, enter the configuration information for your event destination.
5. Select **Events** to choose which events to stream.
6. Select **Save**.

### Self-Hosted Users

Configure additional log streaming behavior using [Environment Variables](https://docs.n8n.io/hosting/configuration/environment-variables/logs/#log-streaming).

## Events

The following events are available to stream in **Settings** > **Log Streaming** > **Events**:

- **Workflow**
  - Started
  - Success
  - Failed
- **Node Executions**
  - Started
  - Finished
- **Audit**
  - User signed up
  - User updated
  - User deleted
  - User invited
  - User invitation accepted
  - User re-invited
  - User email failed
  - User reset requested
  - User reset
  - User credentials created
  - User credentials shared
  - User credentials updated
  - User credentials deleted
  - User API created
  - User API deleted
  - Package installed
  - Package updated
  - Package deleted
  - Workflow created
  - Workflow deleted
  - Workflow updated
- **AI Node Logs**
  - Memory get messages
  - Memory added message
  - Output parser get instructions
  - Output parser parsed
  - Retriever get relevant documents
  - Embeddings embedded document
  - Embeddings embedded query
  - Document processed
  - Text splitter split
  - Tool called
  - Vector store searched
  - LLM generated
  - Vector store populated

## Destinations

n8n supports three destination types:

- A syslog server
- A generic webhook
- A Sentry client

----------------------------------------

# AI Assistant

## Current Capabilities

- **Debug Helper**: Identify and troubleshoot node execution issues in workflows.
- **Answer n8n Questions**: Get instant answers regarding n8n features and functionality.
- **Coding Support**: Guidance on coding (SQL, JSON) to optimize nodes and data processing.
- **Expression Assistance**: Create and refine expressions to enhance workflows.
- **Credential Setup Tips**: Securely manage and set up node credentials.

## Tips for Getting the Most Out of the Assistant

1. **Engage in a Conversation**: Provide context for better recommendations.
2. **Ask Specific Questions**: Focus on clear, specific questions (e.g., "How do I set up credentials for Google Sheets?").
3. **Iterate on Suggestions**: Build on the assistant's feedback to refine solutions.
4. **Things to Try Out**:
   - Debug any error you're seeing.
   - Ask how to setup credentials.
   - "Explain what this workflow does."
   - "I need your help to write code: [Explain your code here]."
   - "How can I build X in n8n?"

## FAQs

### What Context Does the Assistant Have?

The AI Assistant has access to all elements displayed on your n8n screen, excluding actual input and output data values.

### Who Can Use the Assistant?

Any user on a Cloud plan can use the assistant.

### How Does the Assistant Work?

The assistant is built with advanced AI capabilities of n8n using a combination of different agents, RAG for knowledge gathering, and utilizing memory and context features.

----------------------------------------

# Change Ownership or Username

## Change Instance Ownership

To change the ownership of an instance:

1. Navigate to the **Settings** page in the owner's account.
2. Edit the **Email** field.
3. Scroll down and press **Save**.

**Note:** The new email address must not be linked to any other n8n account. Changing emails updates the instance owner, login email, and email for invoices and communications. If the workspace is deactivated, the **Settings** page will not be accessible, and the email address or ownership cannot be changed.

## Change Instance Username

Changing usernames is currently not possible. To have a different name for the instance, create a new account and transfer work to it. Refer to the [import/export documentation](https://docs.n8n.io/workflows/export-import/) for steps on transferring your work to a new n8n instance.

----------------------------------------

# Cloud Admin Dashboard

Instance owners can access the admin dashboard to manage their Cloud instance. This includes upgrading the n8n version and setting the timezone.

## Accessing the Dashboard

### From the App
1. Log in to n8n [here](https://app.n8n.cloud/magic-link).
2. Select **Admin Dashboard** to open the dashboard.

### If the App is Offline
If your instance is down, you can still access the admin dashboard:
1. When you log in to the app, n8n will prompt you to receive a magic link.
2. Select **Send magic link** and check your email for the link.

----------------------------------------

# Cloud Data Management

## Memory Usage Concerns
- Complex workflows processing large amounts of data can exceed n8n's memory limits, leading to crashes.
- n8n database can grow and run out of storage based on execution settings and volume.

## Memory Limits on Each Cloud Plan
- **Trial:** 320MiB RAM, 10 millicore CPU burstable
- **Starter:** 320MiB RAM, 10 millicore CPU burstable
- **Pro-1 (10k executions):** 640MiB RAM, 20 millicore CPU burstable
- **Pro-2 (50k executions):** 1280MiB RAM, 80 millicore CPU burstable
- **Enterprise:** 4096MiB RAM, 80 millicore CPU burstable

**Legacy Plans:**
- **Start:** 320MiB RAM, 10 millicore CPU burstable
- **Power:** 1280MiB RAM, 80 millicore CPU burstable

- Each instance has up to 100GB of data storage.

## Best Practices to Reduce Memory Consumption
- Split data into smaller chunks (e.g., process 200 rows at a time instead of 10,000).
- Avoid using the Code node where possible.
- Minimize manual executions with larger datasets.
- Use sub-workflows that return limited data to the parent workflow.

**Node Recommendations:**
- [Loop Over Items](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/) to divide items into smaller batches.
- [Execute Workflow](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/) to initiate sub-workflows.

## Managing Execution Data on Cloud
- Execution data includes node data, parameters, variables, execution context, and binary data references.
- Binary data cannot be represented as plain text; includes files and media.

### Controlling Execution Data Storage
1. **In Admin Dashboard:**
   - Navigate to **Admin Panel** > **Manage**.
   - Adjust **Executions to Save** to deselect unwanted logs.

2. **In Workflow Settings:**
   - Access **Options** menu > **Settings**.
   - Set **Save successful production executions** to **Do not save**.

## Cloud Data Pruning and Memory Incident Prevention

### Automatic Data Pruning
- n8n prunes execution logs based on time limits or max storage limits:
  - **Start and Starter Plans:** max 2500 executions, 7 days retention.
  - **Pro and Power Plans:** max 25000 executions, 30 days retention.
  - **Enterprise Plan:** max 50000 executions, unlimited retention.

### Manual Data Pruning
- n8n manually prunes data if storage limits are exceeded:
  1. Alerts triggered at 85% disk capacity.
  2. Backup and restoration process to preserve workflows, users, and credentials, excluding execution data.

----------------------------------------

# Cloud Free Trial

## Trial Features
- Duration: 14 days
- Features included:
  - Global variables
  - Insights dashboard
  - Execution search
  - 5 days workflow history for rollback
- Limits: 1000 executions, 5 active workflows, equivalent computing power as the Starter plan

## Upgrade to a Paid Account
1. Log in to your account.
2. Click the **Upgrade** button.
3. Select your plan (annual or monthly payment).
4. Choose a payment method.

## Trial Expiration
- If you do not upgrade by the trial's end, the account will expire and the workspace will be deleted.
- You can [download your workflows](https://docs.n8n.io/manage-cloud/download-workflows/) within 90 days post-expiration.

## Cancelling Your Trial
- No need to cancel; it will expire automatically, and data will be deleted.

## Enterprise Trial
- To test the Enterprise plan, contact the sales team.
- Features available:
  - SSO SAML and LDAP
  - Different environments
  - External secret store integration
  - Log streaming
  - Version control using Git

----------------------------------------

# Cloud IP Addresses

n8n cannot guarantee static source IPs due to the dynamic nature of the cloud provider environment. Use strong authentication and secure transport protocols for connections.

## Outbound Traffic IP Addresses

Outbound traffic may appear to originate from any of the following IP addresses:

- 20.79.227.226/32
- 20.113.47.122/32
- 20.218.202.73/32
- 98.67.233.91/32
- 4.182.111.50/32
- 4.182.129.20/32
- 4.182.88.118/32
- 4.182.212.136/32
- 98.67.244.108/32
- 72.144.128.145/32
- 72.144.83.147/32
- 72.144.69.38/32
- 72.144.111.50/32
- 4.182.128.108/32
- 4.182.190.144/32
- 4.182.191.184/32
- 98.67.233.200/32
- 20.52.126.0/28
- 20.218.238.112/28
- 4.182.64.64/28
- 20.218.174.0/28
- 4.184.78.240/28
- 20.79.32.32/28
- 51.116.119.64/28

----------------------------------------

# Cloud Concurrency in n8n

## Concurrency Limits

n8n sets concurrency limits for Cloud instances based on the plan:

- **Starter and Trial**: 5
- **Pro (10k workflow executions, 15 active workflows)**: 20
- **Pro (50k workflow executions, 50 active workflows)**: 50
- **Enterprise (in regular mode)**: 200

The number of active executions and the concurrency limit can be viewed in a project's or workflow's executions tab.

## Details

Key points regarding concurrency:

- Concurrency control applies only to production executions (initiated from a webhook or trigger node). 
- Manual executions, sub-workflow executions, or error executions do not count towards the concurrency limits.
- Test evaluations do not count towards concurrency limits; they have a separate testing concurrency limit.
- Queued executions cannot be retried or canceled without removal from the queue.
- On instance startup, n8n resumes queued executions up to the concurrency limit and re-enqueues any excess.

## Comparison to Queue Mode

Queue mode is available for Cloud Enterprise plans. To enable it, contact n8n. In queue mode, concurrency settings determine how many jobs each worker can run in parallel, while in regular mode, limits apply to the entire instance.

----------------------------------------

# Download Workflows

n8n Cloud instance owners can download workflows from the most recent backup using the Cloud admin dashboard.

## How to Download Workflows

1. Log in to n8n.
2. Select **Admin Dashboard** to open the dashboard.
3. In the **Manage** section, select the **Export** tab.
4. Select **Download Workflows**.

## Accessing Workflows After Your Free Trial

You have **90 days** to download your workflows after your free trial ends. After that, all workflows will be **permanently deleted** and are unrecoverable.

----------------------------------------

# n8n Cloud 

n8n Cloud is n8n's hosted solution. It provides:

- No technical setup or maintenance for your n8n instance
- Continual uptime monitoring
- Managed OAuth for authentication
- One-click upgrades to the newest n8n versions

**Note:** n8n Cloud isn't available in Russia and Belarus.

----------------------------------------

# Set the Cloud Instance Timezone

You can change the timezone for your n8n instance, which affects the Schedule Trigger and Date & Time node. Users can configure the timezone for individual workflows in Workflow settings.

## Steps to Change Timezone

1. On your dashboard, select **Manage**.
2. Change the **Timezone** dropdown to the timezone you want.

----------------------------------------

# Update your n8n Cloud Version

## Overview
n8n recommends regularly updating your Cloud version. Only instance owners can upgrade n8n Cloud versions.

## Steps to Update
1. Log in to the [n8n Cloud dashboard](https://app.n8n.cloud/manage).
2. Select **Manage** on your dashboard.
3. Use the **n8n version** dropdown to select your preferred release version:
   - **Latest Stable**: recommended for most users.
   - **Latest Beta**: newest n8n (may be unstable).
4. Select **Save Changes** to restart your n8n instance and perform the update.
5. In the confirmation modal, select **Confirm**.

## Best Practices for Updating
- Update frequently to avoid multiple versions at once; aim to update at least once a month.
- Check the [Release notes](https://docs.n8n.io/release-notes/) for breaking changes.
- Use [Environments](https://docs.n8n.io/source-control-environments/) to create a test version of your instance and test the update there first.

## Automatic Updates
n8n automatically updates outdated Cloud instances. If you do not update your instance for 120 days, n8n will email you to warn you to update. After a further 30 days, n8n automatically updates your instance.

----------------------------------------

# n8n Privacy and Security

## Privacy
Overview of key policies and procedures regarding data privacy management at n8n.

## Security
Procedures and practices for ensuring the security of data within n8n.

## Incident Response
Outline the approach and steps taken during a security incident.

## User Actions
Guidelines on what users can do to enhance their own data security and privacy while using n8n.

----------------------------------------

# Incident Response

n8n implements incident response best practices for identifying, documenting, resolving, and communicating incidents.

## Notifications

- n8n publishes incident notifications to a status page at [n8n Status](https://status.n8n.cloud/).
- n8n notifies customers of any data breaches according to the company's [Data Processing Addendum](https://n8n.io/legal/#data).

----------------------------------------

# Privacy

## GDPR

### Data processing agreement
For Cloud versions of n8n, n8n is both a Controller and a Processor as defined by the GDPR. The n8n Data Processing Agreement includes the Standard Contractual Clauses (SCCs) which outline data handling procedures. 

Self-hosted n8n is neither a Controller nor a Processor since user data is not managed.

### Submitting a GDPR deletion request
Email `privacy@n8n.io` to request data deletion.

### Sub-processors
List of sub-processors authorized to process customer data:

| Sub-processor name | Contact details | Geographic location of processing |
| --- | --- | --- |
| Microsoft Azure | [Microsoft Azure Privacy Statement](https://privacy.microsoft.com/en-GB/privacystatement#mainhowtocontactusmodule) | Germany (West Central Region) |
| Hetzner Online | data-protection@hetzner.com | Germany |

### GDPR for self-hosted users
Self-hosted users are responsible for deleting user data. Configure n8n to prune execution data using the `EXECUTIONS_DATA_MAX_AGE` environment variable.

## Data collection 

n8n collects selected usage and performance data to diagnose problems and improve the platform.

### Data collection in self-hosted n8n
**What n8n collects:**
- Error codes and messages of failed executions (excluding payload data)
- Error reports for app crashes and API issues
- Workflow graph (types of nodes and connections)
- From node parameters:
  - 'resource' and 'operation' (if applicable)
  - Domain, path, and method for HTTP request nodes (anonymized)
- Workflow executions data:
  - Status and user ID of the user who ran the execution
  - First workflow load from an external source
  - First successful production workflow execution
- Domain of webhook calls (excluding subdomain)
- UI usage details (e.g., navigation, node searches)
- Diagnostic information:
  - n8n version, selected settings
  - OS, RAM, CPUs
  - Anonymous instance ID
- IP address

**What n8n doesn't collect:**
- Personally identifiable information (except IP address)
- Credential information
- Node parameters (except 'resource' and 'operation')
- Execution data
- Sensitive settings

**How collection works:**
Data is sent as events occur; workflow execution counts and instance pulses are sent every 6 hours.

### Opting out of telemetry
To disable telemetry events, set the following environment variable:
```bash
export N8N_DIAGNOSTICS_ENABLED=false
```
To disable version checks:
```bash
export N8N_VERSION_NOTIFICATIONS_ENABLED=false
```
To disable templates feature:
```bash
export N8N_TEMPLATES_ENABLED=false
```

### Data collection in n8n Cloud
Collects everything listed in self-hosted n8n, plus tracks events and visualizes usage using PostHog. Session recordings are kept for 21 days.

### AI in n8n
n8n integrates AI-powered features that use Large Language Models (LLMs). Specific context data is sent to LLMs without sharing credential values. Data is deleted after 30 days.

### Documentation telemetry
Uses cookies to recognize repeated visits and preferences.

## Retention and deletion of personal identifiable data

### n8n Cloud
n8n retains data to provide services, storing workflow code, credentials, and other data indefinitely. Most internal logs are deleted within 90 days.

### Self-hosted
Users should have their own PID policy and data deletion processes.

## Payment processor
n8n uses Paddle.com to process payments, storing no payment method information.

----------------------------------------

# Security Best Practices for n8n Users

## All Users
- Report security issues and terms of service violations to security@n8n.io.
- For instances used by multiple users, implement User Management and follow Best Practices.
- Use OAuth for integrations whenever feasible.

## Self-Hosted Users
- Set up a reverse proxy to handle TLS for encrypted data transmission.
- Ensure data encryption at rest with encrypted partitions or hardware-level encryption.
- Conduct a Security audit.
- Acknowledge Risks associated with community node installations or disable them.
- Prevent users from importing external modules in the Code node. Refer to Environment Variables for more information.
- Exclude specific nodes like Execute Command or SSH. Refer to Environment Variables for more information.
- For enhanced privacy, consider isolating the n8n instance.

### GDPR for Self-Hosted Users
- Self-hosted users are responsible for user data deletion. To delete data on a user’s behalf, delete the corresponding execution.
- Configure n8n to automatically prune execution data using the `EXECUTIONS_DATA_MAX_AGE` environment variable. Refer to Environment Variables for more information.

----------------------------------------

# Release Notes

## Latest and Next Versions
- **Current Latest**: 1.98.2
- **Current Next**: 1.99.1

## How to Update n8n
- **Cloud**: Refer to the [Cloud update documentation](https://docs.n8n.io/manage-cloud/update-cloud-version/).
- **Self-hosted**: 
  - **npm**: [Installation via npm](https://docs.n8n.io/hosting/installation/npm/).
  - **Docker**: [Installation via Docker](https://docs.n8n.io/hosting/installation/docker/).

## Semantic Versioning
n8n follows semantic versioning:
- **MAJOR**: Incompatible changes requiring user action.
- **MINOR**: Backward-compatible functionality.
- **PATCH**: Backward-compatible bug fixes.

## Version Details

### n8n@1.99.1
- **Release Date**: 2025-06-19
- **Changes**: Contains bug fixes.

### n8n@1.98.2
- **Release Date**: 2025-06-18
- **Changes**: Contains bug fixes.

### n8n@1.98.1
- **Release Date**: 2025-06-12
- **Changes**: Contains bug fixes.

### n8n@1.98.0
- **Release Date**: 2025-06-11
- **Changes**: Performance improvements and bug fixes.

### n8n@1.97.1
- **Release Date**: 2025-06-04
- **Changes**: Contains backports.

### n8n@1.95.3
- **Release Date**: 2025-06-03
- **Changes**: Contains bug fixes.

### n8n@1.97.0
- **Release Date**: 2025-06-02
- **Changes**: New features, performance improvements, and bug fixes.

### Convert to Sub-workflow
A new feature that allows converting nodes into sub-workflows, improving workflow modularity. To use:
1. Highlight connected nodes.
2. Right-click and select "**Convert to sub-workflow**" or press `Alt + X`.
3. Adjust field types in the new sub-workflow.

### API Support
- **Assign Users to Projects**: API updates now allow assigning and updating user roles within projects, as well as removing users.
- **Add Pending Users**: Now allows addition of users who have been invited but haven't signed up.

### Evaluation Node
The **Evaluation node** allows:
- Running AI logic against test cases.
- Scoring results using custom metrics.

### Extended Logs View
Improvements include:
- Hierarchical view showing node execution status.
- Ability to toggle input and output data.
- Integration of real-time execution monitoring for efficiency.

### Project and Role Management
- Projects can group workflows and credentials, enhancing team collaboration while ensuring security.

## General Notes
- Ensure to back up your workflows before performing updates especially when significant changes are involved.
- For full details on each release and updates, refer to the [release notes repository](https://github.com/n8n-io/n8n/releases).

----------------------------------------

# Release Notes Pre 1.0

## Latest and Next Versions
- **Current latest:** 1.98.2
- **Current next:** 1.99.1

## How to Update n8n
Update steps depend on the n8n platform:
- [Cloud](https://docs.n8n.io/manage-cloud/update-cloud-version/)
- Self-hosted options:
  - [npm](https://docs.n8n.io/hosting/installation/npm/)
  - [Docker](https://docs.n8n.io/hosting/installation/docker/)

## Semantic Versioning in n8n
- **MAJOR** version: incompatible changes that require user action.
- **MINOR** version: functionality added in a backward-compatible manner.
- **PATCH** version: backward-compatible bug fixes.

## n8n Release Versions
### n8n@0.237.0
- **Release date:** 2023-08-17
- Bug fix release.

### n8n@0.236.3
- **Release date:** 2023-07-18
- Bug fix release.

### n8n@0.236.2
- **Release date:** 2023-07-14
- Bug fix release.

### n8n@0.236.1
- **Release date:** 2023-07-12
- Bug fix release.

### n8n@0.236.0
- **Release date:** 2023-07-05
- New nodes, enhancements, and bug fixes.
- **New Nodes:**
  - crowd.dev 
    - Tool to analyze engagement with open source projects.
  - [crowd.dev node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.crowddev/).

### n8n@0.234.1
- **Release date:** 2023-07-05
- Bug fix release.

### n8n@0.235.0
- **Release date:** 2023-06-28
- Contains new features, new nodes, enhancements, and bug fixes.

### n8n@0.234.0
- **Release date:** 2023-06-22
- Contains new features, new nodes, enhancements, and bug fixes.

### n8n@0.233.0
- **Release date:** 2023-06-14
- Bug fix release.

### n8n@0.233.1
- **Release date:** 2023-06-19
- Bug fix release.

### n8n@0.232.0
- **Release date:** 2023-06-07
- Contains features, node enhancements, and bug fixes.

### n8n@0.231.0
- **Release date:** 2023-05-31
- Contains new features and bug fixes.

### n8n@0.230.0
- **Release date:** 2023-05-24
- Contains new features, enhancements, and bug fixes.

### Configuration Instructions
- **New Nodes:**
  - Execution Data
    - Save metadata for workflow executions, search by metadata.
    - [Execution Data node documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executiondata/).
  - LDAP
    - Interact with LDAP servers.
    - [LDAP node documentation](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.ldap/).
  - LoneScale
    - Integrates with LoneScale data platform.
    - [LoneScale node documentation](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.lonescale/).
  
### Best Practices
- When using the Debug Helper node, ensure to set conditions that allow for meaningful testing rather than relying on the default random datasets.

## n8n Workflow Patterns
- Utilize crowd.dev to gather analytics on user engagement efficiently.
- Implement Debug Helper to streamline troubleshooting and improve workflow reliability.

----------------------------------------

# Technical Documentation Extraction

No technical content available. The provided text does not contain any core concepts, node & parameter details, code examples, API documentation, configuration instructions, best practices, or workflow patterns.

----------------------------------------

# Source Control and Environments

## Feature Availability
- Available on Enterprise.
- Instance owners or instance admins can enable and configure source control.
- Instance owners and instance admins can push and pull changes from the connected repository.
- Project admins can push changes to the connected repository but cannot pull changes.

## Core Concept
n8n uses Git-based source control to support multiple environments linked to Git branches.

## Technical Topics

### 1. Understanding Environments in n8n
- Purpose and operation of environments in n8n.

### 2. Git and n8n
- Explanation of how n8n integrates with Git.

### 3. Branch Patterns
- Relationships between n8n instances and Git branches.

### 4. Setup Source Control for Environments
- Instructions on connecting n8n instances to Git.

### 5. Using Source Control
#### Push and Pull
- Steps to send work to Git and fetch work from Git to your instance.
  
#### Copy Work Between Environments
- Method for transferring work between different n8n instances.

### 6. Tutorial: Create Environments with Source Control
- Step-by-step guide for setting up environments using recommended configurations.

## Related Sections
- [Variables](https://docs.n8n.io/code/variables/): Reusable values.
- [External Secrets](https://docs.n8n.io/external-secrets/): Credential management with external secrets vault.

----------------------------------------

# Tutorial: Create environments with source control

## Feature Availability
- Available on Enterprise.
- Instance owner or instance admin required for enabling and configuring source control.
- Project admins can push changes to the connected repository but cannot pull changes.

## Core Concepts
- n8n's environments feature is built on Git.
- Link an n8n instance to a Git branch using a push-pull pattern.
- Understand environments and Git before proceeding.

## Source Control Patterns
- Choose between:
  - Multi-instance, multi-branch
  - Multi-instance, single-branch
- **Recommendation:** Avoid pushing and pulling to the same n8n instance to reduce merge conflicts.

### Multiple Instances, Multiple Branches
- Advantages:
  - Added safety for production environment changes (requires a pull request).
  - Supports more than two instances.
  
- Disadvantages:
  - More manual steps to copy work.

### Multiple Instances, One Branch
- Advantages:
  - Instant availability of work to other environments upon push.
  
- Disadvantages:
  - Risk of accidental pushes to production.
  - Potential data loss from conflicting pushes and pulls.

## Set Up Your Repository
1. **Create a new private repository on GitHub.**
   - Include a README to initiate branches.
2. **Create branches:**
   - `production`
   - `development`

## Connect n8n Instances to Repository
### Configure Git in n8n
1. Go to **Settings** > **Environments**.
2. Enter the **Git repository URL** (SSH URL).
3. Select SSH key type (ED25519 is default; select RSA if required).
4. Copy the SSH key.

### Set Up a Deploy Key
- Create a deploy key for the repository using the copied SSH key with write access.

### Connect n8n and Configure Your Instance
1. In **Settings** > **Environments**, select **Connect**.
2. Choose the branch for the respective n8n instance:
   - Production: Connect to production branch.
   - Development: Connect to development branch.
3. For production instance, enable **Protected instance**.
4. Select **Save settings**.

## Push Work from Development
1. Create workflows, tags, variables, and credentials in the development instance.
2. Select **Push** in the main menu.
3. In the **Commit and push changes** modal:
   - Filter by workflow status, select items to push.
   - Enter a commit message.
4. Select **Commit and Push**.

## Pull Work to Production
1. Create a pull request on GitHub to merge development into production.
2. Merge the pull request.
3. In the production instance, select **Pull** in the main menu.

### Optional: Use a GitHub Action to Automate Pulls
- Use a GitHub Action to automate pulling changes into your production instance.

**Example GitHub Action:**
```yaml
name: CI
on:
  push:
    branches: [ "production" ]
  workflow_dispatch:
jobs:
  run-pull:
    runs-on: ubuntu-latest
    steps:
      - name: PULL
        run: >
          curl --location '${{ secrets.INSTANCE_URL }}/version-control/pull' --header
          'Content-Type: application/json' --header 'X-N8N-API-KEY: ${{ secrets.INSTANCE_API_KEY }}'
```

## Next Steps
- Learn more about:
  - [Environments in n8n](https://docs.n8n.io/source-control-environments/understand/environments/)
  - [Git and n8n](https://docs.n8n.io/source-control-environments/understand/git/)
  - [Source control patterns](https://docs.n8n.io/source-control-environments/understand/patterns/)

----------------------------------------

# Set up source control for environments

Link a Git repository to an n8n instance and configure your source control. n8n uses source control to provide environments.

## Prerequisites

- A Git repository that allows SSH access.
- Familiarity with Git and your Git provider.

## Step 1: Set up your repository and branches

1. Create a new repository for use with n8n.
2. Create necessary branches (e.g., branches for test and production environments).

## Step 2: Configure Git in n8n

1. Go to **Settings** > **Environments**.
2. In **Git repository URL**, enter the SSH URL for your repository.
3. n8n supports ED25519 and RSA public key algorithms. ED25519 is the default; select **RSA** if your git host requires RSA.
4. Copy the SSH key.

## Step 3: Set up a deploy key

Create a deploy key for the repository using the SSH key from n8n. The key must have write access. Refer to your Git provider's documentation for specific steps:
- GitHub: Managing deploy keys
- GitLab: Deploy keys

## Step 4: Connect n8n and configure your instance

1. In **Settings** > **Environments** in n8n, select **Connect** to connect to your Git repository.
2. Under **Instance settings**, choose the branch for the current n8n instance.
3. **Optional**: Select **Protected instance** to prevent users from editing workflows.
4. **Optional**: Choose a custom color for the instance for visibility in the menu.
5. Select **Save settings**.

----------------------------------------

# Source Control and Environments in n8n

## Feature Availability
- Available on Enterprise.
- Instance owners or admins can enable and configure source control.
- Instance owners and admins can push and pull changes from the connected repository.
- Project admins can push changes only.

## Core Concepts
### Environments in n8n
- Purpose and functionality of environments within n8n.

### Git in n8n
- Overview of how n8n integrates and utilizes Git.

### Branch Patterns
- Describes the relationships between n8n instances and Git branches.

----------------------------------------

# Environments in n8n

## Core Concepts

- **Environment**: In software development, an environment is the infrastructure and tooling around the code used to run the software. 

- **n8n Environment**: Comprises an n8n instance and a Git branch:
  - **n8n Instance**: The platform where workflows are built and run.
  - **Git Branch**: Stores workflow copies, tags, and variable and credential stubs.

## Environment Configurations

- n8n environments support multiple instances and branches:
  - **Multiple instances, one branch**: Push changes from one instance to the Git branch and pull to another instance.
  - **Multiple instances, multiple branches**: Create a pull request to merge changes from one branch to another (e.g., merging development to test).

## Configuration Instructions

- **Credential and Variable Setup**: Credentials and variable values must be set up manually in new instances, as n8n does not sync them with Git.

## Documentation References

- For information on what gets committed, refer to: [Push and pull | What gets committed](https://docs.n8n.io/source-control-environments/using/push-pull/#what-gets-committed).
- To learn how to link your n8n instance to Git, see: [Set up source control](https://docs.n8n.io/source-control-environments/setup/).
- For a tutorial on creating environments with source control, refer to: [Tutorial: Create environments with source control](https://docs.n8n.io/source-control-environments/create-environments/).

----------------------------------------

## Git and n8n

n8n uses Git for source control but does not implement all Git functionality. Basic Git knowledge is necessary to set up source control.

### Git Overview

Git is a tool for managing, tracking, and collaborating on multiple versions of documents.

### Branches

- Git maintains multiple copies of a project using branches.
- Each branch has its own version.
- Common practice involves a main branch with contributors working on their own branches, later merged back to the main branch.

### Local and Remote

- Install Git on your local machine and use a Git provider (e.g., GitHub) for cloud operations.
- n8n works with workflows on your instance and sends them to the Git provider for storage.

### Key Git Processes in n8n

- **Push**: Send workflows and related items from n8n to Git.
- **Pull**: Retrieve workflows and variables from Git into n8n. This will overwrite any unsaved changes.
- **Commit**: A commit in n8n happens simultaneously with a push to Git.

Refer to the related documentation for detailed information on pushing and pulling workflows.

----------------------------------------

# Branch Patterns

## Core Concepts
The relationship between n8n instances and Git branches allows for various setups. A recommended practice is to not push and pull to the same n8n instance to minimize the risk of merge conflicts. Instead, establish a one-direction flow of work: either to Git or from Git, but not both simultaneously.

## Multiple Instances, Multiple Branches
This pattern entails multiple n8n instances, each linked to its own branch. For instance, you could create development and production instances, each corresponding to separate branches. Work is pushed from development to its branch, and a pull request is made to move work to the production branch before pulling it into the production instance.

### Advantages
- Prevents accidental changes to the production environment through mandatory pull requests.
- Supports more than two instances.

### Disadvantages
- Requires more manual steps to copy work between environments.

## Multiple Instances, One Branch
This pattern applies when you want uniform workflows, tags, and variables across different n8n instances linked to the same branch.

### Use Case
Create a development and a production instance linked to the same branch to push work from development and pull it into production. This is beneficial for testing new versions of n8n by creating an instance connected to the Git branch without affecting the production version until it's validated.

### Advantages
- Instant availability of pushed work across environments.

### Disadvantages
- Risk of unintended production updates if pushed by mistake.
- Potential data loss due to overrides when pushing and pulling to the same instance.

## One Instance, Multiple Branches
In this pattern, the instance owner can switch between branches as needed, which is primarily useful for reviewing work from different users pushing to their branches.

### Note
n8n does not clear the contents of an instance when changing branches; workflows from all branches will coexist.

## One Instance, One Branch
This is the simplest pattern where a single n8n instance is connected to one branch. 

### Summary
Different branch patterns offer varied levels of safety, complexity, and workflow management capabilities, and users should choose based on their specific operational needs.

----------------------------------------

# Using Source Control and Environments

## Feature Availability
- Available on Enterprise.
- Instance owners and instance admins can enable and configure source control.
- Instance owners and instance admins can push and pull changes to/from the connected repository.
- Project admins can push changes to the connected repository but cannot pull changes.

## Operations
### Push and Pull
- **Description**: Send work to Git and fetch work from Git to your instance.
- Understand what gets committed and how n8n handles merge conflicts.

### Copy Work Between Environments
- **Description**: Instructions on how to copy work between different n8n instances.

----------------------------------------

# Copy work between environments

## Single branch

To copy work using a single Git branch:

1. Push work from one instance to the Git branch.
2. Log in to the other instance to pull the work from Git.

## Multiple branches

To copy work using multiple Git branches, merge the branches in your Git provider. The common pattern is:

1. Do work in your development instance.
2. Push the work to the development branch in Git.
3. Merge your development branch into your production branch. Refer to your Git provider documentation for guidance on merging:
   - GitHub: Creating a pull request
   - GitLab: Creating merge requests
   - Git: Basic branching and merging
4. In your production n8n instance, pull the changes.

## Automatically send changes to n8n

You can automate the process of copying work using the `/source-control/pull` API endpoint. Call the API after merging the changes:

```bash
curl --request POST \
    --location '<YOUR-INSTANCE-URL>/api/v1/source-control/pull' \
    --header 'Content-Type: application/json' \
    --header 'X-N8N-API-KEY: <YOUR-API-KEY>' \
    --data '{"force": true}'
```

Use a GitHub Action or GitLab CI/CD to automatically pull changes on merge. Example GitHub Action:

```yaml
name: CI
on:
  push:
    branches: [ "production" ]
  workflow_dispatch:
jobs:
  run-pull:
    runs-on: ubuntu-latest
    steps:
      - name: PULL
        run: >
          curl --location '${{ secrets.INSTANCE_URL }}/version-control/pull' --header
          'Content-Type: application/json' --header 'X-N8N-API-KEY: ${{ secrets.INSTANCE_API_KEY }}'
```

----------------------------------------

# Push and Pull with n8n

If your n8n instance connects to a Git repository, you need to keep your work in sync with Git. It is recommended not to push and pull to the same n8n instance to reduce the risk of merge conflicts and overwriting work. Create a process where work goes in one direction: either to Git or from Git, but not both.

## Fetch Other People's Work

- You must be an instance owner or instance admin to pull changes from Git.
- To pull work from Git:
  - Select **Pull** in the main menu.
- If the changes include new variable or credential stubs, n8n notifies you that you need to populate the values for the items before using them.
- When workflows, credentials, variables, and tags are deleted from the repository, your local versions aren't deleted automatically. When pulling repository changes, n8n notifies you about any outdated resources and asks if you'd like to delete them.

### Workflow and Credential Owner Changes on Pull

- When pulling, if the original owner of a workflow or credential matches an existing user, that owner remains. If not, the pulling user is set as the new owner.
- If the original owner is a project, n8n tries to match the original project name to a project name on the new instance. If no match exists, n8n creates a new project and assigns the current user as project owner.

### Pulling May Cause Brief Service Interruption

- If you pull changes to an active workflow, it will temporarily be set to inactive during the pull process, potentially causing a few seconds of downtime.

## Send Your Work to Git

- You must be an instance owner, instance admin, or project admin to push changes to Git.
- To push work to Git:
  1. Select **Push** in the main menu.
  2. In the **Commit and push changes** modal, select which workflows to push. You can filter by status (new, modified, deleted) and search for workflows. n8n automatically pushes tags, and variable and credential stubs.
  3. Enter a commit message summarizing the changes.
  4. Select **Commit and Push** to send the work to Git, and a success message will be displayed upon completion.

## What Gets Committed

n8n commits the following to Git:
- Workflows, including their tags and the email address of the workflow owner.
- Credential stubs (ID, name, type).
- Variable stubs (ID and name).
- Projects.
- Folders.

## Merge Behaviors and Conflicts

- n8n automatically resolves merge conflicts for credentials and variables. It cannot detect conflicts on workflows.
- When pulling, you may receive a warning if your local copy of a workflow differs from the repository. Accepting this warning will override your local copy.
- When pushing, ensure you have the most up-to-date version of the workflow to avoid overriding recent changes.
- Best practices:
  - Push your changes immediately after finishing a workflow.
  - Design your source control setup to have workflows flow in one direction.
  - Only push necessary workflows to avoid losing data.
  - Be cautious with manual edits in the Git repository.

### Credentials, Variables, and Workflow Tags

- Credentials and variables do not have merge issues, as n8n selects the version to keep.
- On pull:
  - If an item (tag, variable, or credential) does not exist, n8n will create it.
  - It will not update existing items unless specified conditions occur (such as using the API externally).
- On push:
  - n8n overwrites the entire variables and tags files. It updates existing credentials only if there are changes but does not apply these to existing credentials on pull.

## Manage Credentials with an External Secrets Vault

For different credentials on various n8n environments, use external secrets.

----------------------------------------

# Sustainable Use License

## Licensing Information

n8n's licenses are based on the fair-code model. Available licenses include:
- [Sustainable Use License](https://github.com/n8n-io/n8n/blob/master/LICENSE.md)
- [n8n Enterprise License](https://github.com/n8n-io/n8n/blob/master/LICENSE_EE.md)

## Sustainable Use License Permissible Actions

### Allowed
- Use/modify for internal business or non-commercial/personal purposes.
- Distribute software free of charge for non-commercial purposes.
- Use n8n for syncing data you control (e.g., from a CRM to an internal database).
- Create nodes or integrations with n8n.
- Provide consulting services related to n8n (e.g., building workflows).
- Setup or maintenance of n8n on internal servers.

### Not Allowed
- Use or modify n8n for commercial purposes such as selling or offering as a service.
- White-labeling n8n and charging customers.
- Hosting n8n and charging for access.

## Examples of License Applications

- **Not Allowed:** Collecting users' credentials (e.g., syncing using HubSpot credentials).
- **Allowed:** Embedding an AI chatbot using company's credentials (no user credentials collected).

## Commercial Use

For uses not permitted under the Sustainable Use License, sign a separate commercial agreement with n8n to discuss terms of embedding n8n into products (referred to as n8n Embed).

## Contributions

Any code contributed on GitHub is subject to GitHub's [terms of use](https://docs.github.com/en/site-policy/github-terms/github-terms-of-service#d-user-generated-content). Contributors must sign the [Contributor License Agreement](https://github.com/n8n-io/n8n/blob/master/CONTRIBUTOR_LICENSE_AGREEMENT.md), allowing n8n to modify licensing terms.

## Transition from Previous Licenses

n8n transitioned from an Apache 2.0 license with Commons Clause to the Sustainable Use License on 17 March 2022, addressing clarity and restrictions in user permissions.

## Fair-Code Concept

Fair-code describes software that is:
- Free to use and distributable.
- Source code is available and extensible.
- Commercially restricted by authors.

The Sustainable Use License is considered a fair-code license.

## Using Sustainable Use License

You can utilize the Sustainable Use License for your projects. For inquiries or to share your project, contact [license@n8n.io](mailto:license@n8n.io).

----------------------------------------

# Technical Documentation

## Tutorials
- **First Workflow**: Provides a quick introduction to n8n.
- **AI Chat Agent**: Tutorial on building an AI chat agent with n8n.
- **Courses**: Extensive examples to work through.

## Workflows
- **Creating an API Endpoint**: [Workflow Link](https://n8n.io/workflows/1750-creating-an-api-endpoint/)
- **AI Agent Chat**: [Workflow Link](https://n8n.io/workflows/1954-ai-agent-chat/)
- **Scrape and Summarize Webpages with AI**: [Workflow Link](https://n8n.io/workflows/1951-scrape-and-summarize-webpages-with-ai/)
- **Very Quick Quickstart**: [Workflow Link](https://n8n.io/workflows/1700-very-quick-quickstart/)
- **Pulling Data from Services Without Pre-Built Integration**: [Workflow Link](https://n8n.io/workflows/1748-pulling-data-from-services-that-n8n-doesnt-have-a-pre-built-integration-for/)
- **Joining Different Datasets**: [Workflow Link](https://n8n.io/workflows/1747-joining-different-datasets/)
- **Back Up Your n8n Workflows to GitHub**: [Workflow Link](https://n8n.io/workflows/1534-back-up-your-n8n-workflows-to-github/)
- **OpenAI GPT-3 Company Enrichment from Website Content**: [Workflow Link](https://n8n.io/workflows/1862-openai-gpt-3-company-enrichment-from-website-content/)
- **AI Agent That Can Scrape Webpages**: [Workflow Link](https://n8n.io/workflows/2006-ai-agent-that-can-scrape-webpages/)
- **Convert JSON to an Excel File**: [Workflow Link](https://n8n.io/workflows/1435-convert-json-to-an-excel-file/)

## Integration Categories
- **Development**
- **Communication**
- **Langchain**
- **AI**
- **Data & Storage**
- **Marketing**
- **Productivity**
- **Sales**
- **Utility**
- **Miscellaneous**

## Common Integrations
- **Google Sheets**
- **Telegram**
- **MySQL**
- **Slack**
- **Discord**
- **Postgres**
- **Notion**
- **Gmail**
- **Airtable**
- **Google Drive**
- **HubSpot and Salesforce**
- **Twilio and WhatsApp**
- **GitHub and Jira**
- **Asana and Slack**
- **Asana and Salesforce**
- **Jira and Slack**
- **Jira and Salesforce**
- **GitHub and Slack**
- **HubSpot and QuickBooks**
- **HubSpot and Slack**

----------------------------------------

# Quickstart Guide for n8n

This quickstart introduces you to using n8n, allowing you to try the UI and explore workflow templates and expressions.

## Steps to Get Started

### Step 1: Sign Up for n8n
- Use [n8n Cloud](https://docs.n8n.io/manage-cloud/overview/). A free trial is available for new users. Sign up [here](https://app.n8n.cloud/register).

### Step 2: Open a Workflow Template
- Access the quickstart template using training nodes to work with fake data. 
1. Go to [Templates | Very quick quickstart](https://n8n.io/workflows/1700-very-quick-quickstart/).
2. Select **Use workflow**.
3. Choose **Import template to cloud workspace**.

The workflow includes the following:
1. Retrieves data from the [Customer Datastore](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.n8ntrainingcustomerdatastore/) node.
2. Uses the [Edit Fields](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/) node to extract desired data, mapping customer name, ID, and description.

### Step 3: Run the Workflow
- Select **Test Workflow** to execute it, loading data from the Customer Datastore node.

### Step 4: Add a Node
- Add a third node to message customers using the Customer Messenger node.
1. Click the **Add node** connector on the Edit Fields node.
2. Search for **Customer Messenger**.
3. Select **Customer Messenger (n8n training)**.
4. Use [expressions](https://docs.n8n.io/code/expressions/) to set **Customer ID** and create the **Message**:
   - In the **INPUT** panel, select the **Schema** tab.
   - Drag **Edit Fields1** > **customer_id** into the **Customer ID** field.
   - Hover over **Message**, select the **Expression** tab, then the expand button to open the expressions editor.
   - Copy this expression into the editor:
   ```json
   {
     "message": "Hi {{ $json.customer_name }}. Your description is: {{ $json.customer_description }}"
   }
   ```
5. Close the expressions editor and the **Customer Messenger** node.
6. Select **Test Workflow** to run the complete workflow.

The complete workflow should appear as follows:
- [View workflow file](https://docs.n8n.io/_workflows/try-it-out/quickstart/very-quick-quickstart-workflow.json)

## Next Steps
- Explore n8n's [longer try it out tutorial](https://docs.n8n.io/try-it-out/tutorial-first-workflow/) for more complex workflows and features.

----------------------------------------

# Your First Workflow in n8n

## Core Concepts

- **Workflow**: A structured series of steps in n8n to automate tasks.
- **Trigger Node**: Starts a workflow based on an external event.
- **Credentials**: Authentication information required to connect and share data between apps/services and n8n nodes.
- **Expressions**: A way to manipulate data within n8n.

## Step 1: Create a New Workflow

- Start from Scratch or select **Create Workflow** on the Workflows list.

## Step 2: Add a Trigger Node

1. Select **Add first step**.
2. Search for **Schedule**.
3. Select **Schedule Trigger**.
4. Configure:
   - **Trigger Interval**: Weeks
   - **Weeks Between Triggers**: `1`
   - **Trigger on Weekdays**: Monday
   - **Trigger at Hour**: `9`
   - **Trigger at Minute**: `0`

## Step 3: Add the NASA Node and Set Up Credentials

1. Select the **Add node** icon on the Schedule Trigger node.
2. Search for **NASA**.
3. Select **NASA**.
4. Select **Get a DONKI solar flare** operation.
5. Configure Credentials:
   - Select **Credential for NASA API** dropdown.
   - Select **Create new credential**.
   - Obtain API Key from [NASA APIs](https://api.nasa.gov/) and paste it into **API Key** in n8n.
   - Select **Save**.

6. Configure Additional Fields:
   - Select **Add field** and enter **Start date**.
   - Use expression: `{{ $today.minus(7, 'days') }}` for a report from a week ago.

## Step 4: Add Logic with the If Node

1. Add the **If node**.
2. Check `classType` value:
   - Drag **classType** into **Value 1**.
   - Change operation to **String > Contains**.
   - Enter **Value 2**: `X` (where X is the highest classification).

## Step 5: Output Data from Your Workflow

1. On the If node, select the **Add node** icon for **true** output.
2. Search for and add **PostBin**.
3. Select **Send a request**.
4. Paste your Postbin ID into **Bin ID**.
5. Configure **Bin Content**:
   - Use expression: `There was a solar flare of class {{$json["classType"]}}`.
6. Duplicate the Postbin node for the **false** output path.

## Step 6: Test the Workflow

1. Select **Test Workflow** to run it.
2. Refresh your Postbin page to see the output.
3. Activate the workflow with the **Active** toggle for automatic weekly runs.

## Best Practices

- Ensure that the credentials are kept private to avoid unauthorized access.
- Test each step of the workflow to ensure it performs as expected.
- Monitor the workflows regularly for any failures or issues.

## References

- **n8n Documentation**: [n8n Docs](https://docs.n8n.io)
- **NASA API**: [NASA APIs](https://api.nasa.gov/)
- **PostBin**: [PostBin](https://www.toptal.com/developers/postbin/)

----------------------------------------

# User Management in n8n

## Core Concepts

User management in n8n allows for the following:
- Login and password management
- Adding and removing users
- Account types:
  - Owner
  - Member
  - Admin (available for Pro & Enterprise plans)

## Setup Guides

- Cloud setup guide: Refer to the cloud setup guide for configurations specific to cloud deployments.
- Self-hosted guide: Extra steps are required to configure your n8n instance for self-hosting.
- LDAP and SAML configuration: For integrating LDAP and SAML, consult the respective guides.

## Privacy

The user management feature does not transmit personal information (e.g., email or username) to n8n.

----------------------------------------

# Account Types

There are three account types: owner, admin, and member. The account type affects user permissions and access.

## Feature Availability

To use admin accounts, a Pro or Enterprise plan is required.

## Account Types and Role Types

Account types and role types are different. Role types are part of Role-Based Access Control (RBAC). Each account has one type but can have different role types for different projects.

### Recommended Setup

n8n recommends that owners create a member-level account for themselves. Owners can see and edit all workflows, credentials, and projects. However, they cannot see who created a particular workflow, which risks overwriting others' work.

## Permissions Overview

| Permission                                  | Owner | Admin | Member |
|---------------------------------------------|-------|-------|--------|
| Manage own email and password                | ✅    | ✅    | ✅     |
| Manage own workflows                         | ✅    | ✅    | ✅     |
| View, create, and use tags                  | ✅    | ✅    | ✅     |
| Delete tags                                 | ✅    | ✅    | ❌     |
| View and share all workflows                 | ✅    | ✅    | ❌     |
| View, edit, and share all credentials        | ✅    | ✅    | ❌     |
| Set up and use Source Control                | ✅    | ✅    | ❌     |
| Create projects                             | ✅    | ✅    | ❌     |
| View all projects                            | ✅    | ✅    | ❌     |
| Add and remove users                         | ✅    | ✅    | ❌     |
| Access the Cloud dashboard                   | ✅    | ❌    | ❌     |

----------------------------------------

# Best Practices for User Management in n8n

## General Recommendations
- Owners should create a member-level account for themselves to avoid the risk of overriding other users' workflows.
- Users must avoid editing the same workflow simultaneously to prevent overwriting changes.
- To move workflows between accounts, export the workflow as JSON and import it to the new account (note: this action loses workflow history).
- Webhook paths must be unique across the entire instance. If multiple users set the same webhook path:
  - Only the first workflow run or activated using that path will succeed.
  - Other workflows will fail if they attempt to run with the same path.

## Configuration for Self-hosted Instances
If running n8n behind a reverse proxy, set the following environment variables to ensure emails are generated with the correct URL:
- `N8N_HOST`
- `N8N_PORT`
- `N8N_PROTOCOL`
- `N8N_EDITOR_BASE_URL`

For more information on these variables, refer to the [Environment Variables documentation](https://docs.n8n.io/hosting/configuration/environment-variables/).

----------------------------------------

# User Management on n8n Cloud

## Version Requirement
- Upgrade to version 0.195.0 or newer for user management functionality.
- Note: Upgrading to a version with user management is irreversible; downgrading is not permitted.

## Step One: In-app Setup
1. Open n8n. The app displays a signup screen.
2. Enter your details:
   - Password must be at least eight characters long, including one number and one capital letter.
3. Click **Next**. n8n logs you in with your new owner account.

## Step Two: Invite Users
1. Sign into your workspace with your owner account.
2. Access **Settings** from the user icon in the bottom left corner.
3. Go to the **Users** page.
4. Click **Invite**.
5. Enter the new user's email address.
6. Click **Invite user**. n8n sends an email invitation to the new user.

----------------------------------------

# Lightweight Directory Access Protocol (LDAP) in n8n

## Feature Availability
- Available on Self-hosted Enterprise and Cloud Enterprise plans.
- Requires access to the n8n instance owner account.

## Enable LDAP
1. Log in to n8n as the instance owner.
2. Select **Settings** > **LDAP**.
3. Toggle on **Enable LDAP Login**.
4. Complete the fields with details from your LDAP server.
5. Select **Test connection** to check your connection setup, or **Save connection** to create the connection.

**Note:** Anyone on your LDAP server can sign in to the n8n instance unless excluded using the **User Filter**.

## Merging n8n and LDAP Accounts
- If matching accounts (matching emails) for email users and LDAP users are found, the user must sign in with their LDAP account. 
- n8n instance owner accounts are excluded from being converted to LDAP users.

## LDAP User Accounts in n8n
- On first sign in, n8n creates a user account for the LDAP user.
- Manage user details on the LDAP server only. Updates or deletions on the LDAP server reflect in n8n at the next scheduled sync or when the user logs in next.

**User Deletion:** If a user is removed from the LDAP server, they lose n8n access on the next sync.

## Turn LDAP Off
To disable LDAP:
1. Log in to n8n as the instance owner.
2. Select **Settings** > **LDAP**.
3. Toggle off **Enable LDAP Login**.

**Note:** Existing LDAP users are converted to email users on their next login, and they must reset their password.

----------------------------------------

# Role-based Access Control (RBAC)

## Core Concepts
- **RBAC** is a method of managing access to workflows and credentials based on user roles and projects. 
- Workflows are grouped into projects, and user access is determined by the user's role within each project.

## Role Types and Account Types
- Role types and account types are distinct. Each account has one account type but can have multiple role types across different projects.

## Feature Availability
- RBAC is available on all plans except the Community edition. Plans differ in the number of projects and roles.

## References
- [Role Types](https://docs.n8n.io/user-management/rbac/role-types/)
- [Projects](https://docs.n8n.io/user-management/rbac/projects/)

----------------------------------------

# Manage Users

## Delete a User
1. Select the menu icon by the user you want to delete.
2. Confirm you want to delete them.
3. If they're an active user, choose whether to copy their workflow data and credentials to a new user, or permanently delete their workflows and credentials.

## Resend an Invitation to a Pending User
Click the menu icon by the user, then click **Resend invite**.

----------------------------------------

# Projects

## Overview
n8n uses projects to group workflows and credentials, assigning roles to users in each project, allowing different access levels per user.

## Create a Project
Instance owners and instance admins can create projects.

**Steps to create a project:**
1. Select **Add project**.
2. Fill out the project settings.
3. Select **Save**.

## Add and Remove Users in a Project
Project admins can add and remove users.

**Add a user to a project:**
1. Select the project.
2. Select **Project settings**.
3. Under **Project members**, browse or search for users.
4. Select the user to add.
5. Check and modify the role type as needed.
6. Select **Save**.

**Remove a user from a project:**
1. Select the project.
2. Select **Project settings**.
3. Change the role type dropdown for the user to **Remove access**.
4. Select **Save**.

## Delete a Project
**Steps to delete a project:**
1. Select the project.
2. Select **Project settings**.
3. Select **Delete project**.
4. Choose to:
   - **Transfer workflows and credentials to another project** or
   - **Delete workflows and credentials** (confirm deletion).

## Move Workflows and Credentials
Workflow and credential owners can move ownership to other users or projects. Existing sharing will be revoked upon moving.

**Steps to move workflows or credentials:**
1. Select the **Workflow menu** or **Credential menu** > **Move**.
2. Select the project or user to move to.
3. Select **Next**.
4. Confirm understanding of impact on workflows.
5. Select **Confirm move to new project**.

## Using External Secrets in Projects
To use external secrets in a project, an instance owner or instance admin must be a member of the project.

----------------------------------------

# RBAC Role Types

## User Roles
Within projects, there are three user roles: Admin, Editor, and Viewer. Each role has different permissions regarding what actions a user can perform within a project.

### Project Admin
- Highest level of permissions.
- Permissions include:
  - Manage project settings: Change name, delete project.
  - Manage project members: Invite/remove members, change roles.
  - View, create, update, and delete workflows, credentials, or executions.

### Project Editor
- Can view, create, update, and delete workflows, credentials, or executions.

### Project Viewer
- Read-only role.
- Access to all workflows, credentials, and executions.
- Cannot manually execute workflows.

## Permission Overview
| Permission                       | Admin   | Editor  | Viewer  |
|----------------------------------|---------|---------|---------|
| View workflows in the project    | ✅      | ✅      | ✅      |
| View credentials in the project   | ✅      | ✅      | ✅      |
| View executions                   | ✅      | ✅      | ✅      |
| Edit credentials and workflows    | ✅      | ✅      | ❌      |
| Add workflows and credentials      | ✅      | ✅      | ❌      |
| Execute workflows                 | ✅      | ✅      | ❌      |
| Manage members                    | ✅      | ❌      | ❌      |
| Modify the project                | ✅      | ❌      | ❌      |

## Additional Notes
- Role types are distinct from account types; each account has one type but can have different role types for various projects.
- Variables and tags remain global across the n8n instance regardless of RBAC.

----------------------------------------

# Security Assertion Markup Language (SAML)

## Feature Availability
- Available on Enterprise plans.
- Required access to the n8n instance owner account to enable and configure SAML.
- Available from version 0.225.0.

## Setup Instructions
- **Set up SAML**: General guide for configuring SAML in n8n with links to resources for common Identity Providers (IdPs).
- **Okta Workforce Identity SAML setup**: Step-by-step guidance to configuring Okta.
- **Troubleshooting**: Checklist for common issues that may arise during SAML setup.
- **Managing users with SAML**: Instructions for performing user management tasks with SAML enabled.

----------------------------------------

# Manage users with SAML

## Exempt users from SAML

To allow users to log in without using SAML:

1. Go to **Settings** > **Users**.
2. Select the menu icon by the user you want to exempt from SAML.
3. Select **Allow Manual Login**.

## Deleting users

If you remove a user from your IdP, they remain logged in to n8n. You need to manually remove them from n8n as well. Refer to the guidance in the n8n documentation on deleting users.

----------------------------------------

# Okta Workforce Identity SAML Setup

## Prerequisites

- Okta Workforce Identity account
- Redirect URL and entity ID from n8n's SAML settings
- Two-factor authentication may be enforced by Okta depending on configuration

## Setup

1. In the Okta admin panel, select **Applications** > **Applications**.
2. Select **Create App Integration**.
3. Select **SAML 2.0**, then **Next**.
4. On the **General Settings** tab, enter `n8n` as the **App name**.
5. Select **Next**.
6. On the **Configure SAML** tab, complete the following fields:
    - **Single sign-on URL**: Redirect URL from n8n
    - **Audience URI (SP Entity ID)**: Entity ID from n8n
    - **Default RelayState**: Leave empty
    - **Name ID format**: `EmailAddress`
    - **Application username**: `Okta username`
    - **Update application username on**: `Create and update`
7. Create **Attribute Statements**:

    | **Name** | **Name format** | **Value** |
    | --- | --- | --- |
    | http://schemas.xmlsoap.org/ws/2005/05/identity/claims/firstname | URI Reference | user.firstName |
    | http://schemas.xmlsoap.org/ws/2005/05/identity/claims/lastname | URI Reference | user.lastName |
    | http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn | URI Reference | user.login |
    | http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress | URI Reference | user.email |

8. Select **Next**. 
9. Assign the n8n app to people:
    1. On the n8n app dashboard in Okta, select **Assignments**.
    2. Select **Assign** > **Assign to People**.
    3. Select **Assign** next to the desired person.
    4. Confirm the username, keeping it as the email address. Select **Save and Go Back**.
    5. Select **Done**.
10. Get the metadata XML: On the **Sign On** tab, copy the Metadata URL, navigate to it, and copy the XML. Paste this into **Identity Provider Settings** in n8n.
11. Select **Save settings**.
12. Select **Test settings**. If not logged in, Okta prompts to sign in. n8n displays a success message confirming attributes returned by Okta.

----------------------------------------

# Set up SAML

## Feature Availability
- Available on Enterprise plans.
- Access to the n8n instance owner account is required to enable and configure SAML.
- Available from version 0.225.0.

## Enable SAML

1. In n8n, go to **Settings** > **SSO**.
2. Note the n8n **Redirect URL** and **Entity ID**.
3. **Optional**: If your IdP allows importing SAML metadata, navigate to the **Entity ID** URL and save the XML.
4. **Optional**: If running n8n behind a load balancer, configure `N8N_EDITOR_BASE_URL`.
5. Set up SAML with your IdP. You will need the redirect URL and entity ID, and possibly an email address and name for the IdP user.
6. After completing the setup in your IdP, load the metadata XML into n8n using either:
   - **Metadata URL**: Copy the metadata URL from your IdP into the **Identity Provider Settings** field in n8n.
   - **Raw XML**: Download the metadata XML, toggle **Identity Provider Settings** to **XML**, and paste the raw XML into **Identity Provider Settings**.
7. Select **Save settings**.
8. Select **Test settings** to verify your SAML setup.
9. Set SAML 2.0 to **Activated**.

### SAML Request Type
- n8n currently does not support `POST` binding. Configure your IdP to use `HTTP` request binding instead.

## Generic IdP Setup
Common setup tasks for configuring IdP:
- Create an app for n8n in your IdP.
- Map n8n attributes to IdP attributes:

| Name                                                             | Name Format     | Value (IdP Side)  |
|------------------------------------------------------------------|-----------------|--------------------|
| `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress` | URI Reference   | User email         |
| `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/firstname`  | URI Reference   | User First Name    |
| `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/lastname`   | URI Reference   | User Last Name     |
| `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn`        | URI Reference   | User Email         |

## Setup Resources for Common IdPs
Documentation links for common IdPs:
- Auth0: [Configure Auth0 as SAML Identity Provider](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-identity-provider#manually-configure-sso-integrations)
- Authentik: [Applications](https://goauthentik.io/docs/applications) and [SAML Provider](https://goauthentik.io/docs/providers/saml/)
- Azure AD: [SAML authentication with Azure Active Directory](https://learn.microsoft.com/en-us/azure/active-directory/fundamentals/auth-saml)
- JumpCloud: [Set up SAML applications with JumpCloud](https://jumpcloud.com/support/integrate-with-zoom#configuring-the-sso-integration) (using `Zoom` as an example)
- Keycloak: Choose a [Getting Started guide](https://www.keycloak.org/guides#getting-started) based on your hosting.
- Okta: n8n [Workforce Identity setup guide](https://docs.n8n.io/user-management/saml/okta/)
- PingIdentity: [PingOne SSO](https://docs.pingidentity.com/pingone/getting_started_with_pingone/p1_p1sso_start.html)

----------------------------------------

# Troubleshooting SAML SSO

**Common Issues:**
- Verify if the app created in your Identity Provider (IdP) supports SAML.
- Ensure the n8n redirect URL and entity ID are correctly entered in your IdP.
- Confirm that the metadata XML is correctly formatted and has been accurately copied into n8n.

----------------------------------------

# Two-Factor Authentication (2FA)

Two-factor authentication (2FA) adds a second authentication method on top of a username and password to increase account security. n8n supports 2FA using an authenticator app.

## Enable 2FA

To enable 2FA in n8n:

1. Go to **Settings** > **Personal**.
2. Select **Enable 2FA**. n8n opens a modal with a QR code.
3. Scan the QR code in your authenticator app.
4. Enter the code from your app in **Code from authenticator app**.
5. Select **Continue**. n8n displays recovery codes.
6. Save the recovery codes. You need these to regain access to your account if you lose your authenticator.

## Disable 2FA

Self-hosted users can disable 2FA for all users by setting `N8N_MFA_ENABLED` to false. This setting is ignored if existing users have 2FA enabled. Refer to Configuration methods for more information on configuring your n8n instance with environment variables.

----------------------------------------

# Video Courses

n8n provides two video courses on YouTube.

## Beginner Course

The [Beginner](https://www.youtube.com/playlist?list=PLlET0GsrLUL59YbxstZE71WszP3pVnZfI) course covers the basics of n8n:

- [Introduction and workflows](https://youtu.be/4BVTkqbn_tY?si=g2A5eD8kAoia5k6y)
- [APIs and Webhooks](https://youtu.be/y_cpFMF1pzk?si=zi3wM4W7nx8Jkcw3)
- [Nodes](https://youtu.be/rCPXBkeBWCQ?si=-T2iUsydwS5ym6yI)
- [Data in n8n](https://youtu.be/2YfWuNziPE4?si=4jB-fubG1_T0HXYx)
- [Core workflow concepts](https://youtu.be/kkrA7tGHYNo?si=mLVbuV98ohL5YVnm)
- [Useful nodes](https://youtu.be/Rmi-ckbMOQE?si=H_dF77uf5KJU7RtH)
- [Error handling](https://youtu.be/XEUVl3bbMhI?si=nUyaME5kyxe6daGO)
- [Debugging](https://youtu.be/Gxe_RfCRH-o?si=F-pAviLTIeL3-X13)
- [Collaboration](https://youtu.be/pI0W-0Qcwmo?si=X7sALFXo2e-cY9FQ)

## Advanced Course

The [Advanced](https://www.youtube.com/playlist?list=PLlET0GsrLUL5bxmx5c1H1Ms_OtOPYZIEG) course covers more complex workflows, more technical nodes, and enterprise features:

- [Introduction and complex data flows](https://youtu.be/TFTLMQLozCI?si=vX0ooIH1RmbsgAkC)
- [Advanced technical nodes](https://youtu.be/JM4jqYs4Fxo?si=YSNMeSay3C29C8HS)
- [Pinning and editing output data](https://youtu.be/zcNB8L4_9mA?si=LZJ9DlYDQQxL7eeP)
- [Sub-workflows](https://youtu.be/xr05Ie_Hkyg?si=rqqP8llttZPBjBeD)
- [Error workflows](https://youtu.be/77Ewdaby47M?si=6YRlC4nMgG4hVQPV)
- [Building a full example](https://youtu.be/wOKLEfeJLVE?si=YMW5t-PzPq7QKbPY)
- [Handling files](https://youtu.be/2RAZYNigqOY?si=9x4vLX2Qo08xx8vC)
- [Enterprise features](https://youtu.be/fXEubzmVJ_E?si=aK9_fI9tkF6F5CtB)

----------------------------------------

# Workflows

A workflow is a collection of nodes connected together to automate a process.

## Workflow Creation
- Create a workflow.
- Use workflow templates to help you get started.
- Learn about the key components of an automation in n8n.
- Debug using the executions list.
- Share workflows between users.

## Best Practices
For new users, consider using the quickstart guides to quickly try out n8n features.

----------------------------------------

# Connections

A connection establishes a link between nodes to route data through the workflow. A connection between two nodes passes data from one node's output to another node's input.

## Create a connection

To create a connection between two nodes, select the grey dot or **Add node** on the right side of a node and slide the arrow to the grey rectangle on the left side of the following node.

## Delete a connection

Hover over the connection, then select **Delete**.

----------------------------------------

# Workflow Components

## Nodes
Integrations and operations.

## Connections
Node connectors.

## Sticky Notes
Document your workflows.

----------------------------------------

# Nodes

Nodes are the key building blocks of a workflow. They perform a range of actions, including:

- Starting the workflow.
- Fetching and sending data.
- Processing and manipulating data.

## Add a node to your workflow

### Add a node to an empty workflow

1. Select **Add first step**. n8n opens the nodes panel, where you can search or browse trigger nodes.
2. Select the trigger you want to use.

### Add a node to an existing workflow

Select the **Add node** connector. n8n opens the nodes panel, where you can search or browse all nodes.

## Node operations: Triggers and Actions

When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data.

- **Triggers** start a workflow in response to specific events or conditions in your services. 
- **Actions** represent specific tasks within a workflow, manipulating data, performing operations on external systems, and triggering events.

## Node controls

To view node controls, hover over the node on the canvas:

- **Execute step**: Run the node.
- **Deactivate**: Deactivate the node.
- **Delete**: Delete the node.
- **Node context menu**: Available actions include:
  - Open node
  - Execute step
  - Rename node
  - Deactivate node
  - Pin node
  - Copy node
  - Duplicate node
  - Select all
  - Clear selection
  - Delete node

## Node settings

The node settings under the **Settings** tab allow you to control node behaviors and add node notes.

### Request Options
- **Batching**: Control how to batch large numbers of input items.
- **Ignore SSL Issues**: Download the response even if SSL validation isn't possible.
- **Proxy**: Specify an HTTP proxy.
- **Timeout**: Set a timeout for the request in ms.

### Additional Settings
- **Always Output Data**: Returns an empty item even if no data is returned.
- **Execute Once**: Executes once with data from the first item received.
- **Retry On Fail**: Reruns the node until it succeeds upon failure.

### On Error Options
- **Stop Workflow**: Halts the entire workflow when an error occurs.
- **Continue**: Proceeds to the next node despite the error.
- **Continue (using error output)**: Passes error information to the next node for potential handling.

### Node Notes
- **Notes**: Document your workflow with notes.
- **Display note in flow**: If active, the note displays in the workflow as a subtitle.

----------------------------------------

# Sticky Notes

Sticky Notes allow you to annotate and comment on your workflows.

## Create a Sticky Note

Sticky Notes are a core node. To add a new Sticky Note:

1. Open the nodes panel.
2. Search for `note`.
3. Click the **Sticky Note** node. n8n adds a new Sticky Note to the canvas.

## Edit a Sticky Note

1. Double click the Sticky Note you want to edit.
2. Write your note. Refer to the [CommonMark specification](https://commonmark.org/help/) for text formatting. n8n uses [markdown-it](https://github.com/markdown-it/markdown-it).
3. Click away from the note, or press `Esc`, to stop editing.

## Change the Color

To change the Sticky Note color:

1. Hover over the Sticky Note.
2. Select **Change color**.

## Sticky Note Positioning

You can:

- Drag a Sticky Note anywhere on the canvas.
- Drag Sticky Notes behind nodes for visual grouping.
- Resize Sticky Notes by hovering over the edge of the note and dragging.

## Writing in Markdown

Sticky Notes support Markdown formatting. Examples:

| Markdown Example | Description |
| ---------------- | ----------- |
| ```1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21``` | ```The text in double asterisks will be **bold** The text in single asterisks will be *italic* Use # to indicate headings: # This is a top-level heading ## This is a sub-heading ### This is a smaller sub-heading You can add links: [Example](https://example.com/) Create lists with asterisks: * Item one * Item two Or create ordered lists with numbers: 1. Item one 2. Item two``` |

## Make Images Full Width

To force images to be 100% width of the sticky note, append `#full-width` to the filename:

| Markdown Example | Result |
| ---------------- | ------ |
| ```1``` | ```![Source example](https://<IMAGE-URL>/<IMAGE-NAME>.png#full-width)``` |

----------------------------------------

# Create a Workflow

A workflow is a collection of nodes connected together to automate a process. You build workflows on the workflow canvas.

## Creation Steps

1. Select the **create** button in the upper-left corner of the side menu. Select workflow.
2. Choose whether to create the workflow inside your **personal space** or a specific **project** if your n8n instance supports projects. For the community version, always create workflows inside your personal space.
3. Add a trigger node: select **Add first step...**

Or:

1. Select the **create** button in the upper-right corner from either the **Overview** page or a specific **project**. Select workflow.
2. If from the **Overview** page, create the workflow inside your personal space. If from a project, create it inside that specific project.
3. Add a trigger node: select **Add first step...**

## Run Workflows

### Manually

To run your workflow manually when building and testing, select **Test Workflow**.

### Automatically

All new workflows are inactive by default. Activate workflows that start with a trigger or Webhook node to allow them to run automatically.

To activate or deactivate your workflow, open it and toggle **Inactive** / **Active**. Once active, it runs whenever its trigger conditions are met.

----------------------------------------

# Executions

An execution is a single run of a workflow.

## Execution Modes

There are two execution modes:

- **Manual**: run workflows manually when testing. Select **Test Workflow** to start a manual execution. You can perform manual executions of active workflows, but n8n recommends keeping your workflow set to **Inactive** while developing and testing.
- **Production**: a production workflow is one that runs automatically. To enable this, set the workflow to **Active**.

## Execution Lists

n8n provides two execution lists:

- **Workflow-level executions**: shows the executions for a single workflow.
- **All executions**: shows all executions for all workflows.

n8n supports adding custom data to executions.

----------------------------------------

# All Executions

To view all executions from an n8n instance, navigate to the Overview page and click the Executions tab.

## Filter Executions

1. Select the **Executions** tab from the Overview page or a specific project.
2. Select **Filters**.
3. Enter your filters. You can filter by:
   - **Workflows**: all workflows or a specific workflow name.
   - **Status**: **Failed**, **Running**, **Success**, or **Waiting**.
   - **Execution start**: executions that started in a given time.
   - **Saved custom data**: data created within the workflow using the Code node. Enter the key and value to filter.

### Feature Availability

Custom executions data is available on:
- Cloud: Pro, Enterprise
- Self-Hosted: Enterprise, registered Community

Available in version 0.222.0 and above.

## Retry Failed Workflows

To retry a failed workflow:
1. Select the **Executions** tab from the Overview page or a specific project.
2. On the execution you want to retry, select **Retry execution**.
3. Choose one of the following options:
   - **Retry with currently saved workflow**: execute the workflow with previous execution data after making changes.
   - **Retry with original workflow**: retry the execution without changes to the workflow.

## Load Data from Previous Executions

You can load data from a previous workflow back into the canvas. For more information, refer to the Debug executions documentation.

----------------------------------------

# Custom Executions Data

You can set custom data on your workflow using the Code node or the Execution Data node. n8n records this with each execution. You can then use this data when filtering the executions list or fetch it in your workflows using the Code node.

**Feature Availability**

- Cloud: Pro, Enterprise
- Self-Hosted: Enterprise, registered Community
- Available in version 0.222.0 and above.

## Set and Access Custom Data Using the Code Node

### Set Custom Executions Data

Set a single piece of extra data:

**JavaScript:**
```javascript
$execution.customData.set("key", "value");
```

**Python:**
```python
_execution.customData.set("key", "value");
```

Set all extra data. This overwrites the whole custom data object for this execution:

**JavaScript:**
```javascript
$execution.customData.setAll({"key1": "value1", "key2": "value2"});
```

**Python:**
```python
_execution.customData.setAll({"key1": "value1", "key2": "value2"});
```

**Limitations:**
- They must be strings
- `key` has a maximum length of 50 characters
- `value` has a maximum length of 255 characters
- n8n supports a maximum of 10 items of custom data

### Access the Custom Data Object During Execution

You can retrieve the custom data object or a specific value in it during an execution:

**JavaScript:**
```javascript
// Access the current state of the object during the execution
const customData = $execution.customData.getAll();
// Access a specific value set during this execution
const specificValue = $execution.customData.get("key");
```

**Python:**
```python
# Access the current state of the object during the execution
customData = _execution.customData.getAll()
# Access a specific value set during this execution
specificValue = _execution.customData.get("key")
```

----------------------------------------

# Debug and Re-run Past Executions

## Core Concepts
You can load data from a previous execution into your current workflow. This is useful for debugging data from failed production executions. After reviewing the failed execution, you can make changes to your workflow and re-run it with the previous execution data.

## Load Data
To load data from a previous execution:

1. In your workflow, select the **Executions** tab to view the **Executions** list.
2. Select the execution you want to debug. 
   - For failed executions: select **Debug in editor**.
   - For successful executions: select **Copy to editor**.
3. n8n copies the execution data into your current workflow and pins the data in the first node in the workflow.

### Important Note
The executions available on the **Executions** list depend on your Workflow settings.

----------------------------------------

# Manual, Partial, and Production Executions in n8n

## Manual Executions
- Manual executions allow you to run workflows directly from the canvas by clicking the **Execute workflow** button.
- These executions are "ad-hoc" and run only when manually selected.
- Useful for iterative testing and observing data transformations.
- Supports testing of conditional branching, data formatting changes, and loop behaviors.
  
### Pinning Execution Data
- Use **data pinning** to "pin" or "freeze" the output data of a node.
- Pinned data can replace execution of the node in future runs, avoiding variable data or repeated external queries.
- Production executions ignore all pinned data.

## Partial Executions
- Partial executions run specific nodes in a workflow by selecting a node, opening its detail view, and selecting **Execute step**.
- This executes the node and any preceding nodes required for its inputs.
- Temporarily disable specific nodes to avoid interacting with them during development.
  
### Troubleshooting Partial Executions
- **Error**: The destination node is not connected to any trigger.  
  **Solution**: Connect a trigger node to the workflow.
  
- **Error**: Please execute the whole workflow, rather than just the node.  
  **Solution**: Use the **limit node** to restrict output size while testing.

## Production Executions
- Production executions occur automatically upon a triggering event or schedule.
- Requires attachment of a trigger node (excluding manual triggers) and the workflow must be set to **Active**.
- Execution flow for production executions is not visible in the Editor tab but can be viewed in the **Executions** tab of the workflow.
- Issues can be explored and troubleshot using the **debug in editor** feature.

----------------------------------------

# Workflow-level Executions

The **Executions** list in a workflow shows all executions for that workflow.

## Execution History and Workflow History

Executions are workflow runs. The executions list shows previous runs of the current version of the workflow. You can copy previous executions into the editor to debug and re-run past executions. Workflow history includes previous versions of the workflow with different nodes or parameters.

## View Executions for a Single Workflow

1. In the workflow, select the **Executions** tab in the top menu to preview all executions.

## Filter Executions

To filter the executions list:
1. Select **Executions**.
2. Select **Filters**.
3. Enter your filters:
   - **Status**: choose from **Failed**, **Running**, **Success**, or **Waiting**.
   - **Execution Start**: see executions that started during a specified time.
   - **Saved Custom Data**: enter the key and value to filter (refer to Custom executions data for more information).

### Feature Availability

Custom executions data is available on:
- Cloud: Pro, Enterprise
- Self-Hosted: Enterprise, registered Community

Available in version 0.222.0 and above.

## Retry Failed Workflows

To retry a failed workflow:
1. Open the **Executions** list.
2. For the workflow execution you want to retry, select **Refresh**.
3. Choose one of the following options:
   - **Retry with currently saved workflow**: (After making changes) execute with previous execution data.
   - **Retry with original workflow**: retry the execution without changes to the workflow, using previous execution data.

----------------------------------------

# Export and Import Workflows

n8n saves workflows in JSON format. You can export your workflows as JSON files or import JSON files into your n8n library. 

## Sharing Credentials

Exported workflow JSON files include credential names and IDs. While IDs aren't sensitive, the names could be. HTTP Request nodes may contain authentication headers when imported from cURL. Remove or anonymize this information from the JSON file before sharing.

## Copy-Paste

You can copy and paste a workflow or parts of it by selecting the nodes you want to copy to the clipboard (`Ctrl + c` or `cmd + c`) and pasting it (`Ctrl + v` or `cmd + v`) into the Editor UI.

To select all nodes or a group of nodes, click and drag.

## From the Editor UI Menu

From the top navigation bar, select the three dots icon to see the following options:

- **Download**: Downloads your current workflow as a JSON file to your computer.
- **Import from URL**: Imports workflow JSON from a URL, for example, `https://raw.githubusercontent.com/n8n-io/demo-setup/main/n8n/backup/workflows/srOnR8PAY3u4RSwb.json`.
- **Import from File**: Imports a workflow as a JSON file from your computer.

## From the Command Line

- **Export**: See the [full list of commands](https://docs.n8n.io/hosting/cli-commands/#export-workflows-and-credentials) for exporting workflows or credentials.
- **Import**: See the [full list of commands](https://docs.n8n.io/hosting/cli-commands/#import-workflows-and-credentials) for importing workflows or credentials.

----------------------------------------

# Workflow History

## Feature Availability
- Full workflow history is available on Enterprise Cloud and Enterprise Self-hosted.
- Versions from the last five days are available for Cloud Pro users.
- Versions from the last 24 hours are available for registered Community users.

## Understanding Workflow History
n8n creates a new version when you:
- Save your workflow.
- Restore an old version; n8n saves the latest version before restoring.
- Pull from a Git repository using Source Control. Note that n8n saves versions to the instance database, not to Git.

**Note:** Workflow history differs from Workflow-level executions list. Executions are workflow runs, showing previous runs of the current version. Workflow history reflects previous workflow versions.

## View Workflow History
To view a workflow's history:
1. Open the workflow.
2. Select **Workflow history**. n8n opens a menu showing the saved workflow versions and a canvas preview of the selected version.

## Restore or Copy Previous Versions
You can restore a previous workflow version or make a copy:
1. On the version you want to restore or copy, select **Options**.
2. Choose:
   - **Restore this version**: replace your current workflow with the selected version.
   - **Clone to new workflow**: create a new workflow based on the selected version.
   - **Open version in new tab**: display the selected version in a second tab for comparison.
   - **Download**: download the version as JSON.

----------------------------------------

# Workflow Settings

You can customize workflow behavior for individual workflows using workflow settings.

## Instructions to Open Settings
1. Open your workflow.
2. Select the **Options** menu.
3. Select **Settings**. n8n opens the **Workflow settings** modal.

## Available Settings
- **Execution order**: 
  - **v0 (legacy)**: Executes the first node of each branch, then the second node of each branch, and so on. 
  - **v1 (recommended)**: Executes each branch in turn, completing one branch before starting another. Orders branches from topmost to bottommost on the canvas.
  
- **Error Workflow**: Select a workflow to trigger if the current workflow fails.

- **This workflow can be called by**: Choose whether other workflows can call this workflow.

- **Timezone**: Sets the timezone for the workflow. Default is EDT (New York). Important for the Schedule Trigger node.

- **Save failed production executions**: Manage whether to save failed executions for active workflows.

- **Save successful production executions**: Manage whether to save successful executions for active workflows.

- **Save manual executions**: Decide if executions for user-started workflows should be saved.

- **Save execution progress**: Control whether to save execution data for each node. If set to **Save**, the workflow resumes from where it stopped in case of an error.

- **Timeout Workflow**: Enable setting a duration after which n8n should cancel the current workflow execution.
  - **Timeout After**: Set the time in hours, minutes, and seconds for the workflow timeout. Maximum timeout enforced for n8n Cloud users based on their plan.

----------------------------------------

# Workflow Sharing

## Feature Availability
Available on Pro, Enterprise Cloud, and Enterprise self-hosted plans.

Workflow sharing allows users to share workflows within the same n8n instance. Instance owners and admin role users can view and share all workflows.

## Share a Workflow
1. Open the workflow you want to share.
2. Select **Share**.
3. In **Add users**, find and select the users you want to share with.
4. Select **Save**.

## View Shared Workflows
Shared workflows can be accessed from the **Workflows** list, which varies based on user permissions:
- **Overview**: All accessible workflows including own, shared, and those in projects the user is a member of.
- Other projects: All workflows in the specific project.

## Workflow Roles and Permissions
- **Creator**: User who created the workflow.
- **Editor**: Other users with access.

### Permissions Table
| Permissions                         | Creator | Editor |
|-------------------------------------|---------|--------|
| View workflow (read-only)           | ✅      | ✅     |
| View executions                      | ✅      | ✅     |
| Update (including tags)             | ✅      | ✅     |
| Run                                 | ✅      | ✅     |
| Share                               | ✅      | ❌     |
| Export                              | ✅      | ✅     |
| Delete                              | ✅      | ❌     |

## Node Editing Restrictions with Unshared Credentials
Sharing follows the principle of least privilege: If credentials are not shared, users cannot edit nodes using those credentials, but can still view and run the workflow.

### Credentials
Editors can use all credentials in the workflow, including those not explicitly shared.

Refer to [Credential sharing](https://docs.n8n.io/credentials/credential-sharing/) for more information.

----------------------------------------

# Sub-workflow Conversion

## Feature Availability
Available on all plans from n8n version 1.97.0.

Sub-workflow conversion allows workflows to be refactored into reusable parts. Expressions referencing other nodes are automatically updated and added as parameters in the [Execute Workflow Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger/) node.

## Selecting Nodes for a Sub-workflow
To convert part of a workflow to a sub-workflow, select a group of valid nodes that connect to the rest of the workflow from at most one start node and one end node. The selection must meet these conditions:

- Must not include trigger nodes.
- Only one node in the selection can have incoming connections from nodes outside of the selection. This node can have multiple incoming connections but only a single input branch. 
- Only one node in the selection can have outgoing connections to nodes outside of the selection. This node can have multiple outgoing connections but only a single output branch.
- The selection must include all nodes between the input and output nodes.

## How to Convert Part of a Workflow to a Sub-workflow
1. Select the desired nodes on the canvas.
2. Right-click the canvas background and select **Convert to sub-workflow**.

## Things to Keep in Mind
- **Input/Output Type Constraints**: You must set type constraints for input and output manually. By default, sub-workflow input and output allow all types. Set expected types in the sub-workflow's [Execute Sub-workflow Trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger/) and [Edit Fields (set) node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/).
- **Limited Support for AI Nodes**: Select all sub-nodes like AI tools, and you may need to duplicate any nodes shared with other AI Agents before conversion.
- **Execution Ordering**: New workflows use [`v1` execution ordering](https://docs.n8n.io/flow-logic/execution-order/) regardless of the parent workflow's settings - this can be changed in the settings.
- **Accessor Functions**: Functions like `first()`, `last()`, and `all()` require extra care as they may not translate cleanly to a sub-workflow context. Verify their functionality after conversion.

### Sub-node Parameter Suffixes
n8n adds suffixes like `_firstItem`, `_lastItem`, and `_allItems` to variable names accessed by these functions to preserve original expression information, as item ordering may differ in the sub-workflow context.

- **`itemMatching` Function**: Requires a fixed index; expressions for index values cannot be used with the [`itemMatching` function](https://docs.n8n.io/code/builtin/output-other-nodes/). A fixed number must be passed.

----------------------------------------

# Workflow Tags

Workflow tags allow you to label workflows and filter them by tag. Tags are global, meaning when you create a tag, it is available to all users on your n8n instance.

## Add a Tag to a Workflow

To add a tag to your workflow:

1. In your workflow, select **+ Add tag**.
2. Select an existing tag or enter a new tag name.
3. After selecting a tag and clicking away from the tag modal, n8n displays the tag next to the workflow name.

You can add more than one tag.

## Filter by Tag

To filter workflows by tag:

1. On the **Workflows** page, select **Filters**.
2. Select **Tags**.
3. Choose the tag or tags you want to filter by. n8n lists the workflows with that tag.

## Manage Tags

You can edit existing tags, and instance owners can delete tags.

1. Select **Manage tags** from **Filters > Tags** on the **Workflows** page, or in the **+ Add tag** modal in your workflow.
2. Hover over the tag you want to change.
3. Select **Edit** to rename the tag or **Delete** to remove it.

### Global Tags

Any edits or deletions to a tag will affect all users of your n8n instance.

----------------------------------------

# Workflow Templates

## Access Templates
Select **Templates** to view the templates library. You can browse workflows on the n8n website or within a custom library provided by your organization.

## Add Your Workflow to the n8n Library
You can submit your workflows to n8n's template library.

## Self-hosted n8n: Disable Templates
Set the following environment variable:
```
N8N_TEMPLATES_ENABLED=false
```

## Self-hosted n8n: Use Your Own Library
Set the following environment variable:
```
N8N_TEMPLATES_HOST=<base URL of your API>
```

### Endpoints
Your API must provide the same endpoints and data structure as n8n's. The endpoints are:
| Method | Path |
| --- | --- |
| GET | /templates/workflows/ `<id>` |
| GET | /templates/search |
| GET | /templates/collections/ `<id>` |
| GET | /templates/collections |
| GET | /templates/categories |
| GET | /health |

### Query Parameters
The `/templates/search` endpoint accepts the following query parameters:
| Parameter | Type | Description |
| --- | --- | --- |
| `page` | integer | The page of results to return |
| `rows` | integer | The maximum number of results to return per page |
| `category` | comma-separated list of strings | The categories to search within |
| `search` | string | The search query |

The `/templates/collections` endpoint accepts the following query parameters:
| Parameter | Type | Description |
| --- | --- | --- |
| `category` | comma-separated list of strings | The categories to search within |
| `search` | string | The search query |

### Data Schema
#### Workflow Item Data Schema
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Generated schema for Root",
  "type": "object",
  "properties": {
    "id": {
      "type": "number"
    },
    "name": {
      "type": "string"
    },
    "totalViews": {
      "type": "number"
    },
    "price": {},
    "purchaseUrl": {},
    "recentViews": {
      "type": "number"
    },
    "createdAt": {
      "type": "string"
    },
    "user": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      },
      "required": [
        "username",
        "verified"
      ]
    },
    "nodes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "codex": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "details": {
                    "type": "string"
                  },
                  "resources": {
                    "type": "object",
                    "properties": {
                      "generic": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string"
                            },
                            "icon": {
                              "type": "string"
                            },
                            "label": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "url",
                            "label"
                          ]
                        }
                      },
                      "primaryDocumentation": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "url"
                          ]
                        }
                      }
                    },
                    "required": [
                      "primaryDocumentation"
                    ]
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nodeVersion": {
                    "type": "string"
                  },
                  "codexVersion": {
                    "type": "string"
                  }
                },
                "required": [
                  "categories"
                ]
              }
            }
          },
          "group": {
            "type": "string"
          },
          "defaults": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "iconData": {
            "type": "object",
            "properties": {
              "icon": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "fileBuffer": {
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "typeVersion": {
            "type": "number"
          },
          "nodeCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "required": [
          "id",
          "icon",
          "name",
          "codex",
          "group",
          "defaults",
          "iconData",
          "displayName",
          "typeVersion"
        ]
      }
    }
  },
  "required": [
    "id",
    "name",
    "totalViews",
    "price",
    "purchaseUrl",
    "recentViews",
    "createdAt",
    "user",
    "nodes"
  ]
}
```

#### Category Item Data Schema
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "id": {
      "type": "number"
    },
    "name": {
      "type": "string"
    }
  },
  "required": [
    "id",
    "name"
  ]
}
```

#### Collection Item Data Schema
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "id": {
      "type": "number"
    },
    "rank": {
      "type": "number"
    },
    "name": {
      "type": "string"
    },
    "totalViews": {},
    "createdAt": {
      "type": "string"
    },
    "workflows": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      }
    },
    "nodes": {
      "type": "array",
      "items": {}
    }
  },
  "required": [
    "id",
    "rank",
    "name",
    "totalViews",
    "createdAt",
    "workflows",
    "nodes"
  ]
}
```

### API Exploration
Interactively explore n8n's API endpoints:
- [GET /templates/categories](https://api.n8n.io/templates/categories)
- [GET /templates/collections](https://api.n8n.io/templates/collections)
- [GET /templates/search](https://api.n8n.io/templates/search)
- [GET /health](https://api.n8n.io/health)

----------------------------------------

# Find Your Workflow ID

Your workflow ID can be found in:

- The URL of the open workflow.
- The workflow settings title.

----------------------------------------

Built with ❤️ by Synaptiv AI

----------------------------------------

